
MatrixProy_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e864  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800ea04  0800ea04  0001ea04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee44  0800ee44  00020294  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee44  0800ee44  0001ee44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ee4c  0800ee4c  00020294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ee4c  0800ee4c  0001ee4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee50  0800ee50  0001ee50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000294  20000000  0800ee54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000048bc  20000294  0800f0e8  00020294  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  0800f0e8  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020294  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028a6d  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000059c1  00000000  00000000  00048d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  0004e6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d70  00000000  00000000  000506d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001fdaa  00000000  00000000  00052440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cf35  00000000  00000000  000721ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3ce4  00000000  00000000  0009f11f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00142e03  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008b38  00000000  00000000  00142e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000294 	.word	0x20000294
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800e9ec 	.word	0x0800e9ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000298 	.word	0x20000298
 80001dc:	0800e9ec 	.word	0x0800e9ec

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <BH1750_send_command>:

	return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000da4:	b299      	uxth	r1, r3
 8000da6:	1cfa      	adds	r2, r7, #3
 8000da8:	230a      	movs	r3, #10
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2301      	movs	r3, #1
 8000dae:	f004 f819 	bl	8004de4 <HAL_I2C_Master_Transmit>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	e000      	b.n	8000dbe <BH1750_send_command+0x2e>

	return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000dce:	6878      	ldr	r0, [r7, #4]
 8000dd0:	f000 f8aa 	bl	8000f28 <BH1750_get_lumen>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	4613      	mov	r3, r2
 8000de8:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000dea:	2114      	movs	r1, #20
 8000dec:	2001      	movs	r0, #1
 8000dee:	f00d f811 	bl	800de14 <calloc>
 8000df2:	4603      	mov	r3, r0
 8000df4:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d101      	bne.n	8000e00 <BH1750_init_dev_struct+0x24>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	e02d      	b.n	8000e5c <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d006      	beq.n	8000e14 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	2247      	movs	r2, #71	; 0x47
 8000e0a:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	2246      	movs	r2, #70	; 0x46
 8000e10:	725a      	strb	r2, [r3, #9]
 8000e12:	e005      	b.n	8000e20 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	22ba      	movs	r2, #186	; 0xba
 8000e18:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	22b9      	movs	r2, #185	; 0xb9
 8000e1e:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000e20:	68b8      	ldr	r0, [r7, #8]
 8000e22:	f7ff f9e7 	bl	80001f4 <strlen>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00d f827 	bl	800de7c <malloc>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <BH1750_init_dev_struct+0x66>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	e00c      	b.n	8000e5c <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	68b9      	ldr	r1, [r7, #8]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f00d f9c2 	bl	800e1d8 <strcpy>

	init->poll = &BH1750_poll_self;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	4a03      	ldr	r2, [pc, #12]	; (8000e64 <BH1750_init_dev_struct+0x88>)
 8000e58:	611a      	str	r2, [r3, #16]

	return init;
 8000e5a:	697b      	ldr	r3, [r7, #20]
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	08000dc7 	.word	0x08000dc7

08000e68 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000e70:	2101      	movs	r1, #1
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ff8c 	bl	8000d90 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000e78:	2103      	movs	r1, #3
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ff88 	bl	8000d90 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8000e80:	2110      	movs	r1, #16
 8000e82:	6878      	ldr	r0, [r7, #4]
 8000e84:	f7ff ff84 	bl	8000d90 <BH1750_send_command>

	return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b084      	sub	sp, #16
 8000e96:	af02      	add	r7, sp, #8
 8000e98:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000ea2:	b299      	uxth	r1, r3
			dev->buffer,
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8000eaa:	230a      	movs	r3, #10
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f004 f896 	bl	8004fe0 <HAL_I2C_Master_Receive>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e000      	b.n	8000ec0 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7b1b      	ldrb	r3, [r3, #12]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	895b      	ldrh	r3, [r3, #10]
 8000ede:	021b      	lsls	r3, r3, #8
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	7b5b      	ldrb	r3, [r3, #13]
 8000ee6:	b21b      	sxth	r3, r3
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	b21b      	sxth	r3, r3
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	895b      	ldrh	r3, [r3, #10]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fb2c 	bl	8000554 <__aeabi_i2d>
 8000efc:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <BH1750_convert+0x5c>)
 8000f02:	f7ff fcbb 	bl	800087c <__aeabi_ddiv>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f7ff fd9d 	bl	8000a4c <__aeabi_d2uiz>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	3ff33333 	.word	0x3ff33333

08000f28 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f7ff ffae 	bl	8000e92 <BH1750_read_dev>
	BH1750_convert(dev);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ffc6 	bl	8000ec8 <BH1750_convert>
	return HAL_OK;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <f_comandos>:
extern xSemaphoreHandle sem_rx;

extern char *MSG;

void f_comandos(uint8_t Comando)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b09a      	sub	sp, #104	; 0x68
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
	uint8_t hora_tx[16];
	uint8_t fecha_tx[16];
	uint8_t temp_tx[28];
	uint8_t msj_tx[32];
	uint8_t SensorLuz = OFF;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	switch (Comando)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	3b46      	subs	r3, #70	; 0x46
 8000f5c:	2b22      	cmp	r3, #34	; 0x22
 8000f5e:	f200 80ce 	bhi.w	80010fe <f_comandos+0x1b6>
 8000f62:	a201      	add	r2, pc, #4	; (adr r2, 8000f68 <f_comandos+0x20>)
 8000f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f68:	08000ff5 	.word	0x08000ff5
 8000f6c:	080010ff 	.word	0x080010ff
 8000f70:	0800100b 	.word	0x0800100b
 8000f74:	080010ff 	.word	0x080010ff
 8000f78:	080010ff 	.word	0x080010ff
 8000f7c:	080010ff 	.word	0x080010ff
 8000f80:	0800104d 	.word	0x0800104d
 8000f84:	08001065 	.word	0x08001065
 8000f88:	080010ff 	.word	0x080010ff
 8000f8c:	08001091 	.word	0x08001091
 8000f90:	080010ff 	.word	0x080010ff
 8000f94:	080010ff 	.word	0x080010ff
 8000f98:	080010ff 	.word	0x080010ff
 8000f9c:	080010ff 	.word	0x080010ff
 8000fa0:	08001021 	.word	0x08001021
 8000fa4:	080010ff 	.word	0x080010ff
 8000fa8:	080010ff 	.word	0x080010ff
 8000fac:	080010ff 	.word	0x080010ff
 8000fb0:	080010ff 	.word	0x080010ff
 8000fb4:	080010ff 	.word	0x080010ff
 8000fb8:	080010ff 	.word	0x080010ff
 8000fbc:	080010ff 	.word	0x080010ff
 8000fc0:	080010ff 	.word	0x080010ff
 8000fc4:	080010ff 	.word	0x080010ff
 8000fc8:	080010ff 	.word	0x080010ff
 8000fcc:	080010ff 	.word	0x080010ff
 8000fd0:	080010ff 	.word	0x080010ff
 8000fd4:	080010ff 	.word	0x080010ff
 8000fd8:	080010ff 	.word	0x080010ff
 8000fdc:	080010ff 	.word	0x080010ff
 8000fe0:	080010ff 	.word	0x080010ff
 8000fe4:	080010ff 	.word	0x080010ff
 8000fe8:	080010a1 	.word	0x080010a1
 8000fec:	080010ff 	.word	0x080010ff
 8000ff0:	080010cd 	.word	0x080010cd
	{
		case 'F' :  // Configuro la fecha
					if(dataRx[POS_FECHA]>47&&dataRx[POS_FECHA+CANT_FECHA-1]<58)
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <f_comandos+0x1c0>)
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	2b2f      	cmp	r3, #47	; 0x2f
 8000ffa:	d97d      	bls.n	80010f8 <f_comandos+0x1b0>
 8000ffc:	4b42      	ldr	r3, [pc, #264]	; (8001108 <f_comandos+0x1c0>)
 8000ffe:	7b5b      	ldrb	r3, [r3, #13]
 8001000:	2b39      	cmp	r3, #57	; 0x39
 8001002:	d879      	bhi.n	80010f8 <f_comandos+0x1b0>
					{
						RTC_SetFecha();
 8001004:	f000 fe88 	bl	8001d18 <RTC_SetFecha>
					}

					break;
 8001008:	e076      	b.n	80010f8 <f_comandos+0x1b0>

		case 'H' :  // Configuro la hora
					if(dataRx[POS_HORA]>47&&dataRx[POS_SEG+CANT_SEG-1]<58) RTC_SetHora();
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <f_comandos+0x1c0>)
 800100c:	791b      	ldrb	r3, [r3, #4]
 800100e:	2b2f      	cmp	r3, #47	; 0x2f
 8001010:	d974      	bls.n	80010fc <f_comandos+0x1b4>
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <f_comandos+0x1c0>)
 8001014:	7adb      	ldrb	r3, [r3, #11]
 8001016:	2b39      	cmp	r3, #57	; 0x39
 8001018:	d870      	bhi.n	80010fc <f_comandos+0x1b4>
 800101a:	f000 feb7 	bl	8001d8c <RTC_SetHora>

					break;
 800101e:	e06d      	b.n	80010fc <f_comandos+0x1b4>

		case 'T' :  // Devuelvo el valor de la temperatura y muestro en pantalla
					sprintf((char *)temp_tx,"%s\r\n",(char*)Cartel_Led.temp);
 8001020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001024:	4a39      	ldr	r2, [pc, #228]	; (800110c <f_comandos+0x1c4>)
 8001026:	493a      	ldr	r1, [pc, #232]	; (8001110 <f_comandos+0x1c8>)
 8001028:	4618      	mov	r0, r3
 800102a:	f00d f8b5 	bl	800e198 <siprintf>

					HAL_UART_Transmit(&huart1, temp_tx, strlen((char*)temp_tx), HAL_MAX_DELAY);
 800102e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8de 	bl	80001f4 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001040:	f04f 33ff 	mov.w	r3, #4294967295
 8001044:	4833      	ldr	r0, [pc, #204]	; (8001114 <f_comandos+0x1cc>)
 8001046:	f006 ff34 	bl	8007eb2 <HAL_UART_Transmit>

					break;
 800104a:	e058      	b.n	80010fe <f_comandos+0x1b6>

		case 'L' :  // APAGO/ ENCIENDO EL SENSOR DE LUZ
					if(!SensorLuz) SensorLuz = ON;
 800104c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001050:	2b00      	cmp	r3, #0
 8001052:	d103      	bne.n	800105c <f_comandos+0x114>
 8001054:	2301      	movs	r3, #1
 8001056:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					else SensorLuz = OFF;
					break;
 800105a:	e050      	b.n	80010fe <f_comandos+0x1b6>
					else SensorLuz = OFF;
 800105c:	2300      	movs	r3, #0
 800105e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					break;
 8001062:	e04c      	b.n	80010fe <f_comandos+0x1b6>

		case 'M' :	//Devuelvo el mensaje guardado
					sprintf((char *)msj_tx,"%s\r\n",(char*)Cartel_Led.mensaje);
 8001064:	f107 0308 	add.w	r3, r7, #8
 8001068:	4a2b      	ldr	r2, [pc, #172]	; (8001118 <f_comandos+0x1d0>)
 800106a:	4929      	ldr	r1, [pc, #164]	; (8001110 <f_comandos+0x1c8>)
 800106c:	4618      	mov	r0, r3
 800106e:	f00d f893 	bl	800e198 <siprintf>
					HAL_UART_Transmit(&huart1,msj_tx, strlen((char*)msj_tx), HAL_MAX_DELAY);
 8001072:	f107 0308 	add.w	r3, r7, #8
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff f8bc 	bl	80001f4 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	f107 0108 	add.w	r1, r7, #8
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	4822      	ldr	r0, [pc, #136]	; (8001114 <f_comandos+0x1cc>)
 800108a:	f006 ff12 	bl	8007eb2 <HAL_UART_Transmit>

					break;
 800108e:	e036      	b.n	80010fe <f_comandos+0x1b6>

		case 'O' :  //devuelvo un OK
					HAL_UART_Transmit(&huart1, (uint8_t *)"OK\r\n", 4, HAL_MAX_DELAY);
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	2204      	movs	r2, #4
 8001096:	4921      	ldr	r1, [pc, #132]	; (800111c <f_comandos+0x1d4>)
 8001098:	481e      	ldr	r0, [pc, #120]	; (8001114 <f_comandos+0x1cc>)
 800109a:	f006 ff0a 	bl	8007eb2 <HAL_UART_Transmit>

					break;
 800109e:	e02e      	b.n	80010fe <f_comandos+0x1b6>

		case 'f' :  // Devuelvo y muestro la fecha
					sprintf((char *)fecha_tx,"%s\r\n",(char *)Cartel_Led.fecha);
 80010a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010a4:	4a1e      	ldr	r2, [pc, #120]	; (8001120 <f_comandos+0x1d8>)
 80010a6:	491a      	ldr	r1, [pc, #104]	; (8001110 <f_comandos+0x1c8>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f00d f875 	bl	800e198 <siprintf>
					HAL_UART_Transmit(&huart1, fecha_tx, strlen((char *) fecha_tx), HAL_MAX_DELAY);
 80010ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f89e 	bl	80001f4 <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80010c0:	f04f 33ff 	mov.w	r3, #4294967295
 80010c4:	4813      	ldr	r0, [pc, #76]	; (8001114 <f_comandos+0x1cc>)
 80010c6:	f006 fef4 	bl	8007eb2 <HAL_UART_Transmit>
					break;
 80010ca:	e018      	b.n	80010fe <f_comandos+0x1b6>

		case 'h' :  // Devuelvo y muestro la hora
					sprintf((char *)hora_tx,"%s%s\r\n",(char *)Cartel_Led.hora,(char *)Cartel_Led.segs);
 80010cc:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <f_comandos+0x1dc>)
 80010d2:	4a15      	ldr	r2, [pc, #84]	; (8001128 <f_comandos+0x1e0>)
 80010d4:	4915      	ldr	r1, [pc, #84]	; (800112c <f_comandos+0x1e4>)
 80010d6:	f00d f85f 	bl	800e198 <siprintf>
					HAL_UART_Transmit(&huart1, hora_tx, strlen((char *) hora_tx), HAL_MAX_DELAY);
 80010da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff f888 	bl	80001f4 <strlen>
 80010e4:	4603      	mov	r3, r0
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <f_comandos+0x1cc>)
 80010f2:	f006 fede 	bl	8007eb2 <HAL_UART_Transmit>
					break;
 80010f6:	e002      	b.n	80010fe <f_comandos+0x1b6>
					break;
 80010f8:	bf00      	nop
 80010fa:	e000      	b.n	80010fe <f_comandos+0x1b6>
					break;
 80010fc:	bf00      	nop
	}

}
 80010fe:	bf00      	nop
 8001100:	3768      	adds	r7, #104	; 0x68
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000b18 	.word	0x20000b18
 800110c:	20000a53 	.word	0x20000a53
 8001110:	0800ea04 	.word	0x0800ea04
 8001114:	200009f0 	.word	0x200009f0
 8001118:	20000a6c 	.word	0x20000a6c
 800111c:	0800ea0c 	.word	0x0800ea0c
 8001120:	20000a38 	.word	0x20000a38
 8001124:	20000a4d 	.word	0x20000a4d
 8001128:	20000a45 	.word	0x20000a45
 800112c:	0800ea14 	.word	0x0800ea14

08001130 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
	UNUSED(huart);
	UNUSED(Size);

	BaseType_t p;
	xSemaphoreGiveFromISR(sem_rx,&p);//libero el semaforo de la tarea cuando terminé de recibir datos
 800113c:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_UARTEx_RxEventCallback+0x3c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f107 020c 	add.w	r2, r7, #12
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f00a fe84 	bl	800be54 <xQueueGiveFromISR>
	portEND_SWITCHING_ISR(p)
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <HAL_UARTEx_RxEventCallback+0x32>
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_UARTEx_RxEventCallback+0x40>)
 8001154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	f3bf 8f4f 	dsb	sy
 800115e:	f3bf 8f6f 	isb	sy
}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000aa8 	.word	0x20000aa8
 8001170:	e000ed04 	.word	0xe000ed04

08001174 <SPI_TX_Byte>:
//-----------------------------[ Static Functions' Definitions ]----------------------------

// Static Functions Used By Library But Not Visible To User Who Include The Library (Driver)

static void SPI_TX_Byte(uint8_t au8_DATA)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(g_hspi, &au8_DATA, 1, 10);
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <SPI_TX_Byte+0x20>)
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	1df9      	adds	r1, r7, #7
 8001184:	230a      	movs	r3, #10
 8001186:	2201      	movs	r2, #1
 8001188:	f005 fdef 	bl	8006d6a <HAL_SPI_Transmit>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200002b0 	.word	0x200002b0

08001198 <SS_ENABLE>:

static void SS_ENABLE(uint8_t au8_MATRIX_Instance)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 0);
 80011a2:	79fa      	ldrb	r2, [r7, #7]
 80011a4:	490b      	ldr	r1, [pc, #44]	; (80011d4 <SS_ENABLE+0x3c>)
 80011a6:	4613      	mov	r3, r2
 80011a8:	005b      	lsls	r3, r3, #1
 80011aa:	4413      	add	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	6818      	ldr	r0, [r3, #0]
 80011b2:	79fa      	ldrb	r2, [r7, #7]
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <SS_ENABLE+0x3c>)
 80011b6:	4613      	mov	r3, r2
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	4413      	add	r3, r2
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	440b      	add	r3, r1
 80011c0:	3304      	adds	r3, #4
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	2200      	movs	r2, #0
 80011c6:	4619      	mov	r1, r3
 80011c8:	f003 fc96 	bl	8004af8 <HAL_GPIO_WritePin>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800ec0c 	.word	0x0800ec0c

080011d8 <SS_DISABLE>:

static void SS_DISABLE(uint8_t au8_MATRIX_Instance)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_GPIO, DOT_MATRIX_CfgParam[au8_MATRIX_Instance].SS_PIN, 1);
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	490b      	ldr	r1, [pc, #44]	; (8001214 <SS_DISABLE+0x3c>)
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	6818      	ldr	r0, [r3, #0]
 80011f2:	79fa      	ldrb	r2, [r7, #7]
 80011f4:	4907      	ldr	r1, [pc, #28]	; (8001214 <SS_DISABLE+0x3c>)
 80011f6:	4613      	mov	r3, r2
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	4413      	add	r3, r2
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	440b      	add	r3, r1
 8001200:	3304      	adds	r3, #4
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	f003 fc76 	bl	8004af8 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	0800ec0c 	.word	0x0800ec0c

08001218 <DisplayBuffer>:
	SPI_TX_Byte(au8_Val);
	SS_DISABLE(au8_MATRIX_Instance);
}

static void DisplayBuffer(uint8_t au8_MATRIX_Instance)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	73fb      	strb	r3, [r7, #15]

    for(i = 0; i<DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 8001226:	2300      	movs	r3, #0
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e051      	b.n	80012d0 <DisplayBuffer+0xb8>
    {
	    for(uint8_t j = 1; j < 9; j++)
 800122c:	2301      	movs	r3, #1
 800122e:	73bb      	strb	r3, [r7, #14]
 8001230:	e048      	b.n	80012c4 <DisplayBuffer+0xac>
	    {
	    	SS_ENABLE(au8_MATRIX_Instance);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffaf 	bl	8001198 <SS_ENABLE>
		   for(uint8_t k = 0; k < i; k++)
 800123a:	2300      	movs	r3, #0
 800123c:	737b      	strb	r3, [r7, #13]
 800123e:	e008      	b.n	8001252 <DisplayBuffer+0x3a>
		   {
			   SPI_TX_Byte(0x00);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff97 	bl	8001174 <SPI_TX_Byte>
		       SPI_TX_Byte(0x00);
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff ff94 	bl	8001174 <SPI_TX_Byte>
		   for(uint8_t k = 0; k < i; k++)
 800124c:	7b7b      	ldrb	r3, [r7, #13]
 800124e:	3301      	adds	r3, #1
 8001250:	737b      	strb	r3, [r7, #13]
 8001252:	7b7a      	ldrb	r2, [r7, #13]
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3f2      	bcc.n	8001240 <DisplayBuffer+0x28>
		   }
		   SPI_TX_Byte(j);
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff89 	bl	8001174 <SPI_TX_Byte>
		   SPI_TX_Byte(gs_MATRIX_info[au8_MATRIX_Instance].Buffer[j + i*8 - 1]);
 8001262:	79fa      	ldrb	r2, [r7, #7]
 8001264:	7bb9      	ldrb	r1, [r7, #14]
 8001266:	7bfb      	ldrb	r3, [r7, #15]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	3b01      	subs	r3, #1
 800126e:	4921      	ldr	r1, [pc, #132]	; (80012f4 <DisplayBuffer+0xdc>)
 8001270:	2034      	movs	r0, #52	; 0x34
 8001272:	fb00 f202 	mul.w	r2, r0, r2
 8001276:	440a      	add	r2, r1
 8001278:	4413      	add	r3, r2
 800127a:	330c      	adds	r3, #12
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff78 	bl	8001174 <SPI_TX_Byte>
		   for(uint8_t k = DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES-1; k > i; k--)
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	491c      	ldr	r1, [pc, #112]	; (80012f8 <DisplayBuffer+0xe0>)
 8001288:	4613      	mov	r3, r2
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4413      	add	r3, r2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	440b      	add	r3, r1
 8001292:	3308      	adds	r3, #8
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3b01      	subs	r3, #1
 8001298:	733b      	strb	r3, [r7, #12]
 800129a:	e008      	b.n	80012ae <DisplayBuffer+0x96>
		   {
 			   SPI_TX_Byte(0x00);
 800129c:	2000      	movs	r0, #0
 800129e:	f7ff ff69 	bl	8001174 <SPI_TX_Byte>
			   SPI_TX_Byte(0x00);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff ff66 	bl	8001174 <SPI_TX_Byte>
		   for(uint8_t k = DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES-1; k > i; k--)
 80012a8:	7b3b      	ldrb	r3, [r7, #12]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	733b      	strb	r3, [r7, #12]
 80012ae:	7b3a      	ldrb	r2, [r7, #12]
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	429a      	cmp	r2, r3
 80012b4:	d8f2      	bhi.n	800129c <DisplayBuffer+0x84>
		   }
		   SS_DISABLE(au8_MATRIX_Instance);
 80012b6:	79fb      	ldrb	r3, [r7, #7]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff ff8d 	bl	80011d8 <SS_DISABLE>
	    for(uint8_t j = 1; j < 9; j++)
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	3301      	adds	r3, #1
 80012c2:	73bb      	strb	r3, [r7, #14]
 80012c4:	7bbb      	ldrb	r3, [r7, #14]
 80012c6:	2b08      	cmp	r3, #8
 80012c8:	d9b3      	bls.n	8001232 <DisplayBuffer+0x1a>
    for(i = 0; i<DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES; i++)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	3301      	adds	r3, #1
 80012ce:	73fb      	strb	r3, [r7, #15]
 80012d0:	79fa      	ldrb	r2, [r7, #7]
 80012d2:	4909      	ldr	r1, [pc, #36]	; (80012f8 <DisplayBuffer+0xe0>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3308      	adds	r3, #8
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	7bfa      	ldrb	r2, [r7, #15]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d3a1      	bcc.n	800122c <DisplayBuffer+0x14>
	    }
    }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002b4 	.word	0x200002b4
 80012f8:	0800ec0c 	.word	0x0800ec0c

080012fc <PushToBuffer>:

static void PushToBuffer(uint8_t au8_MATRIX_Instance, uint8_t au8_NewByte)
{
 80012fc:	b4b0      	push	{r4, r5, r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	460a      	mov	r2, r1
 8001306:	71fb      	strb	r3, [r7, #7]
 8001308:	4613      	mov	r3, r2
 800130a:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

	for(i = 0; i < DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES*8 - 1; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e018      	b.n	8001348 <PushToBuffer+0x4c>
	{
		gs_MATRIX_info[au8_MATRIX_Instance].Buffer[i] = gs_MATRIX_info[au8_MATRIX_Instance].Buffer[i+1];
 8001316:	79f8      	ldrb	r0, [r7, #7]
 8001318:	7bfb      	ldrb	r3, [r7, #15]
 800131a:	1c59      	adds	r1, r3, #1
 800131c:	79fa      	ldrb	r2, [r7, #7]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	4c1d      	ldr	r4, [pc, #116]	; (8001398 <PushToBuffer+0x9c>)
 8001322:	2534      	movs	r5, #52	; 0x34
 8001324:	fb05 f000 	mul.w	r0, r5, r0
 8001328:	4420      	add	r0, r4
 800132a:	4401      	add	r1, r0
 800132c:	310c      	adds	r1, #12
 800132e:	780c      	ldrb	r4, [r1, #0]
 8001330:	4919      	ldr	r1, [pc, #100]	; (8001398 <PushToBuffer+0x9c>)
 8001332:	2034      	movs	r0, #52	; 0x34
 8001334:	fb00 f202 	mul.w	r2, r0, r2
 8001338:	440a      	add	r2, r1
 800133a:	4413      	add	r3, r2
 800133c:	330c      	adds	r3, #12
 800133e:	4622      	mov	r2, r4
 8001340:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES*8 - 1; i++)
 8001342:	7bfb      	ldrb	r3, [r7, #15]
 8001344:	3301      	adds	r3, #1
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	7bf9      	ldrb	r1, [r7, #15]
 800134a:	79fa      	ldrb	r2, [r7, #7]
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <PushToBuffer+0xa0>)
 800134e:	4613      	mov	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4403      	add	r3, r0
 8001358:	3308      	adds	r3, #8
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	00db      	lsls	r3, r3, #3
 800135e:	3b01      	subs	r3, #1
 8001360:	4299      	cmp	r1, r3
 8001362:	dbd8      	blt.n	8001316 <PushToBuffer+0x1a>
	}
	gs_MATRIX_info[au8_MATRIX_Instance].Buffer[DOT_MATRIX_CfgParam[au8_MATRIX_Instance].CASCADED_DEVICES*8 - 1] = au8_NewByte;
 8001364:	79f9      	ldrb	r1, [r7, #7]
 8001366:	79fa      	ldrb	r2, [r7, #7]
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <PushToBuffer+0xa0>)
 800136a:	4613      	mov	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4403      	add	r3, r0
 8001374:	3308      	adds	r3, #8
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	00db      	lsls	r3, r3, #3
 800137a:	3b01      	subs	r3, #1
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <PushToBuffer+0x9c>)
 800137e:	2234      	movs	r2, #52	; 0x34
 8001380:	fb01 f202 	mul.w	r2, r1, r2
 8001384:	4402      	add	r2, r0
 8001386:	4413      	add	r3, r2
 8001388:	330c      	adds	r3, #12
 800138a:	79ba      	ldrb	r2, [r7, #6]
 800138c:	701a      	strb	r2, [r3, #0]
}
 800138e:	bf00      	nop
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	bcb0      	pop	{r4, r5, r7}
 8001396:	4770      	bx	lr
 8001398:	200002b4 	.word	0x200002b4
 800139c:	0800ec0c 	.word	0x0800ec0c

080013a0 <DOT_MATRIX_Brightness>:

// Functions To Be Used By The User Who Include The Library (Driver)

// for(i = 0; i<DOT_MATRIX_UNITS; i++)
void DOT_MATRIX_Brightness(uint8_t b)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	71fb      	strb	r3, [r7, #7]
	uint8_t i = 0, j = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	2300      	movs	r3, #0
 80013b0:	73bb      	strb	r3, [r7, #14]

	/*--------[ Configure The SS GPIO Pins ]-------*/
	for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
 80013b6:	e023      	b.n	8001400 <DOT_MATRIX_Brightness+0x60>
	{
		SS_ENABLE(i);
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff feec 	bl	8001198 <SS_ENABLE>
		for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	73bb      	strb	r3, [r7, #14]
 80013c4:	e009      	b.n	80013da <DOT_MATRIX_Brightness+0x3a>
		{
			SPI_TX_Byte(0x0A); // Select Intensity register
 80013c6:	200a      	movs	r0, #10
 80013c8:	f7ff fed4 	bl	8001174 <SPI_TX_Byte>
			SPI_TX_Byte(b);
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fed0 	bl	8001174 <SPI_TX_Byte>
		for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	3301      	adds	r3, #1
 80013d8:	73bb      	strb	r3, [r7, #14]
 80013da:	7bfa      	ldrb	r2, [r7, #15]
 80013dc:	490c      	ldr	r1, [pc, #48]	; (8001410 <DOT_MATRIX_Brightness+0x70>)
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	440b      	add	r3, r1
 80013e8:	3308      	adds	r3, #8
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	7bba      	ldrb	r2, [r7, #14]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d3e9      	bcc.n	80013c6 <DOT_MATRIX_Brightness+0x26>
		}
		SS_DISABLE(i);
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff feef 	bl	80011d8 <SS_DISABLE>
	for(i = 0; i<DOT_MATRIX_UNITS; i++)
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	3301      	adds	r3, #1
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d0d8      	beq.n	80013b8 <DOT_MATRIX_Brightness+0x18>
	  }
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	0800ec0c 	.word	0x0800ec0c

08001414 <DOT_MATRIX_Init>:

void DOT_MATRIX_Init(SPI_HandleTypeDef * hspi)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08e      	sub	sp, #56	; 0x38
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
    uint8_t i = 0, j = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    g_hspi = hspi;
 8001438:	4aa9      	ldr	r2, [pc, #676]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]

    /*--------[ Configure The SS GPIO Pins ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 800143e:	2300      	movs	r3, #0
 8001440:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001444:	e0aa      	b.n	800159c <DOT_MATRIX_Init+0x188>
    {
    	if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOA)
 8001446:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800144a:	49a6      	ldr	r1, [pc, #664]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4aa3      	ldr	r2, [pc, #652]	; (80016e8 <DOT_MATRIX_Init+0x2d4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d10e      	bne.n	800147c <DOT_MATRIX_Init+0x68>
    	{
    		__HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	4ba2      	ldr	r3, [pc, #648]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4aa1      	ldr	r2, [pc, #644]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b9f      	ldr	r3, [pc, #636]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	e06a      	b.n	8001552 <DOT_MATRIX_Init+0x13e>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOB)
 800147c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001480:	4998      	ldr	r1, [pc, #608]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a98      	ldr	r2, [pc, #608]	; (80016f0 <DOT_MATRIX_Init+0x2dc>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d10e      	bne.n	80014b2 <DOT_MATRIX_Init+0x9e>
    	{
    		__HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
 8001498:	4b94      	ldr	r3, [pc, #592]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a93      	ldr	r2, [pc, #588]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b91      	ldr	r3, [pc, #580]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	e04f      	b.n	8001552 <DOT_MATRIX_Init+0x13e>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOC)
 80014b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80014b6:	498b      	ldr	r1, [pc, #556]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a8b      	ldr	r2, [pc, #556]	; (80016f4 <DOT_MATRIX_Init+0x2e0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d10e      	bne.n	80014e8 <DOT_MATRIX_Init+0xd4>
    	{
    		__HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	617b      	str	r3, [r7, #20]
 80014ce:	4b87      	ldr	r3, [pc, #540]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a86      	ldr	r2, [pc, #536]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b84      	ldr	r3, [pc, #528]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	e034      	b.n	8001552 <DOT_MATRIX_Init+0x13e>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOD)
 80014e8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80014ec:	497d      	ldr	r1, [pc, #500]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a7f      	ldr	r2, [pc, #508]	; (80016f8 <DOT_MATRIX_Init+0x2e4>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d10e      	bne.n	800151e <DOT_MATRIX_Init+0x10a>
    	{
    		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	2300      	movs	r3, #0
 8001502:	613b      	str	r3, [r7, #16]
 8001504:	4b79      	ldr	r3, [pc, #484]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	4a78      	ldr	r2, [pc, #480]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	6313      	str	r3, [r2, #48]	; 0x30
 8001510:	4b76      	ldr	r3, [pc, #472]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	e019      	b.n	8001552 <DOT_MATRIX_Init+0x13e>
    	}
    	else if(DOT_MATRIX_CfgParam[i].SS_GPIO == GPIOE)
 800151e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001522:	4970      	ldr	r1, [pc, #448]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 8001524:	4613      	mov	r3, r2
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4413      	add	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	440b      	add	r3, r1
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a72      	ldr	r2, [pc, #456]	; (80016fc <DOT_MATRIX_Init+0x2e8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d10d      	bne.n	8001552 <DOT_MATRIX_Init+0x13e>
    	{
    		__HAL_RCC_GPIOE_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	4b6c      	ldr	r3, [pc, #432]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a6b      	ldr	r2, [pc, #428]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b69      	ldr	r3, [pc, #420]	; (80016ec <DOT_MATRIX_Init+0x2d8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]
    	}
    	GPIO_InitStruct.Pin = DOT_MATRIX_CfgParam[i].SS_PIN;
 8001552:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001556:	4963      	ldr	r1, [pc, #396]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	440b      	add	r3, r1
 8001562:	3304      	adds	r3, #4
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001568:	2301      	movs	r3, #1
 800156a:	627b      	str	r3, [r7, #36]	; 0x24
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62bb      	str	r3, [r7, #40]	; 0x28
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	62fb      	str	r3, [r7, #44]	; 0x2c
    	HAL_GPIO_Init(DOT_MATRIX_CfgParam[i].SS_GPIO, &GPIO_InitStruct);
 8001574:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001578:	495a      	ldr	r1, [pc, #360]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f107 0220 	add.w	r2, r7, #32
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f003 f917 	bl	80047c0 <HAL_GPIO_Init>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8001592:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001596:	3301      	adds	r3, #1
 8001598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800159c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f43f af50 	beq.w	8001446 <DOT_MATRIX_Init+0x32>
    }
    /*--------[ Configure The SPI Peripheral ]-------*/
    g_hspi->Instance = DOT_MATRIX_SPI;
 80015a6:	4b4e      	ldr	r3, [pc, #312]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a55      	ldr	r2, [pc, #340]	; (8001700 <DOT_MATRIX_Init+0x2ec>)
 80015ac:	601a      	str	r2, [r3, #0]
    g_hspi->Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b4c      	ldr	r3, [pc, #304]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015b6:	605a      	str	r2, [r3, #4]
    g_hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80015b8:	4b49      	ldr	r3, [pc, #292]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
    g_hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80015c0:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2200      	movs	r2, #0
 80015c6:	60da      	str	r2, [r3, #12]
    g_hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c8:	4b45      	ldr	r3, [pc, #276]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2200      	movs	r2, #0
 80015ce:	611a      	str	r2, [r3, #16]
    g_hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80015d0:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    g_hspi->Init.NSS = SPI_NSS_SOFT;
 80015d8:	4b41      	ldr	r3, [pc, #260]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e0:	619a      	str	r2, [r3, #24]
    g_hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015e2:	4b3f      	ldr	r3, [pc, #252]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2238      	movs	r2, #56	; 0x38
 80015e8:	61da      	str	r2, [r3, #28]
    g_hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ea:	4b3d      	ldr	r3, [pc, #244]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2200      	movs	r2, #0
 80015f0:	621a      	str	r2, [r3, #32]
    g_hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b3b      	ldr	r3, [pc, #236]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	; 0x24
    g_hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	4b39      	ldr	r3, [pc, #228]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2200      	movs	r2, #0
 8001600:	629a      	str	r2, [r3, #40]	; 0x28
    g_hspi->Init.CRCPolynomial = 10;
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	220a      	movs	r2, #10
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
    HAL_SPI_Init(g_hspi);
 800160a:	4b35      	ldr	r3, [pc, #212]	; (80016e0 <DOT_MATRIX_Init+0x2cc>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f005 fb22 	bl	8006c58 <HAL_SPI_Init>

    /*--------[ Initialize & Configure The MAX7219 Devices ]-------*/
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800161a:	e144      	b.n	80018a6 <DOT_MATRIX_Init+0x492>
    {
    	// Set BCD Decode Mode
    	SS_ENABLE(i);
 800161c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fdb9 	bl	8001198 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001626:	2300      	movs	r3, #0
 8001628:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800162c:	e00a      	b.n	8001644 <DOT_MATRIX_Init+0x230>
    	{
    	    SPI_TX_Byte(0x09);
 800162e:	2009      	movs	r0, #9
 8001630:	f7ff fda0 	bl	8001174 <SPI_TX_Byte>
    	    SPI_TX_Byte(0x00);
 8001634:	2000      	movs	r0, #0
 8001636:	f7ff fd9d 	bl	8001174 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800163a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800163e:	3301      	adds	r3, #1
 8001640:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001644:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001648:	4926      	ldr	r1, [pc, #152]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	440b      	add	r3, r1
 8001654:	3308      	adds	r3, #8
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800165c:	429a      	cmp	r2, r3
 800165e:	d3e6      	bcc.n	800162e <DOT_MATRIX_Init+0x21a>
    	}
    	SS_DISABLE(i);
 8001660:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff fdb7 	bl	80011d8 <SS_DISABLE>
    	// Set Dot Matrix Unit Brightness
    	SS_ENABLE(i);
 800166a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fd92 	bl	8001198 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800167a:	e014      	b.n	80016a6 <DOT_MATRIX_Init+0x292>
    	{
    		SPI_TX_Byte(0x0A); // Select Intensity register
 800167c:	200a      	movs	r0, #10
 800167e:	f7ff fd79 	bl	8001174 <SPI_TX_Byte>
    		SPI_TX_Byte(DOT_MATRIX_CfgParam[i].BRIGHTNESS);
 8001682:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001686:	4917      	ldr	r1, [pc, #92]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	440b      	add	r3, r1
 8001692:	3309      	adds	r3, #9
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff fd6c 	bl	8001174 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800169c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80016a0:	3301      	adds	r3, #1
 80016a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80016a6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80016aa:	490e      	ldr	r1, [pc, #56]	; (80016e4 <DOT_MATRIX_Init+0x2d0>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4413      	add	r3, r2
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	440b      	add	r3, r1
 80016b6:	3308      	adds	r3, #8
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3dc      	bcc.n	800167c <DOT_MATRIX_Init+0x268>
    	}
    	SS_DISABLE(i);
 80016c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fd86 	bl	80011d8 <SS_DISABLE>
    	// Set Display Refresh
    	SS_ENABLE(i);
 80016cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd61 	bl	8001198 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80016dc:	e01d      	b.n	800171a <DOT_MATRIX_Init+0x306>
 80016de:	bf00      	nop
 80016e0:	200002b0 	.word	0x200002b0
 80016e4:	0800ec0c 	.word	0x0800ec0c
 80016e8:	40020000 	.word	0x40020000
 80016ec:	40023800 	.word	0x40023800
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40013000 	.word	0x40013000
    	{
    		SPI_TX_Byte(0x0B); // Select Scan-Limit register
 8001704:	200b      	movs	r0, #11
 8001706:	f7ff fd35 	bl	8001174 <SPI_TX_Byte>
    		SPI_TX_Byte(0x07); // 1-7
 800170a:	2007      	movs	r0, #7
 800170c:	f7ff fd32 	bl	8001174 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001710:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001714:	3301      	adds	r3, #1
 8001716:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800171a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800171e:	4967      	ldr	r1, [pc, #412]	; (80018bc <DOT_MATRIX_Init+0x4a8>)
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	3308      	adds	r3, #8
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001732:	429a      	cmp	r2, r3
 8001734:	d3e6      	bcc.n	8001704 <DOT_MATRIX_Init+0x2f0>
    	}
    	SS_DISABLE(i);
 8001736:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff fd4c 	bl	80011d8 <SS_DISABLE>
    	// Turn ON The Display
    	SS_ENABLE(i);
 8001740:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fd27 	bl	8001198 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800174a:	2300      	movs	r3, #0
 800174c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001750:	e00a      	b.n	8001768 <DOT_MATRIX_Init+0x354>
    	{
    		SPI_TX_Byte(0x0C);
 8001752:	200c      	movs	r0, #12
 8001754:	f7ff fd0e 	bl	8001174 <SPI_TX_Byte>
    		SPI_TX_Byte(0x01);
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff fd0b 	bl	8001174 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 800175e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001762:	3301      	adds	r3, #1
 8001764:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001768:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800176c:	4953      	ldr	r1, [pc, #332]	; (80018bc <DOT_MATRIX_Init+0x4a8>)
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	440b      	add	r3, r1
 8001778:	3308      	adds	r3, #8
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001780:	429a      	cmp	r2, r3
 8001782:	d3e6      	bcc.n	8001752 <DOT_MATRIX_Init+0x33e>
    	}
    	SS_DISABLE(i);
 8001784:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fd25 	bl	80011d8 <SS_DISABLE>
    	// Disable Display Test
    	SS_ENABLE(i);
 800178e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd00 	bl	8001198 <SS_ENABLE>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 8001798:	2300      	movs	r3, #0
 800179a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800179e:	e00a      	b.n	80017b6 <DOT_MATRIX_Init+0x3a2>
    	{
    		SPI_TX_Byte(0x0F);
 80017a0:	200f      	movs	r0, #15
 80017a2:	f7ff fce7 	bl	8001174 <SPI_TX_Byte>
    		SPI_TX_Byte(0x00);
 80017a6:	2000      	movs	r0, #0
 80017a8:	f7ff fce4 	bl	8001174 <SPI_TX_Byte>
    	for(j = 0; j<DOT_MATRIX_CfgParam[i].CASCADED_DEVICES; j++)
 80017ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80017b0:	3301      	adds	r3, #1
 80017b2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80017b6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80017ba:	4940      	ldr	r1, [pc, #256]	; (80018bc <DOT_MATRIX_Init+0x4a8>)
 80017bc:	4613      	mov	r3, r2
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	4413      	add	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	3308      	adds	r3, #8
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d3e6      	bcc.n	80017a0 <DOT_MATRIX_Init+0x38c>
    	}
    	SS_DISABLE(i);
 80017d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fcfe 	bl	80011d8 <SS_DISABLE>

        // Initialize The Global Structure
        gs_MATRIX_info[i].Ticks = 0;
 80017dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017e0:	4a37      	ldr	r2, [pc, #220]	; (80018c0 <DOT_MATRIX_Init+0x4ac>)
 80017e2:	2134      	movs	r1, #52	; 0x34
 80017e4:	fb01 f303 	mul.w	r3, r1, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
        gs_MATRIX_info[i].BufferInit = 0;
 80017ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80017f2:	4a33      	ldr	r2, [pc, #204]	; (80018c0 <DOT_MATRIX_Init+0x4ac>)
 80017f4:	2134      	movs	r1, #52	; 0x34
 80017f6:	fb01 f303 	mul.w	r3, r1, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	330b      	adds	r3, #11
 80017fe:	2200      	movs	r2, #0
 8001800:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Arr_Index = 0;
 8001802:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001806:	4a2e      	ldr	r2, [pc, #184]	; (80018c0 <DOT_MATRIX_Init+0x4ac>)
 8001808:	2134      	movs	r1, #52	; 0x34
 800180a:	fb01 f303 	mul.w	r3, r1, r3
 800180e:	4413      	add	r3, r2
 8001810:	3308      	adds	r3, #8
 8001812:	2200      	movs	r2, #0
 8001814:	801a      	strh	r2, [r3, #0]
        gs_MATRIX_info[i].Col_Index = 0;
 8001816:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800181a:	4a29      	ldr	r2, [pc, #164]	; (80018c0 <DOT_MATRIX_Init+0x4ac>)
 800181c:	2134      	movs	r1, #52	; 0x34
 800181e:	fb01 f303 	mul.w	r3, r1, r3
 8001822:	4413      	add	r3, r2
 8001824:	330a      	adds	r3, #10
 8001826:	2200      	movs	r2, #0
 8001828:	701a      	strb	r2, [r3, #0]
        gs_MATRIX_info[i].Max_Ticks = DOT_MATRIX_CfgParam[i].SCROLL_SPEED;
 800182a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800182e:	4923      	ldr	r1, [pc, #140]	; (80018bc <DOT_MATRIX_Init+0x4a8>)
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3306      	adds	r3, #6
 800183c:	881a      	ldrh	r2, [r3, #0]
 800183e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001842:	4610      	mov	r0, r2
 8001844:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <DOT_MATRIX_Init+0x4ac>)
 8001846:	2134      	movs	r1, #52	; 0x34
 8001848:	fb01 f303 	mul.w	r3, r1, r3
 800184c:	4413      	add	r3, r2
 800184e:	3304      	adds	r3, #4
 8001850:	6018      	str	r0, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8001852:	2300      	movs	r3, #0
 8001854:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001858:	e011      	b.n	800187e <DOT_MATRIX_Init+0x46a>
        {
        	gs_MATRIX_info[i].Buffer[j] = 0x00;
 800185a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800185e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001862:	4917      	ldr	r1, [pc, #92]	; (80018c0 <DOT_MATRIX_Init+0x4ac>)
 8001864:	2034      	movs	r0, #52	; 0x34
 8001866:	fb00 f202 	mul.w	r2, r0, r2
 800186a:	440a      	add	r2, r1
 800186c:	4413      	add	r3, r2
 800186e:	330c      	adds	r3, #12
 8001870:	2200      	movs	r2, #0
 8001872:	701a      	strb	r2, [r3, #0]
        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8001874:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001878:	3301      	adds	r3, #1
 800187a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800187e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8001882:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <DOT_MATRIX_Init+0x4a8>)
 8001888:	4613      	mov	r3, r2
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	4413      	add	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4403      	add	r3, r0
 8001892:	3308      	adds	r3, #8
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4299      	cmp	r1, r3
 800189a:	dbde      	blt.n	800185a <DOT_MATRIX_Init+0x446>
    for(i = 0; i<DOT_MATRIX_UNITS; i++)
 800189c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018a0:	3301      	adds	r3, #1
 80018a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80018a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f43f aeb6 	beq.w	800161c <DOT_MATRIX_Init+0x208>
        }
    }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	3738      	adds	r7, #56	; 0x38
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	0800ec0c 	.word	0x0800ec0c
 80018c0:	200002b4 	.word	0x200002b4

080018c4 <DOT_MATRIX_Clear>:


void DOT_MATRIX_Clear(SPI_HandleTypeDef * hspi)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]


	    uint8_t i = 0, j = 0;
 80018cc:	2300      	movs	r3, #0
 80018ce:	73bb      	strb	r3, [r7, #14]
 80018d0:	2300      	movs	r3, #0
 80018d2:	73fb      	strb	r3, [r7, #15]

	    g_hspi = hspi;
 80018d4:	4a2e      	ldr	r2, [pc, #184]	; (8001990 <DOT_MATRIX_Clear+0xcc>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]


	        // Initialize The Global Structure
	        gs_MATRIX_info[i].Ticks = 0;
 80018da:	7bbb      	ldrb	r3, [r7, #14]
 80018dc:	4a2d      	ldr	r2, [pc, #180]	; (8001994 <DOT_MATRIX_Clear+0xd0>)
 80018de:	2134      	movs	r1, #52	; 0x34
 80018e0:	fb01 f303 	mul.w	r3, r1, r3
 80018e4:	4413      	add	r3, r2
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
	        gs_MATRIX_info[i].BufferInit = 0;
 80018ea:	7bbb      	ldrb	r3, [r7, #14]
 80018ec:	4a29      	ldr	r2, [pc, #164]	; (8001994 <DOT_MATRIX_Clear+0xd0>)
 80018ee:	2134      	movs	r1, #52	; 0x34
 80018f0:	fb01 f303 	mul.w	r3, r1, r3
 80018f4:	4413      	add	r3, r2
 80018f6:	330b      	adds	r3, #11
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	        gs_MATRIX_info[i].Arr_Index = 0;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	4a25      	ldr	r2, [pc, #148]	; (8001994 <DOT_MATRIX_Clear+0xd0>)
 8001900:	2134      	movs	r1, #52	; 0x34
 8001902:	fb01 f303 	mul.w	r3, r1, r3
 8001906:	4413      	add	r3, r2
 8001908:	3308      	adds	r3, #8
 800190a:	2200      	movs	r2, #0
 800190c:	801a      	strh	r2, [r3, #0]
	        gs_MATRIX_info[i].Col_Index = 0;
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	4a20      	ldr	r2, [pc, #128]	; (8001994 <DOT_MATRIX_Clear+0xd0>)
 8001912:	2134      	movs	r1, #52	; 0x34
 8001914:	fb01 f303 	mul.w	r3, r1, r3
 8001918:	4413      	add	r3, r2
 800191a:	330a      	adds	r3, #10
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
	        gs_MATRIX_info[i].Max_Ticks = DOT_MATRIX_CfgParam[i].SCROLL_SPEED;
 8001920:	7bba      	ldrb	r2, [r7, #14]
 8001922:	491d      	ldr	r1, [pc, #116]	; (8001998 <DOT_MATRIX_Clear+0xd4>)
 8001924:	4613      	mov	r3, r2
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3306      	adds	r3, #6
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	7bbb      	ldrb	r3, [r7, #14]
 8001934:	4610      	mov	r0, r2
 8001936:	4a17      	ldr	r2, [pc, #92]	; (8001994 <DOT_MATRIX_Clear+0xd0>)
 8001938:	2134      	movs	r1, #52	; 0x34
 800193a:	fb01 f303 	mul.w	r3, r1, r3
 800193e:	4413      	add	r3, r2
 8001940:	3304      	adds	r3, #4
 8001942:	6018      	str	r0, [r3, #0]
	        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8001944:	2300      	movs	r3, #0
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e00d      	b.n	8001966 <DOT_MATRIX_Clear+0xa2>
	        {
	        	gs_MATRIX_info[i].Buffer[j] = 0x00;
 800194a:	7bba      	ldrb	r2, [r7, #14]
 800194c:	7bfb      	ldrb	r3, [r7, #15]
 800194e:	4911      	ldr	r1, [pc, #68]	; (8001994 <DOT_MATRIX_Clear+0xd0>)
 8001950:	2034      	movs	r0, #52	; 0x34
 8001952:	fb00 f202 	mul.w	r2, r0, r2
 8001956:	440a      	add	r2, r1
 8001958:	4413      	add	r3, r2
 800195a:	330c      	adds	r3, #12
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
	        for(j = 0; j < DOT_MATRIX_CfgParam[i].CASCADED_DEVICES*8; j++)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	3301      	adds	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	7bf9      	ldrb	r1, [r7, #15]
 8001968:	7bba      	ldrb	r2, [r7, #14]
 800196a:	480b      	ldr	r0, [pc, #44]	; (8001998 <DOT_MATRIX_Clear+0xd4>)
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4403      	add	r3, r0
 8001976:	3308      	adds	r3, #8
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4299      	cmp	r1, r3
 800197e:	dbe4      	blt.n	800194a <DOT_MATRIX_Clear+0x86>
	        }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	200002b0 	.word	0x200002b0
 8001994:	200002b4 	.word	0x200002b4
 8001998:	0800ec0c 	.word	0x0800ec0c

0800199c <DOT_MATRIX_Init_TMR>:



void DOT_MATRIX_Init_TMR(SPI_HandleTypeDef * hspi, TIM_HandleTypeDef* TMR_Handle)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08a      	sub	sp, #40	; 0x28
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
    uint32_t ARR_Value = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24

	DOT_MATRIX_Init(hspi);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff fd26 	bl	8001414 <DOT_MATRIX_Init>

	/*--------[ Configure The Matrix Timer Base If Enabled ]-------*/
    if(MATRIX_TIMER_EN == 1)
    {
    	ARR_Value = (MATRIX_TIMER_CLK * 10.0 * MATRIX_TIME_BASE);
 80019c8:	f44f 7334 	mov.w	r3, #720	; 0x2d0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    	TMR_Handle->Instance = MATRIX_TIMER;
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <DOT_MATRIX_Init_TMR+0x94>)
 80019d2:	601a      	str	r2, [r3, #0]
    	TMR_Handle->Init.Prescaler = 99;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	2263      	movs	r2, #99	; 0x63
 80019d8:	605a      	str	r2, [r3, #4]
    	TMR_Handle->Init.CounterMode = TIM_COUNTERMODE_UP;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
    	TMR_Handle->Init.Period = ARR_Value-1;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e2:	1e5a      	subs	r2, r3, #1
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	60da      	str	r2, [r3, #12]
    	TMR_Handle->Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
    	TMR_Handle->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	619a      	str	r2, [r3, #24]
    	HAL_TIM_Base_Init(TMR_Handle);
 80019f4:	6838      	ldr	r0, [r7, #0]
 80019f6:	f005 fd6f 	bl	80074d8 <HAL_TIM_Base_Init>
    	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019fe:	617b      	str	r3, [r7, #20]
    	HAL_TIM_ConfigClockSource(TMR_Handle, &sClockSourceConfig);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	6838      	ldr	r0, [r7, #0]
 8001a08:	f005 ff7a 	bl	8007900 <HAL_TIM_ConfigClockSource>
    	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
    	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a10:	2300      	movs	r3, #0
 8001a12:	613b      	str	r3, [r7, #16]
    	HAL_TIMEx_MasterConfigSynchronization(TMR_Handle, &sMasterConfig);
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6838      	ldr	r0, [r7, #0]
 8001a1c:	f006 f97a 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
    	HAL_TIM_Base_Start_IT(TMR_Handle);
 8001a20:	6838      	ldr	r0, [r7, #0]
 8001a22:	f005 fe03 	bl	800762c <HAL_TIM_Base_Start_IT>
    }
}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40000800 	.word	0x40000800

08001a34 <MATRIX_SCROLL_SetSpeed>:

void MATRIX_SCROLL_SetSpeed(uint8_t au8_MATRIX_Instance, uint16_t au16_SPEED)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	460a      	mov	r2, r1
 8001a3e:	71fb      	strb	r3, [r7, #7]
 8001a40:	4613      	mov	r3, r2
 8001a42:	80bb      	strh	r3, [r7, #4]
	gs_MATRIX_info[au8_MATRIX_Instance].Max_Ticks = au16_SPEED;
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	88ba      	ldrh	r2, [r7, #4]
 8001a48:	4906      	ldr	r1, [pc, #24]	; (8001a64 <MATRIX_SCROLL_SetSpeed+0x30>)
 8001a4a:	2034      	movs	r0, #52	; 0x34
 8001a4c:	fb00 f303 	mul.w	r3, r0, r3
 8001a50:	440b      	add	r3, r1
 8001a52:	3304      	adds	r3, #4
 8001a54:	601a      	str	r2, [r3, #0]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	200002b4 	.word	0x200002b4

08001a68 <MATRIX_DisplayMessage>:
    }
    TxByte(au8_MATRIX_Instance, Column, 0x00);
}

void MATRIX_DisplayMessage(uint8_t au8_MATRIX_Instance, char* ArrayPointer, uint16_t ArraySize)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
 8001a74:	4613      	mov	r3, r2
 8001a76:	80bb      	strh	r3, [r7, #4]
	gs_MATRIX_info[au8_MATRIX_Instance].ArrPtr = ArrayPointer;
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <MATRIX_DisplayMessage+0x58>)
 8001a7c:	2134      	movs	r1, #52	; 0x34
 8001a7e:	fb01 f303 	mul.w	r3, r1, r3
 8001a82:	4413      	add	r3, r2
 8001a84:	3330      	adds	r3, #48	; 0x30
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	601a      	str	r2, [r3, #0]
	gs_MATRIX_info[au8_MATRIX_Instance].ArrSize = ArraySize-1;
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	88ba      	ldrh	r2, [r7, #4]
 8001a8e:	3a01      	subs	r2, #1
 8001a90:	b290      	uxth	r0, r2
 8001a92:	4a0b      	ldr	r2, [pc, #44]	; (8001ac0 <MATRIX_DisplayMessage+0x58>)
 8001a94:	2134      	movs	r1, #52	; 0x34
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	332c      	adds	r3, #44	; 0x2c
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	801a      	strh	r2, [r3, #0]
	gs_MATRIX_info[au8_MATRIX_Instance].BufferInit = 1;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	4a06      	ldr	r2, [pc, #24]	; (8001ac0 <MATRIX_DisplayMessage+0x58>)
 8001aa6:	2134      	movs	r1, #52	; 0x34
 8001aa8:	fb01 f303 	mul.w	r3, r1, r3
 8001aac:	4413      	add	r3, r2
 8001aae:	330b      	adds	r3, #11
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	701a      	strb	r2, [r3, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	200002b4 	.word	0x200002b4

08001ac4 <MATRIX_TMR_OVF_ISR>:
void MATRIX_TMR_OVF_ISR(TIM_HandleTypeDef* htim)
{
 8001ac4:	b5b0      	push	{r4, r5, r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	uint8_t i = 0, ch, space = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	73fb      	strb	r3, [r7, #15]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73bb      	strb	r3, [r7, #14]

	if(htim->Instance == MATRIX_TIMER)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	; (8001c84 <MATRIX_TMR_OVF_ISR+0x1c0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	f040 80cd 	bne.w	8001c7a <MATRIX_TMR_OVF_ISR+0x1b6>
	{
		for(i=0; i<DOT_MATRIX_UNITS; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e0c5      	b.n	8001c72 <MATRIX_TMR_OVF_ISR+0x1ae>
		{
			if(gs_MATRIX_info[i].Ticks >= gs_MATRIX_info[i].Max_Ticks)
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001aea:	2134      	movs	r1, #52	; 0x34
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	4413      	add	r3, r2
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	4964      	ldr	r1, [pc, #400]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001af8:	2034      	movs	r0, #52	; 0x34
 8001afa:	fb00 f303 	mul.w	r3, r0, r3
 8001afe:	440b      	add	r3, r1
 8001b00:	3304      	adds	r3, #4
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f0c0 80a3 	bcc.w	8001c50 <MATRIX_TMR_OVF_ISR+0x18c>
			{
				if(gs_MATRIX_info[i].BufferInit == 1 && DOT_MATRIX_CfgParam[i].SCROLL_Mode == SCROLL_MODE)
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	4a5e      	ldr	r2, [pc, #376]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b0e:	2134      	movs	r1, #52	; 0x34
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4413      	add	r3, r2
 8001b16:	330b      	adds	r3, #11
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	f040 808f 	bne.w	8001c3e <MATRIX_TMR_OVF_ISR+0x17a>
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	495a      	ldr	r1, [pc, #360]	; (8001c8c <MATRIX_TMR_OVF_ISR+0x1c8>)
 8001b24:	4613      	mov	r3, r2
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	330a      	adds	r3, #10
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	f040 8083 	bne.w	8001c3e <MATRIX_TMR_OVF_ISR+0x17a>
				{
					if(gs_MATRIX_info[i].Col_Index == 5)
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	4a53      	ldr	r2, [pc, #332]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b3c:	2134      	movs	r1, #52	; 0x34
 8001b3e:	fb01 f303 	mul.w	r3, r1, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	330a      	adds	r3, #10
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d11c      	bne.n	8001b86 <MATRIX_TMR_OVF_ISR+0xc2>
					{
						gs_MATRIX_info[i].Arr_Index++;
 8001b4c:	7bfb      	ldrb	r3, [r7, #15]
 8001b4e:	494e      	ldr	r1, [pc, #312]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b50:	2234      	movs	r2, #52	; 0x34
 8001b52:	fb03 f202 	mul.w	r2, r3, r2
 8001b56:	440a      	add	r2, r1
 8001b58:	3208      	adds	r2, #8
 8001b5a:	8812      	ldrh	r2, [r2, #0]
 8001b5c:	3201      	adds	r2, #1
 8001b5e:	b290      	uxth	r0, r2
 8001b60:	4a49      	ldr	r2, [pc, #292]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b62:	2134      	movs	r1, #52	; 0x34
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	4413      	add	r3, r2
 8001b6a:	3308      	adds	r3, #8
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	801a      	strh	r2, [r3, #0]
						gs_MATRIX_info[i].Col_Index = 0;
 8001b70:	7bfb      	ldrb	r3, [r7, #15]
 8001b72:	4a45      	ldr	r2, [pc, #276]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b74:	2134      	movs	r1, #52	; 0x34
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	330a      	adds	r3, #10
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
						space = 1;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73bb      	strb	r3, [r7, #14]
					}
					if(gs_MATRIX_info[i].Arr_Index == gs_MATRIX_info[i].ArrSize)
 8001b86:	7bfb      	ldrb	r3, [r7, #15]
 8001b88:	4a3f      	ldr	r2, [pc, #252]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b8a:	2134      	movs	r1, #52	; 0x34
 8001b8c:	fb01 f303 	mul.w	r3, r1, r3
 8001b90:	4413      	add	r3, r2
 8001b92:	3308      	adds	r3, #8
 8001b94:	881a      	ldrh	r2, [r3, #0]
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	493b      	ldr	r1, [pc, #236]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001b9a:	2034      	movs	r0, #52	; 0x34
 8001b9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	332c      	adds	r3, #44	; 0x2c
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d108      	bne.n	8001bbc <MATRIX_TMR_OVF_ISR+0xf8>
					{
						gs_MATRIX_info[i].Arr_Index = 0;
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	4a36      	ldr	r2, [pc, #216]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001bae:	2134      	movs	r1, #52	; 0x34
 8001bb0:	fb01 f303 	mul.w	r3, r1, r3
 8001bb4:	4413      	add	r3, r2
 8001bb6:	3308      	adds	r3, #8
 8001bb8:	2200      	movs	r2, #0
 8001bba:	801a      	strh	r2, [r3, #0]
					}
					if(space)
 8001bbc:	7bbb      	ldrb	r3, [r7, #14]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d005      	beq.n	8001bce <MATRIX_TMR_OVF_ISR+0x10a>
					{
						PushToBuffer(i, 0x00); // Add White Space To Separate Characters
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fb98 	bl	80012fc <PushToBuffer>
 8001bcc:	e033      	b.n	8001c36 <MATRIX_TMR_OVF_ISR+0x172>
					}
					else
					{
						ch = (*(gs_MATRIX_info[i].ArrPtr + gs_MATRIX_info[i].Arr_Index)-32);
 8001bce:	7bfb      	ldrb	r3, [r7, #15]
 8001bd0:	4a2d      	ldr	r2, [pc, #180]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001bd2:	2134      	movs	r1, #52	; 0x34
 8001bd4:	fb01 f303 	mul.w	r3, r1, r3
 8001bd8:	4413      	add	r3, r2
 8001bda:	3330      	adds	r3, #48	; 0x30
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001be2:	2034      	movs	r0, #52	; 0x34
 8001be4:	fb00 f202 	mul.w	r2, r0, r2
 8001be8:	440a      	add	r2, r1
 8001bea:	3208      	adds	r2, #8
 8001bec:	8812      	ldrh	r2, [r2, #0]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	3b20      	subs	r3, #32
 8001bf4:	737b      	strb	r3, [r7, #13]
						PushToBuffer(i, FONT_7x5[ch][gs_MATRIX_info[i].Col_Index++]);
 8001bf6:	7b7a      	ldrb	r2, [r7, #13]
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	4823      	ldr	r0, [pc, #140]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001bfc:	2134      	movs	r1, #52	; 0x34
 8001bfe:	fb03 f101 	mul.w	r1, r3, r1
 8001c02:	4401      	add	r1, r0
 8001c04:	310a      	adds	r1, #10
 8001c06:	7809      	ldrb	r1, [r1, #0]
 8001c08:	1c48      	adds	r0, r1, #1
 8001c0a:	b2c5      	uxtb	r5, r0
 8001c0c:	481e      	ldr	r0, [pc, #120]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001c0e:	2434      	movs	r4, #52	; 0x34
 8001c10:	fb04 f303 	mul.w	r3, r4, r3
 8001c14:	4403      	add	r3, r0
 8001c16:	330a      	adds	r3, #10
 8001c18:	4628      	mov	r0, r5
 8001c1a:	7018      	strb	r0, [r3, #0]
 8001c1c:	4608      	mov	r0, r1
 8001c1e:	491c      	ldr	r1, [pc, #112]	; (8001c90 <MATRIX_TMR_OVF_ISR+0x1cc>)
 8001c20:	4613      	mov	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4413      	add	r3, r2
 8001c26:	440b      	add	r3, r1
 8001c28:	4403      	add	r3, r0
 8001c2a:	781a      	ldrb	r2, [r3, #0]
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fb63 	bl	80012fc <PushToBuffer>
					}

					DisplayBuffer(i);
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff faed 	bl	8001218 <DisplayBuffer>
				}
				gs_MATRIX_info[i].Ticks = 0;
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	4a11      	ldr	r2, [pc, #68]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001c42:	2134      	movs	r1, #52	; 0x34
 8001c44:	fb01 f303 	mul.w	r3, r1, r3
 8001c48:	4413      	add	r3, r2
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e00d      	b.n	8001c6c <MATRIX_TMR_OVF_ISR+0x1a8>
			}
			else
			{
				gs_MATRIX_info[i].Ticks++;
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	490d      	ldr	r1, [pc, #52]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001c54:	2234      	movs	r2, #52	; 0x34
 8001c56:	fb03 f202 	mul.w	r2, r3, r2
 8001c5a:	440a      	add	r2, r1
 8001c5c:	6812      	ldr	r2, [r2, #0]
 8001c5e:	3201      	adds	r2, #1
 8001c60:	4909      	ldr	r1, [pc, #36]	; (8001c88 <MATRIX_TMR_OVF_ISR+0x1c4>)
 8001c62:	2034      	movs	r0, #52	; 0x34
 8001c64:	fb00 f303 	mul.w	r3, r0, r3
 8001c68:	440b      	add	r3, r1
 8001c6a:	601a      	str	r2, [r3, #0]
		for(i=0; i<DOT_MATRIX_UNITS; i++)
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f43f af36 	beq.w	8001ae6 <MATRIX_TMR_OVF_ISR+0x22>
			}
		}
	}
}
 8001c7a:	bf00      	nop
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bdb0      	pop	{r4, r5, r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40000800 	.word	0x40000800
 8001c88:	200002b4 	.word	0x200002b4
 8001c8c:	0800ec0c 	.word	0x0800ec0c
 8001c90:	20000000 	.word	0x20000000

08001c94 <Actualizar_FechaHora>:
	sTime.Seconds = 20;
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
}

void Actualizar_FechaHora(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af02      	add	r7, sp, #8
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <Actualizar_FechaHora+0x60>)
 8001c9e:	4816      	ldr	r0, [pc, #88]	; (8001cf8 <Actualizar_FechaHora+0x64>)
 8001ca0:	f004 fdba 	bl	8006818 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4915      	ldr	r1, [pc, #84]	; (8001cfc <Actualizar_FechaHora+0x68>)
 8001ca8:	4813      	ldr	r0, [pc, #76]	; (8001cf8 <Actualizar_FechaHora+0x64>)
 8001caa:	f004 fe97 	bl	80069dc <HAL_RTC_GetDate>

	sprintf((char *)Cartel_Led.hora,"%02d:%02d",sTime.Hours,sTime.Minutes);
 8001cae:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <Actualizar_FechaHora+0x60>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <Actualizar_FechaHora+0x60>)
 8001cb6:	785b      	ldrb	r3, [r3, #1]
 8001cb8:	4911      	ldr	r1, [pc, #68]	; (8001d00 <Actualizar_FechaHora+0x6c>)
 8001cba:	4812      	ldr	r0, [pc, #72]	; (8001d04 <Actualizar_FechaHora+0x70>)
 8001cbc:	f00c fa6c 	bl	800e198 <siprintf>
	sprintf((char*)Cartel_Led.segs,":%02d",sTime.Seconds);
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <Actualizar_FechaHora+0x60>)
 8001cc2:	789b      	ldrb	r3, [r3, #2]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4910      	ldr	r1, [pc, #64]	; (8001d08 <Actualizar_FechaHora+0x74>)
 8001cc8:	4810      	ldr	r0, [pc, #64]	; (8001d0c <Actualizar_FechaHora+0x78>)
 8001cca:	f00c fa65 	bl	800e198 <siprintf>

	sprintf((char *)Cartel_Led.fecha,"%02d-%02d-%04d",sDate.Date,sDate.Month,sDate.Year+2000);
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <Actualizar_FechaHora+0x68>)
 8001cd0:	789b      	ldrb	r3, [r3, #2]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <Actualizar_FechaHora+0x68>)
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <Actualizar_FechaHora+0x68>)
 8001cdc:	78db      	ldrb	r3, [r3, #3]
 8001cde:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	460b      	mov	r3, r1
 8001ce6:	490a      	ldr	r1, [pc, #40]	; (8001d10 <Actualizar_FechaHora+0x7c>)
 8001ce8:	480a      	ldr	r0, [pc, #40]	; (8001d14 <Actualizar_FechaHora+0x80>)
 8001cea:	f00c fa55 	bl	800e198 <siprintf>
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200002e8 	.word	0x200002e8
 8001cf8:	20000848 	.word	0x20000848
 8001cfc:	200002fc 	.word	0x200002fc
 8001d00:	0800ea1c 	.word	0x0800ea1c
 8001d04:	20000a45 	.word	0x20000a45
 8001d08:	0800ea28 	.word	0x0800ea28
 8001d0c:	20000a4d 	.word	0x20000a4d
 8001d10:	0800ea30 	.word	0x0800ea30
 8001d14:	20000a38 	.word	0x20000a38

08001d18 <RTC_SetFecha>:
void RTC_SetFecha(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <RTC_SetFecha+0x68>)
 8001d20:	889b      	ldrh	r3, [r3, #4]
 8001d22:	b29b      	uxth	r3, r3
	char y[3],m[3],d[3];

	memcpy(d,&dataRx[POS_DIA],2);
 8001d24:	80bb      	strh	r3, [r7, #4]
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <RTC_SetFecha+0x68>)
 8001d28:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001d2c:	b29b      	uxth	r3, r3
	memcpy(m,&dataRx[POS_MES],2);
 8001d2e:	813b      	strh	r3, [r7, #8]
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <RTC_SetFecha+0x68>)
 8001d32:	899b      	ldrh	r3, [r3, #12]
 8001d34:	b29b      	uxth	r3, r3
	memcpy(y,&dataRx[POS_ANIO],2);
 8001d36:	81bb      	strh	r3, [r7, #12]

	sDate.Date = atoi(d);
 8001d38:	1d3b      	adds	r3, r7, #4
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00c f866 	bl	800de0c <atoi>
 8001d40:	4603      	mov	r3, r0
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <RTC_SetFecha+0x6c>)
 8001d46:	709a      	strb	r2, [r3, #2]
	sDate.Month = atoi(m);
 8001d48:	f107 0308 	add.w	r3, r7, #8
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f00c f85d 	bl	800de0c <atoi>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <RTC_SetFecha+0x6c>)
 8001d58:	705a      	strb	r2, [r3, #1]
	sDate.Year = atoi(y);
 8001d5a:	f107 030c 	add.w	r3, r7, #12
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f00c f854 	bl	800de0c <atoi>
 8001d64:	4603      	mov	r3, r0
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <RTC_SetFecha+0x6c>)
 8001d6a:	70da      	strb	r2, [r3, #3]
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	4905      	ldr	r1, [pc, #20]	; (8001d84 <RTC_SetFecha+0x6c>)
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <RTC_SetFecha+0x70>)
 8001d72:	f004 fdaf 	bl	80068d4 <HAL_RTC_SetDate>
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000b18 	.word	0x20000b18
 8001d84:	200002fc 	.word	0x200002fc
 8001d88:	20000848 	.word	0x20000848

08001d8c <RTC_SetHora>:

void RTC_SetHora (void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4b18      	ldr	r3, [pc, #96]	; (8001df4 <RTC_SetHora+0x68>)
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	b29b      	uxth	r3, r3
	char hrs[3],mins[3],segs[3];

	memcpy(hrs,&dataRx[POS_HS],2);
 8001d98:	81bb      	strh	r3, [r7, #12]
 8001d9a:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <RTC_SetHora+0x68>)
 8001d9c:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8001da0:	b29b      	uxth	r3, r3
	memcpy(mins,&dataRx[POS_MIN],2);
 8001da2:	813b      	strh	r3, [r7, #8]
 8001da4:	4b13      	ldr	r3, [pc, #76]	; (8001df4 <RTC_SetHora+0x68>)
 8001da6:	895b      	ldrh	r3, [r3, #10]
 8001da8:	b29b      	uxth	r3, r3
	memcpy(segs,&dataRx[POS_SEG],2);
 8001daa:	80bb      	strh	r3, [r7, #4]

	sTime.Hours = atoi(hrs);
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	4618      	mov	r0, r3
 8001db2:	f00c f82b 	bl	800de0c <atoi>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <RTC_SetHora+0x6c>)
 8001dbc:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = atoi(mins);
 8001dbe:	f107 0308 	add.w	r3, r7, #8
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f00c f822 	bl	800de0c <atoi>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <RTC_SetHora+0x6c>)
 8001dce:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = atoi(segs);
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00c f81a 	bl	800de0c <atoi>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <RTC_SetHora+0x6c>)
 8001dde:	709a      	strb	r2, [r3, #2]

	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001de0:	2200      	movs	r2, #0
 8001de2:	4905      	ldr	r1, [pc, #20]	; (8001df8 <RTC_SetHora+0x6c>)
 8001de4:	4805      	ldr	r0, [pc, #20]	; (8001dfc <RTC_SetHora+0x70>)
 8001de6:	f004 fc7d 	bl	80066e4 <HAL_RTC_SetTime>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000b18 	.word	0x20000b18
 8001df8:	200002e8 	.word	0x200002e8
 8001dfc:	20000848 	.word	0x20000848

08001e00 <microDelay>:
uint32_t pMillis, cMillis;

extern TIM_HandleTypeDef htim3;

void microDelay (uint16_t delay)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	4603      	mov	r3, r0
 8001e08:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim3, 0);
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <microDelay+0x30>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	625a      	str	r2, [r3, #36]	; 0x24

  while (__HAL_TIM_GET_COUNTER(&htim3)< delay);
 8001e12:	bf00      	nop
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <microDelay+0x30>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d3f9      	bcc.n	8001e14 <microDelay+0x14>

}
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000960 	.word	0x20000960

08001e34 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8001e3e:	463b      	mov	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001e50:	2301      	movs	r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4619      	mov	r1, r3
 8001e60:	482a      	ldr	r0, [pc, #168]	; (8001f0c <DHT11_Start+0xd8>)
 8001e62:	f002 fcad 	bl	80047c0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001e66:	2200      	movs	r2, #0
 8001e68:	2102      	movs	r1, #2
 8001e6a:	4828      	ldr	r0, [pc, #160]	; (8001f0c <DHT11_Start+0xd8>)
 8001e6c:	f002 fe44 	bl	8004af8 <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001e70:	2014      	movs	r0, #20
 8001e72:	f002 fb0d 	bl	8004490 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001e76:	2201      	movs	r2, #1
 8001e78:	2102      	movs	r1, #2
 8001e7a:	4824      	ldr	r0, [pc, #144]	; (8001f0c <DHT11_Start+0xd8>)
 8001e7c:	f002 fe3c 	bl	8004af8 <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001e80:	201e      	movs	r0, #30
 8001e82:	f7ff ffbd 	bl	8001e00 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8001e8e:	463b      	mov	r3, r7
 8001e90:	4619      	mov	r1, r3
 8001e92:	481e      	ldr	r0, [pc, #120]	; (8001f0c <DHT11_Start+0xd8>)
 8001e94:	f002 fc94 	bl	80047c0 <HAL_GPIO_Init>
  microDelay (40);
 8001e98:	2028      	movs	r0, #40	; 0x28
 8001e9a:	f7ff ffb1 	bl	8001e00 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8001e9e:	2102      	movs	r1, #2
 8001ea0:	481a      	ldr	r0, [pc, #104]	; (8001f0c <DHT11_Start+0xd8>)
 8001ea2:	f002 fe11 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <DHT11_Start+0x90>
  {
    microDelay (80);
 8001eac:	2050      	movs	r0, #80	; 0x50
 8001eae:	f7ff ffa7 	bl	8001e00 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4815      	ldr	r0, [pc, #84]	; (8001f0c <DHT11_Start+0xd8>)
 8001eb6:	f002 fe07 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <DHT11_Start+0x90>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001ec4:	f002 fad8 	bl	8004478 <HAL_GetTick>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4a11      	ldr	r2, [pc, #68]	; (8001f10 <DHT11_Start+0xdc>)
 8001ecc:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8001ece:	f002 fad3 	bl	8004478 <HAL_GetTick>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4a0f      	ldr	r2, [pc, #60]	; (8001f14 <DHT11_Start+0xe0>)
 8001ed6:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001ed8:	e004      	b.n	8001ee4 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 8001eda:	f002 facd 	bl	8004478 <HAL_GetTick>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <DHT11_Start+0xe0>)
 8001ee2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	4809      	ldr	r0, [pc, #36]	; (8001f0c <DHT11_Start+0xd8>)
 8001ee8:	f002 fdee 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <DHT11_Start+0xcc>
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <DHT11_Start+0xdc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	1c9a      	adds	r2, r3, #2
 8001ef8:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <DHT11_Start+0xe0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8ec      	bhi.n	8001eda <DHT11_Start+0xa6>
  }
  return Response;
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	20000300 	.word	0x20000300
 8001f14:	20000304 	.word	0x20000304

08001f18 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
  uint8_t a=0,b=0;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	2300      	movs	r3, #0
 8001f24:	71bb      	strb	r3, [r7, #6]
  for (a=0;a<8;a++)
 8001f26:	2300      	movs	r3, #0
 8001f28:	71fb      	strb	r3, [r7, #7]
 8001f2a:	e063      	b.n	8001ff4 <DHT11_Read+0xdc>
  {
    pMillis = HAL_GetTick();
 8001f2c:	f002 faa4 	bl	8004478 <HAL_GetTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	4a34      	ldr	r2, [pc, #208]	; (8002004 <DHT11_Read+0xec>)
 8001f34:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001f36:	f002 fa9f 	bl	8004478 <HAL_GetTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4a32      	ldr	r2, [pc, #200]	; (8002008 <DHT11_Read+0xf0>)
 8001f3e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001f40:	e004      	b.n	8001f4c <DHT11_Read+0x34>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8001f42:	f002 fa99 	bl	8004478 <HAL_GetTick>
 8001f46:	4603      	mov	r3, r0
 8001f48:	4a2f      	ldr	r2, [pc, #188]	; (8002008 <DHT11_Read+0xf0>)
 8001f4a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	482f      	ldr	r0, [pc, #188]	; (800200c <DHT11_Read+0xf4>)
 8001f50:	f002 fdba 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d106      	bne.n	8001f68 <DHT11_Read+0x50>
 8001f5a:	4b2a      	ldr	r3, [pc, #168]	; (8002004 <DHT11_Read+0xec>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	1c9a      	adds	r2, r3, #2
 8001f60:	4b29      	ldr	r3, [pc, #164]	; (8002008 <DHT11_Read+0xf0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8ec      	bhi.n	8001f42 <DHT11_Read+0x2a>
    }
    microDelay (40);   // wait for 40 us
 8001f68:	2028      	movs	r0, #40	; 0x28
 8001f6a:	f7ff ff49 	bl	8001e00 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001f6e:	2102      	movs	r1, #2
 8001f70:	4826      	ldr	r0, [pc, #152]	; (800200c <DHT11_Read+0xf4>)
 8001f72:	f002 fda9 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10e      	bne.n	8001f9a <DHT11_Read+0x82>
      b&= ~(1<<(7-a));
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	f1c3 0307 	rsb	r3, r3, #7
 8001f82:	2201      	movs	r2, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	b25b      	sxtb	r3, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	b25a      	sxtb	r2, r3
 8001f8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f92:	4013      	ands	r3, r2
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	71bb      	strb	r3, [r7, #6]
 8001f98:	e00b      	b.n	8001fb2 <DHT11_Read+0x9a>
    else
      b|= (1<<(7-a));
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	f1c3 0307 	rsb	r3, r3, #7
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	b25a      	sxtb	r2, r3
 8001fa8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b25b      	sxtb	r3, r3
 8001fb0:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8001fb2:	f002 fa61 	bl	8004478 <HAL_GetTick>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4a12      	ldr	r2, [pc, #72]	; (8002004 <DHT11_Read+0xec>)
 8001fba:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001fbc:	f002 fa5c 	bl	8004478 <HAL_GetTick>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4a11      	ldr	r2, [pc, #68]	; (8002008 <DHT11_Read+0xf0>)
 8001fc4:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001fc6:	e004      	b.n	8001fd2 <DHT11_Read+0xba>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001fc8:	f002 fa56 	bl	8004478 <HAL_GetTick>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4a0e      	ldr	r2, [pc, #56]	; (8002008 <DHT11_Read+0xf0>)
 8001fd0:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001fd2:	2102      	movs	r1, #2
 8001fd4:	480d      	ldr	r0, [pc, #52]	; (800200c <DHT11_Read+0xf4>)
 8001fd6:	f002 fd77 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <DHT11_Read+0xd6>
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <DHT11_Read+0xec>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1c9a      	adds	r2, r3, #2
 8001fe6:	4b08      	ldr	r3, [pc, #32]	; (8002008 <DHT11_Read+0xf0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d8ec      	bhi.n	8001fc8 <DHT11_Read+0xb0>
  for (a=0;a<8;a++)
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	71fb      	strb	r3, [r7, #7]
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	2b07      	cmp	r3, #7
 8001ff8:	d998      	bls.n	8001f2c <DHT11_Read+0x14>
    }
  }
  return b;
 8001ffa:	79bb      	ldrb	r3, [r7, #6]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000300 	.word	0x20000300
 8002008:	20000304 	.word	0x20000304
 800200c:	40020400 	.word	0x40020400

08002010 <LeerDatos>:
extern FATFS USERFatFS;
FIL userFILE;
#define MSG_FILE "TDII.txt"

uint8_t LeerDatos(char* dataSD)
{
 8002010:	b5b0      	push	{r4, r5, r7, lr}
 8002012:	b08e      	sub	sp, #56	; 0x38
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
	uint8_t i;
	uint8_t retUSER = FR_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	static uint8_t msg_pos = 0; /* para recordar la posición del msg en el file */
	char msg_read[40];
	static TCHAR* by_read = NULL;		/* bytes leidos */

	memset(msg_read,'\0',40);
 800201e:	f107 030c 	add.w	r3, r7, #12
 8002022:	2228      	movs	r2, #40	; 0x28
 8002024:	2100      	movs	r1, #0
 8002026:	4618      	mov	r0, r3
 8002028:	f00b ff3e 	bl	800dea8 <memset>
	//f_mount(&USERFatFS, "", 0);
	/* Abro un archivo y verifico */
	retUSER =f_open(&userFILE, MSG_FILE, FA_READ);
 800202c:	2201      	movs	r2, #1
 800202e:	4932      	ldr	r1, [pc, #200]	; (80020f8 <LeerDatos+0xe8>)
 8002030:	4832      	ldr	r0, [pc, #200]	; (80020fc <LeerDatos+0xec>)
 8002032:	f008 fdf9 	bl	800ac28 <f_open>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if(retUSER != FR_OK){
 800203c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00f      	beq.n	8002064 <LeerDatos+0x54>
		strcpy(dataSD,"Archivo no existente!");
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a2e      	ldr	r2, [pc, #184]	; (8002100 <LeerDatos+0xf0>)
 8002048:	461d      	mov	r5, r3
 800204a:	4614      	mov	r4, r2
 800204c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800204e:	6028      	str	r0, [r5, #0]
 8002050:	6069      	str	r1, [r5, #4]
 8002052:	60aa      	str	r2, [r5, #8]
 8002054:	60eb      	str	r3, [r5, #12]
 8002056:	6820      	ldr	r0, [r4, #0]
 8002058:	6128      	str	r0, [r5, #16]
 800205a:	88a3      	ldrh	r3, [r4, #4]
 800205c:	82ab      	strh	r3, [r5, #20]
		return retUSER;
 800205e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002062:	e044      	b.n	80020ee <LeerDatos+0xde>
	}

	//f_lseek(&userFILE, by_read); Se puede implementar moviendome dentro del file

	/* los mensajes se leerán de forma ciclica, recordando donde estaba */
	for( i = 0; i <= msg_pos; i++)
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800206a:	e00e      	b.n	800208a <LeerDatos+0x7a>
	{
		by_read = f_gets(msg_read,sizeof(msg_read),&userFILE);
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4a22      	ldr	r2, [pc, #136]	; (80020fc <LeerDatos+0xec>)
 8002072:	2128      	movs	r1, #40	; 0x28
 8002074:	4618      	mov	r0, r3
 8002076:	f009 f9c2 	bl	800b3fe <f_gets>
 800207a:	4603      	mov	r3, r0
 800207c:	4a21      	ldr	r2, [pc, #132]	; (8002104 <LeerDatos+0xf4>)
 800207e:	6013      	str	r3, [r2, #0]
	for( i = 0; i <= msg_pos; i++)
 8002080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002084:	3301      	adds	r3, #1
 8002086:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800208a:	4b1f      	ldr	r3, [pc, #124]	; (8002108 <LeerDatos+0xf8>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002092:	429a      	cmp	r2, r3
 8002094:	d9ea      	bls.n	800206c <LeerDatos+0x5c>
	}
	if( by_read == 0)/* tengo EOF o archivo vacio */
 8002096:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <LeerDatos+0xf4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d118      	bne.n	80020d0 <LeerDatos+0xc0>
	{
		strcpy(dataSD,"Archivo vacio!");/* me anticipo ante un posible archivo vacio*/
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a1a      	ldr	r2, [pc, #104]	; (800210c <LeerDatos+0xfc>)
 80020a2:	461c      	mov	r4, r3
 80020a4:	4613      	mov	r3, r2
 80020a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80020a8:	6020      	str	r0, [r4, #0]
 80020aa:	6061      	str	r1, [r4, #4]
 80020ac:	60a2      	str	r2, [r4, #8]
 80020ae:	881a      	ldrh	r2, [r3, #0]
 80020b0:	789b      	ldrb	r3, [r3, #2]
 80020b2:	81a2      	strh	r2, [r4, #12]
 80020b4:	73a3      	strb	r3, [r4, #14]
		by_read = f_gets(msg_read,sizeof(msg_read),&userFILE);
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <LeerDatos+0xec>)
 80020bc:	2128      	movs	r1, #40	; 0x28
 80020be:	4618      	mov	r0, r3
 80020c0:	f009 f99d 	bl	800b3fe <f_gets>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <LeerDatos+0xf4>)
 80020c8:	6013      	str	r3, [r2, #0]
		msg_pos = 0;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <LeerDatos+0xf8>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
		/* si fue EOF, leerá el primer msg y resetea el contador */
	}
	if(by_read != 0){
 80020d0:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <LeerDatos+0xf4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <LeerDatos+0xd4>
		strcpy(dataSD,msg_read);
 80020d8:	f107 030c 	add.w	r3, r7, #12
 80020dc:	4619      	mov	r1, r3
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f00c f87a 	bl	800e1d8 <strcpy>
	}

	f_close(&userFILE);
 80020e4:	4805      	ldr	r0, [pc, #20]	; (80020fc <LeerDatos+0xec>)
 80020e6:	f009 f95b 	bl	800b3a0 <f_close>
	return retUSER;
 80020ea:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3738      	adds	r7, #56	; 0x38
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bdb0      	pop	{r4, r5, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	0800ea40 	.word	0x0800ea40
 80020fc:	20000308 	.word	0x20000308
 8002100:	0800ea4c 	.word	0x0800ea4c
 8002104:	20000538 	.word	0x20000538
 8002108:	2000053c 	.word	0x2000053c
 800210c:	0800ea64 	.word	0x0800ea64

08002110 <InicializarSd>:

uint8_t InicializarSd(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
	return f_mount(&USERFatFS, "", 0);
 8002114:	2200      	movs	r2, #0
 8002116:	4903      	ldr	r1, [pc, #12]	; (8002124 <InicializarSd+0x14>)
 8002118:	4803      	ldr	r0, [pc, #12]	; (8002128 <InicializarSd+0x18>)
 800211a:	f008 fd21 	bl	800ab60 <f_mount>
 800211e:	4603      	mov	r3, r0
}
 8002120:	4618      	mov	r0, r3
 8002122:	bd80      	pop	{r7, pc}
 8002124:	0800ea74 	.word	0x0800ea74
 8002128:	20000b44 	.word	0x20000b44

0800212c <DetectarSd>:
uint8_t DetectarSd(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
	return 0;// HAL_GPIO_ReadPin(SD_CD_GPIO_Port,SD_CD_Pin);
 8002130:	2300      	movs	r3, #0
	/*pregunto por el pin card detect */
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002140:	2200      	movs	r2, #0
 8002142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002146:	4802      	ldr	r0, [pc, #8]	; (8002150 <SELECT+0x14>)
 8002148:	f002 fcd6 	bl	8004af8 <HAL_GPIO_WritePin>
}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40020400 	.word	0x40020400

08002154 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002158:	2201      	movs	r2, #1
 800215a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800215e:	4802      	ldr	r0, [pc, #8]	; (8002168 <DESELECT+0x14>)
 8002160:	f002 fcca 	bl	8004af8 <HAL_GPIO_WritePin>
}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40020400 	.word	0x40020400

0800216c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8002176:	bf00      	nop
 8002178:	4808      	ldr	r0, [pc, #32]	; (800219c <SPI_TxByte+0x30>)
 800217a:	f005 f8d4 	bl	8007326 <HAL_SPI_GetState>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d1f9      	bne.n	8002178 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8002184:	1df9      	adds	r1, r7, #7
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	2201      	movs	r2, #1
 800218c:	4803      	ldr	r0, [pc, #12]	; (800219c <SPI_TxByte+0x30>)
 800218e:	f004 fdec 	bl	8006d6a <HAL_SPI_Transmit>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200008c0 	.word	0x200008c0

080021a0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80021a6:	23ff      	movs	r3, #255	; 0xff
 80021a8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 80021ae:	bf00      	nop
 80021b0:	4809      	ldr	r0, [pc, #36]	; (80021d8 <SPI_RxByte+0x38>)
 80021b2:	f005 f8b8 	bl	8007326 <HAL_SPI_GetState>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d1f9      	bne.n	80021b0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 80021bc:	1dba      	adds	r2, r7, #6
 80021be:	1df9      	adds	r1, r7, #7
 80021c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	2301      	movs	r3, #1
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <SPI_RxByte+0x38>)
 80021ca:	f004 ff0a 	bl	8006fe2 <HAL_SPI_TransmitReceive>
  
  return data;
 80021ce:	79bb      	ldrb	r3, [r7, #6]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200008c0 	.word	0x200008c0

080021dc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80021e4:	f7ff ffdc 	bl	80021a0 <SPI_RxByte>
 80021e8:	4603      	mov	r3, r0
 80021ea:	461a      	mov	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	701a      	strb	r2, [r3, #0]
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80021fe:	4b0b      	ldr	r3, [pc, #44]	; (800222c <SD_ReadyWait+0x34>)
 8002200:	2232      	movs	r2, #50	; 0x32
 8002202:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002204:	f7ff ffcc 	bl	80021a0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002208:	f7ff ffca 	bl	80021a0 <SPI_RxByte>
 800220c:	4603      	mov	r3, r0
 800220e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002210:	79fb      	ldrb	r3, [r7, #7]
 8002212:	2bff      	cmp	r3, #255	; 0xff
 8002214:	d004      	beq.n	8002220 <SD_ReadyWait+0x28>
 8002216:	4b05      	ldr	r3, [pc, #20]	; (800222c <SD_ReadyWait+0x34>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f3      	bne.n	8002208 <SD_ReadyWait+0x10>
  
  return res;
 8002220:	79fb      	ldrb	r3, [r7, #7]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20000b12 	.word	0x20000b12

08002230 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002236:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800223a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800223c:	f7ff ff8a 	bl	8002154 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	e005      	b.n	8002252 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002246:	20ff      	movs	r0, #255	; 0xff
 8002248:	f7ff ff90 	bl	800216c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	3301      	adds	r3, #1
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	2b09      	cmp	r3, #9
 8002256:	ddf6      	ble.n	8002246 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002258:	f7ff ff70 	bl	800213c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800225c:	2340      	movs	r3, #64	; 0x40
 800225e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002264:	2300      	movs	r3, #0
 8002266:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800226c:	2300      	movs	r3, #0
 800226e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002270:	2395      	movs	r3, #149	; 0x95
 8002272:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	e009      	b.n	800228e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800227a:	1d3a      	adds	r2, r7, #4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4413      	add	r3, r2
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff72 	bl	800216c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	3301      	adds	r3, #1
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b05      	cmp	r3, #5
 8002292:	ddf2      	ble.n	800227a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8002294:	e002      	b.n	800229c <SD_PowerOn+0x6c>
  {
    Count--;
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	3b01      	subs	r3, #1
 800229a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800229c:	f7ff ff80 	bl	80021a0 <SPI_RxByte>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d002      	beq.n	80022ac <SD_PowerOn+0x7c>
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f4      	bne.n	8002296 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80022ac:	f7ff ff52 	bl	8002154 <DESELECT>
  SPI_TxByte(0XFF);
 80022b0:	20ff      	movs	r0, #255	; 0xff
 80022b2:	f7ff ff5b 	bl	800216c <SPI_TxByte>
  
  PowerFlag = 1;
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <SD_PowerOn+0x94>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	701a      	strb	r2, [r3, #0]
}
 80022bc:	bf00      	nop
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000053e 	.word	0x2000053e

080022c8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80022cc:	4b03      	ldr	r3, [pc, #12]	; (80022dc <SD_PowerOff+0x14>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	701a      	strb	r2, [r3, #0]
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	2000053e 	.word	0x2000053e

080022e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <SD_CheckPower+0x14>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	2000053e 	.word	0x2000053e

080022f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002302:	4b17      	ldr	r3, [pc, #92]	; (8002360 <SD_RxDataBlock+0x68>)
 8002304:	220a      	movs	r2, #10
 8002306:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002308:	f7ff ff4a 	bl	80021a0 <SPI_RxByte>
 800230c:	4603      	mov	r3, r0
 800230e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2bff      	cmp	r3, #255	; 0xff
 8002314:	d104      	bne.n	8002320 <SD_RxDataBlock+0x28>
 8002316:	4b12      	ldr	r3, [pc, #72]	; (8002360 <SD_RxDataBlock+0x68>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d1f3      	bne.n	8002308 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2bfe      	cmp	r3, #254	; 0xfe
 8002324:	d001      	beq.n	800232a <SD_RxDataBlock+0x32>
    return FALSE;
 8002326:	2300      	movs	r3, #0
 8002328:	e016      	b.n	8002358 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff ff53 	bl	80021dc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff4d 	bl	80021dc <SPI_RxBytePtr>
  } while(btr -= 2);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	3b02      	subs	r3, #2
 8002346:	603b      	str	r3, [r7, #0]
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ed      	bne.n	800232a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800234e:	f7ff ff27 	bl	80021a0 <SPI_RxByte>
  SPI_RxByte();
 8002352:	f7ff ff25 	bl	80021a0 <SPI_RxByte>
  
  return TRUE;
 8002356:	2301      	movs	r3, #1
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000b11 	.word	0x20000b11

08002364 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002370:	2300      	movs	r3, #0
 8002372:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002374:	f7ff ff40 	bl	80021f8 <SD_ReadyWait>
 8002378:	4603      	mov	r3, r0
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d001      	beq.n	8002382 <SD_TxDataBlock+0x1e>
    return FALSE;
 800237e:	2300      	movs	r3, #0
 8002380:	e040      	b.n	8002404 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002382:	78fb      	ldrb	r3, [r7, #3]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fef1 	bl	800216c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	2bfd      	cmp	r3, #253	; 0xfd
 800238e:	d031      	beq.n	80023f4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fee5 	bl	800216c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	1c5a      	adds	r2, r3, #1
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fede 	bl	800216c <SPI_TxByte>
    } while (--wc);
 80023b0:	7bbb      	ldrb	r3, [r7, #14]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	73bb      	strb	r3, [r7, #14]
 80023b6:	7bbb      	ldrb	r3, [r7, #14]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1eb      	bne.n	8002394 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80023bc:	f7ff fef0 	bl	80021a0 <SPI_RxByte>
    SPI_RxByte();
 80023c0:	f7ff feee 	bl	80021a0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80023c4:	e00b      	b.n	80023de <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80023c6:	f7ff feeb 	bl	80021a0 <SPI_RxByte>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	f003 031f 	and.w	r3, r3, #31
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d006      	beq.n	80023e6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80023d8:	7b7b      	ldrb	r3, [r7, #13]
 80023da:	3301      	adds	r3, #1
 80023dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80023de:	7b7b      	ldrb	r3, [r7, #13]
 80023e0:	2b40      	cmp	r3, #64	; 0x40
 80023e2:	d9f0      	bls.n	80023c6 <SD_TxDataBlock+0x62>
 80023e4:	e000      	b.n	80023e8 <SD_TxDataBlock+0x84>
        break;
 80023e6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80023e8:	bf00      	nop
 80023ea:	f7ff fed9 	bl	80021a0 <SPI_RxByte>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0fa      	beq.n	80023ea <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	f003 031f 	and.w	r3, r3, #31
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d101      	bne.n	8002402 <SD_TxDataBlock+0x9e>
    return TRUE;
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002418:	f7ff feee 	bl	80021f8 <SD_ReadyWait>
 800241c:	4603      	mov	r3, r0
 800241e:	2bff      	cmp	r3, #255	; 0xff
 8002420:	d001      	beq.n	8002426 <SD_SendCmd+0x1a>
    return 0xFF;
 8002422:	23ff      	movs	r3, #255	; 0xff
 8002424:	e040      	b.n	80024a8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff fe9f 	bl	800216c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	0e1b      	lsrs	r3, r3, #24
 8002432:	b2db      	uxtb	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	f7ff fe99 	bl	800216c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	0c1b      	lsrs	r3, r3, #16
 800243e:	b2db      	uxtb	r3, r3
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff fe93 	bl	800216c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b2db      	uxtb	r3, r3
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff fe8d 	bl	800216c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f7ff fe88 	bl	800216c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 800245c:	2300      	movs	r3, #0
 800245e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	2b40      	cmp	r3, #64	; 0x40
 8002464:	d101      	bne.n	800246a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002466:	2395      	movs	r3, #149	; 0x95
 8002468:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	2b48      	cmp	r3, #72	; 0x48
 800246e:	d101      	bne.n	8002474 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002470:	2387      	movs	r3, #135	; 0x87
 8002472:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002474:	7bfb      	ldrb	r3, [r7, #15]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fe78 	bl	800216c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	2b4c      	cmp	r3, #76	; 0x4c
 8002480:	d101      	bne.n	8002486 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002482:	f7ff fe8d 	bl	80021a0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002486:	230a      	movs	r3, #10
 8002488:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 800248a:	f7ff fe89 	bl	80021a0 <SPI_RxByte>
 800248e:	4603      	mov	r3, r0
 8002490:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002492:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da05      	bge.n	80024a6 <SD_SendCmd+0x9a>
 800249a:	7bbb      	ldrb	r3, [r7, #14]
 800249c:	3b01      	subs	r3, #1
 800249e:	73bb      	strb	r3, [r7, #14]
 80024a0:	7bbb      	ldrb	r3, [r7, #14]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f1      	bne.n	800248a <SD_SendCmd+0x7e>
  
  return res;
 80024a6:	7b7b      	ldrb	r3, [r7, #13]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 80024c0:	2301      	movs	r3, #1
 80024c2:	e0d5      	b.n	8002670 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 80024c4:	4b6c      	ldr	r3, [pc, #432]	; (8002678 <SD_disk_initialize+0x1c8>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <SD_disk_initialize+0x2a>
    return Stat;        
 80024d2:	4b69      	ldr	r3, [pc, #420]	; (8002678 <SD_disk_initialize+0x1c8>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e0ca      	b.n	8002670 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 80024da:	f7ff fea9 	bl	8002230 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 80024de:	f7ff fe2d 	bl	800213c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 80024e6:	2100      	movs	r1, #0
 80024e8:	2040      	movs	r0, #64	; 0x40
 80024ea:	f7ff ff8f 	bl	800240c <SD_SendCmd>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f040 80a5 	bne.w	8002640 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 80024f6:	4b61      	ldr	r3, [pc, #388]	; (800267c <SD_disk_initialize+0x1cc>)
 80024f8:	2264      	movs	r2, #100	; 0x64
 80024fa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 80024fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002500:	2048      	movs	r0, #72	; 0x48
 8002502:	f7ff ff83 	bl	800240c <SD_SendCmd>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	d158      	bne.n	80025be <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e00c      	b.n	800252c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002512:	7bfc      	ldrb	r4, [r7, #15]
 8002514:	f7ff fe44 	bl	80021a0 <SPI_RxByte>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	f104 0310 	add.w	r3, r4, #16
 8002520:	443b      	add	r3, r7
 8002522:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002526:	7bfb      	ldrb	r3, [r7, #15]
 8002528:	3301      	adds	r3, #1
 800252a:	73fb      	strb	r3, [r7, #15]
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d9ef      	bls.n	8002512 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002532:	7abb      	ldrb	r3, [r7, #10]
 8002534:	2b01      	cmp	r3, #1
 8002536:	f040 8083 	bne.w	8002640 <SD_disk_initialize+0x190>
 800253a:	7afb      	ldrb	r3, [r7, #11]
 800253c:	2baa      	cmp	r3, #170	; 0xaa
 800253e:	d17f      	bne.n	8002640 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002540:	2100      	movs	r1, #0
 8002542:	2077      	movs	r0, #119	; 0x77
 8002544:	f7ff ff62 	bl	800240c <SD_SendCmd>
 8002548:	4603      	mov	r3, r0
 800254a:	2b01      	cmp	r3, #1
 800254c:	d807      	bhi.n	800255e <SD_disk_initialize+0xae>
 800254e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002552:	2069      	movs	r0, #105	; 0x69
 8002554:	f7ff ff5a 	bl	800240c <SD_SendCmd>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 800255e:	4b47      	ldr	r3, [pc, #284]	; (800267c <SD_disk_initialize+0x1cc>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1eb      	bne.n	8002540 <SD_disk_initialize+0x90>
 8002568:	e000      	b.n	800256c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800256a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 800256c:	4b43      	ldr	r3, [pc, #268]	; (800267c <SD_disk_initialize+0x1cc>)
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d064      	beq.n	8002640 <SD_disk_initialize+0x190>
 8002576:	2100      	movs	r1, #0
 8002578:	207a      	movs	r0, #122	; 0x7a
 800257a:	f7ff ff47 	bl	800240c <SD_SendCmd>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d15d      	bne.n	8002640 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
 8002588:	e00c      	b.n	80025a4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800258a:	7bfc      	ldrb	r4, [r7, #15]
 800258c:	f7ff fe08 	bl	80021a0 <SPI_RxByte>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	f104 0310 	add.w	r3, r4, #16
 8002598:	443b      	add	r3, r7
 800259a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800259e:	7bfb      	ldrb	r3, [r7, #15]
 80025a0:	3301      	adds	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d9ef      	bls.n	800258a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 80025aa:	7a3b      	ldrb	r3, [r7, #8]
 80025ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <SD_disk_initialize+0x108>
 80025b4:	2306      	movs	r3, #6
 80025b6:	e000      	b.n	80025ba <SD_disk_initialize+0x10a>
 80025b8:	2302      	movs	r3, #2
 80025ba:	73bb      	strb	r3, [r7, #14]
 80025bc:	e040      	b.n	8002640 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 80025be:	2100      	movs	r1, #0
 80025c0:	2077      	movs	r0, #119	; 0x77
 80025c2:	f7ff ff23 	bl	800240c <SD_SendCmd>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d808      	bhi.n	80025de <SD_disk_initialize+0x12e>
 80025cc:	2100      	movs	r1, #0
 80025ce:	2069      	movs	r0, #105	; 0x69
 80025d0:	f7ff ff1c 	bl	800240c <SD_SendCmd>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d801      	bhi.n	80025de <SD_disk_initialize+0x12e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e000      	b.n	80025e0 <SD_disk_initialize+0x130>
 80025de:	2301      	movs	r3, #1
 80025e0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80025e2:	7bbb      	ldrb	r3, [r7, #14]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d10e      	bne.n	8002606 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80025e8:	2100      	movs	r1, #0
 80025ea:	2077      	movs	r0, #119	; 0x77
 80025ec:	f7ff ff0e 	bl	800240c <SD_SendCmd>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d80e      	bhi.n	8002614 <SD_disk_initialize+0x164>
 80025f6:	2100      	movs	r1, #0
 80025f8:	2069      	movs	r0, #105	; 0x69
 80025fa:	f7ff ff07 	bl	800240c <SD_SendCmd>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d107      	bne.n	8002614 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002604:	e00d      	b.n	8002622 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002606:	2100      	movs	r1, #0
 8002608:	2041      	movs	r0, #65	; 0x41
 800260a:	f7ff feff 	bl	800240c <SD_SendCmd>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d005      	beq.n	8002620 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002614:	4b19      	ldr	r3, [pc, #100]	; (800267c <SD_disk_initialize+0x1cc>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e1      	bne.n	80025e2 <SD_disk_initialize+0x132>
 800261e:	e000      	b.n	8002622 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002620:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002622:	4b16      	ldr	r3, [pc, #88]	; (800267c <SD_disk_initialize+0x1cc>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <SD_disk_initialize+0x18c>
 800262c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002630:	2050      	movs	r0, #80	; 0x50
 8002632:	f7ff feeb 	bl	800240c <SD_SendCmd>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <SD_disk_initialize+0x1d0>)
 8002642:	7bbb      	ldrb	r3, [r7, #14]
 8002644:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002646:	f7ff fd85 	bl	8002154 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800264a:	f7ff fda9 	bl	80021a0 <SPI_RxByte>
  
  if (type) 
 800264e:	7bbb      	ldrb	r3, [r7, #14]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <SD_disk_initialize+0x1c8>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <SD_disk_initialize+0x1c8>)
 8002662:	701a      	strb	r2, [r3, #0]
 8002664:	e001      	b.n	800266a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002666:	f7ff fe2f 	bl	80022c8 <SD_PowerOff>
  }
  
  return Stat;
 800266a:	4b03      	ldr	r3, [pc, #12]	; (8002678 <SD_disk_initialize+0x1c8>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b2db      	uxtb	r3, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	200001e0 	.word	0x200001e0
 800267c:	20000b11 	.word	0x20000b11
 8002680:	2000053d 	.word	0x2000053d

08002684 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002694:	2301      	movs	r3, #1
 8002696:	e002      	b.n	800269e <SD_disk_status+0x1a>
  
  return Stat;
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <SD_disk_status+0x28>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	b2db      	uxtb	r3, r3
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	200001e0 	.word	0x200001e0

080026b0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b084      	sub	sp, #16
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	4603      	mov	r3, r0
 80026be:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <SD_disk_read+0x1c>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d101      	bne.n	80026d0 <SD_disk_read+0x20>
    return RES_PARERR;
 80026cc:	2304      	movs	r3, #4
 80026ce:	e051      	b.n	8002774 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 80026d0:	4b2a      	ldr	r3, [pc, #168]	; (800277c <SD_disk_read+0xcc>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 80026de:	2303      	movs	r3, #3
 80026e0:	e048      	b.n	8002774 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80026e2:	4b27      	ldr	r3, [pc, #156]	; (8002780 <SD_disk_read+0xd0>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	025b      	lsls	r3, r3, #9
 80026f2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80026f4:	f7ff fd22 	bl	800213c <SELECT>
  
  if (count == 1) 
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d111      	bne.n	8002722 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	2051      	movs	r0, #81	; 0x51
 8002702:	f7ff fe83 	bl	800240c <SD_SendCmd>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d129      	bne.n	8002760 <SD_disk_read+0xb0>
 800270c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002710:	68b8      	ldr	r0, [r7, #8]
 8002712:	f7ff fdf1 	bl	80022f8 <SD_RxDataBlock>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d021      	beq.n	8002760 <SD_disk_read+0xb0>
      count = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	e01e      	b.n	8002760 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	2052      	movs	r0, #82	; 0x52
 8002726:	f7ff fe71 	bl	800240c <SD_SendCmd>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d117      	bne.n	8002760 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002730:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002734:	68b8      	ldr	r0, [r7, #8]
 8002736:	f7ff fddf 	bl	80022f8 <SD_RxDataBlock>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00a      	beq.n	8002756 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002746:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3b01      	subs	r3, #1
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1ed      	bne.n	8002730 <SD_disk_read+0x80>
 8002754:	e000      	b.n	8002758 <SD_disk_read+0xa8>
          break;
 8002756:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002758:	2100      	movs	r1, #0
 800275a:	204c      	movs	r0, #76	; 0x4c
 800275c:	f7ff fe56 	bl	800240c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002760:	f7ff fcf8 	bl	8002154 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002764:	f7ff fd1c 	bl	80021a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	bf14      	ite	ne
 800276e:	2301      	movne	r3, #1
 8002770:	2300      	moveq	r3, #0
 8002772:	b2db      	uxtb	r3, r3
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	200001e0 	.word	0x200001e0
 8002780:	2000053d 	.word	0x2000053d

08002784 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60b9      	str	r1, [r7, #8]
 800278c:	607a      	str	r2, [r7, #4]
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	4603      	mov	r3, r0
 8002792:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d102      	bne.n	80027a0 <SD_disk_write+0x1c>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d101      	bne.n	80027a4 <SD_disk_write+0x20>
    return RES_PARERR;
 80027a0:	2304      	movs	r3, #4
 80027a2:	e06b      	b.n	800287c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 80027a4:	4b37      	ldr	r3, [pc, #220]	; (8002884 <SD_disk_write+0x100>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e062      	b.n	800287c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <SD_disk_write+0x100>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <SD_disk_write+0x44>
    return RES_WRPRT;
 80027c4:	2302      	movs	r3, #2
 80027c6:	e059      	b.n	800287c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 80027c8:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <SD_disk_write+0x104>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d102      	bne.n	80027da <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	025b      	lsls	r3, r3, #9
 80027d8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80027da:	f7ff fcaf 	bl	800213c <SELECT>
  
  if (count == 1) 
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d110      	bne.n	8002806 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	2058      	movs	r0, #88	; 0x58
 80027e8:	f7ff fe10 	bl	800240c <SD_SendCmd>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d13a      	bne.n	8002868 <SD_disk_write+0xe4>
 80027f2:	21fe      	movs	r1, #254	; 0xfe
 80027f4:	68b8      	ldr	r0, [r7, #8]
 80027f6:	f7ff fdb5 	bl	8002364 <SD_TxDataBlock>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d033      	beq.n	8002868 <SD_disk_write+0xe4>
      count = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	e030      	b.n	8002868 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <SD_disk_write+0x104>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002812:	2100      	movs	r1, #0
 8002814:	2077      	movs	r0, #119	; 0x77
 8002816:	f7ff fdf9 	bl	800240c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	2057      	movs	r0, #87	; 0x57
 800281e:	f7ff fdf5 	bl	800240c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	2059      	movs	r0, #89	; 0x59
 8002826:	f7ff fdf1 	bl	800240c <SD_SendCmd>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d11b      	bne.n	8002868 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002830:	21fc      	movs	r1, #252	; 0xfc
 8002832:	68b8      	ldr	r0, [r7, #8]
 8002834:	f7ff fd96 	bl	8002364 <SD_TxDataBlock>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002844:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	3b01      	subs	r3, #1
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1ee      	bne.n	8002830 <SD_disk_write+0xac>
 8002852:	e000      	b.n	8002856 <SD_disk_write+0xd2>
          break;
 8002854:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002856:	21fd      	movs	r1, #253	; 0xfd
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fd83 	bl	8002364 <SD_TxDataBlock>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002864:	2301      	movs	r3, #1
 8002866:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002868:	f7ff fc74 	bl	8002154 <DESELECT>
  SPI_RxByte();
 800286c:	f7ff fc98 	bl	80021a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b00      	cmp	r3, #0
 8002874:	bf14      	ite	ne
 8002876:	2301      	movne	r3, #1
 8002878:	2300      	moveq	r3, #0
 800287a:	b2db      	uxtb	r3, r3
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	200001e0 	.word	0x200001e0
 8002888:	2000053d 	.word	0x2000053d

0800288c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b08b      	sub	sp, #44	; 0x2c
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	603a      	str	r2, [r7, #0]
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	460b      	mov	r3, r1
 800289a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80028a6:	2304      	movs	r3, #4
 80028a8:	e11b      	b.n	8002ae2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 80028b0:	79bb      	ldrb	r3, [r7, #6]
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d129      	bne.n	800290a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d017      	beq.n	80028ee <SD_disk_ioctl+0x62>
 80028be:	2b02      	cmp	r3, #2
 80028c0:	dc1f      	bgt.n	8002902 <SD_disk_ioctl+0x76>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <SD_disk_ioctl+0x40>
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d00b      	beq.n	80028e2 <SD_disk_ioctl+0x56>
 80028ca:	e01a      	b.n	8002902 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 80028cc:	f7ff fd08 	bl	80022e0 <SD_CheckPower>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 80028d6:	f7ff fcf7 	bl	80022c8 <SD_PowerOff>
      res = RES_OK;
 80028da:	2300      	movs	r3, #0
 80028dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80028e0:	e0fd      	b.n	8002ade <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 80028e2:	f7ff fca5 	bl	8002230 <SD_PowerOn>
      res = RES_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80028ec:	e0f7      	b.n	8002ade <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	1c5c      	adds	r4, r3, #1
 80028f2:	f7ff fcf5 	bl	80022e0 <SD_CheckPower>
 80028f6:	4603      	mov	r3, r0
 80028f8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80028fa:	2300      	movs	r3, #0
 80028fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002900:	e0ed      	b.n	8002ade <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002902:	2304      	movs	r3, #4
 8002904:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002908:	e0e9      	b.n	8002ade <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 800290a:	4b78      	ldr	r3, [pc, #480]	; (8002aec <SD_disk_ioctl+0x260>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	b2db      	uxtb	r3, r3
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002918:	2303      	movs	r3, #3
 800291a:	e0e2      	b.n	8002ae2 <SD_disk_ioctl+0x256>
    
    SELECT();
 800291c:	f7ff fc0e 	bl	800213c <SELECT>
    
    switch (ctrl) 
 8002920:	79bb      	ldrb	r3, [r7, #6]
 8002922:	2b0d      	cmp	r3, #13
 8002924:	f200 80cc 	bhi.w	8002ac0 <SD_disk_ioctl+0x234>
 8002928:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <SD_disk_ioctl+0xa4>)
 800292a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800292e:	bf00      	nop
 8002930:	08002a2b 	.word	0x08002a2b
 8002934:	08002969 	.word	0x08002969
 8002938:	08002a1b 	.word	0x08002a1b
 800293c:	08002ac1 	.word	0x08002ac1
 8002940:	08002ac1 	.word	0x08002ac1
 8002944:	08002ac1 	.word	0x08002ac1
 8002948:	08002ac1 	.word	0x08002ac1
 800294c:	08002ac1 	.word	0x08002ac1
 8002950:	08002ac1 	.word	0x08002ac1
 8002954:	08002ac1 	.word	0x08002ac1
 8002958:	08002ac1 	.word	0x08002ac1
 800295c:	08002a3d 	.word	0x08002a3d
 8002960:	08002a61 	.word	0x08002a61
 8002964:	08002a85 	.word	0x08002a85
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002968:	2100      	movs	r1, #0
 800296a:	2049      	movs	r0, #73	; 0x49
 800296c:	f7ff fd4e 	bl	800240c <SD_SendCmd>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	f040 80a8 	bne.w	8002ac8 <SD_disk_ioctl+0x23c>
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	2110      	movs	r1, #16
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fcba 	bl	80022f8 <SD_RxDataBlock>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 809e 	beq.w	8002ac8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 800298c:	7b3b      	ldrb	r3, [r7, #12]
 800298e:	099b      	lsrs	r3, r3, #6
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10e      	bne.n	80029b4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002996:	7d7b      	ldrb	r3, [r7, #21]
 8002998:	b29a      	uxth	r2, r3
 800299a:	7d3b      	ldrb	r3, [r7, #20]
 800299c:	b29b      	uxth	r3, r3
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	4413      	add	r3, r2
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3301      	adds	r3, #1
 80029a8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 80029aa:	8bfb      	ldrh	r3, [r7, #30]
 80029ac:	029a      	lsls	r2, r3, #10
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e02e      	b.n	8002a12 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80029b4:	7c7b      	ldrb	r3, [r7, #17]
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	b2da      	uxtb	r2, r3
 80029bc:	7dbb      	ldrb	r3, [r7, #22]
 80029be:	09db      	lsrs	r3, r3, #7
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	4413      	add	r3, r2
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	7d7b      	ldrb	r3, [r7, #21]
 80029c8:	005b      	lsls	r3, r3, #1
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	f003 0306 	and.w	r3, r3, #6
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	3302      	adds	r3, #2
 80029d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80029dc:	7d3b      	ldrb	r3, [r7, #20]
 80029de:	099b      	lsrs	r3, r3, #6
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	7cfb      	ldrb	r3, [r7, #19]
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	7cbb      	ldrb	r3, [r7, #18]
 80029f2:	029b      	lsls	r3, r3, #10
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3301      	adds	r3, #1
 8002a02:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002a04:	8bfa      	ldrh	r2, [r7, #30]
 8002a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002a0a:	3b09      	subs	r3, #9
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8002a18:	e056      	b.n	8002ac8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a20:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a28:	e055      	b.n	8002ad6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002a2a:	f7ff fbe5 	bl	80021f8 <SD_ReadyWait>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2bff      	cmp	r3, #255	; 0xff
 8002a32:	d14b      	bne.n	8002acc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a3a:	e047      	b.n	8002acc <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	2049      	movs	r0, #73	; 0x49
 8002a40:	f7ff fce4 	bl	800240c <SD_SendCmd>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d142      	bne.n	8002ad0 <SD_disk_ioctl+0x244>
 8002a4a:	2110      	movs	r1, #16
 8002a4c:	6a38      	ldr	r0, [r7, #32]
 8002a4e:	f7ff fc53 	bl	80022f8 <SD_RxDataBlock>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d03b      	beq.n	8002ad0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a5e:	e037      	b.n	8002ad0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002a60:	2100      	movs	r1, #0
 8002a62:	204a      	movs	r0, #74	; 0x4a
 8002a64:	f7ff fcd2 	bl	800240c <SD_SendCmd>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d132      	bne.n	8002ad4 <SD_disk_ioctl+0x248>
 8002a6e:	2110      	movs	r1, #16
 8002a70:	6a38      	ldr	r0, [r7, #32]
 8002a72:	f7ff fc41 	bl	80022f8 <SD_RxDataBlock>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d02b      	beq.n	8002ad4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002a82:	e027      	b.n	8002ad4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8002a84:	2100      	movs	r1, #0
 8002a86:	207a      	movs	r0, #122	; 0x7a
 8002a88:	f7ff fcc0 	bl	800240c <SD_SendCmd>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d116      	bne.n	8002ac0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8002a92:	2300      	movs	r3, #0
 8002a94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002a98:	e00b      	b.n	8002ab2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 8002a9a:	6a3c      	ldr	r4, [r7, #32]
 8002a9c:	1c63      	adds	r3, r4, #1
 8002a9e:	623b      	str	r3, [r7, #32]
 8002aa0:	f7ff fb7e 	bl	80021a0 <SPI_RxByte>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8002aa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002aac:	3301      	adds	r3, #1
 8002aae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d9ef      	bls.n	8002a9a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ac6:	e006      	b.n	8002ad6 <SD_disk_ioctl+0x24a>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e004      	b.n	8002ad6 <SD_disk_ioctl+0x24a>
      break;
 8002acc:	bf00      	nop
 8002ace:	e002      	b.n	8002ad6 <SD_disk_ioctl+0x24a>
      break;
 8002ad0:	bf00      	nop
 8002ad2:	e000      	b.n	8002ad6 <SD_disk_ioctl+0x24a>
      break;
 8002ad4:	bf00      	nop
    }
    
    DESELECT();
 8002ad6:	f7ff fb3d 	bl	8002154 <DESELECT>
    SPI_RxByte();
 8002ada:	f7ff fb61 	bl	80021a0 <SPI_RxByte>
  }
  
  return res;
 8002ade:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	372c      	adds	r7, #44	; 0x2c
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200001e0 	.word	0x200001e0

08002af0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002af0:	b480      	push	{r7}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4a07      	ldr	r2, [pc, #28]	; (8002b1c <vApplicationGetIdleTaskMemory+0x2c>)
 8002b00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	4a06      	ldr	r2, [pc, #24]	; (8002b20 <vApplicationGetIdleTaskMemory+0x30>)
 8002b06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2280      	movs	r2, #128	; 0x80
 8002b0c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	20000540 	.word	0x20000540
 8002b20:	200005f4 	.word	0x200005f4

08002b24 <inicializar_semaforos>:
extern TIM_HandleTypeDef htim2;
extern BH1750_device_t* test_dev;
extern char MSG[]; // 33 lenght

void inicializar_semaforos (void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
	sem_rx = xSemaphoreCreateBinary();
 8002b28:	2203      	movs	r2, #3
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	2001      	movs	r0, #1
 8002b2e:	f009 f839 	bl	800bba4 <xQueueGenericCreate>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4a27      	ldr	r2, [pc, #156]	; (8002bd4 <inicializar_semaforos+0xb0>)
 8002b36:	6013      	str	r3, [r2, #0]
	sem_push1 = xSemaphoreCreateBinary();
 8002b38:	2203      	movs	r2, #3
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f009 f831 	bl	800bba4 <xQueueGenericCreate>
 8002b42:	4603      	mov	r3, r0
 8002b44:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <inicializar_semaforos+0xb4>)
 8002b46:	6013      	str	r3, [r2, #0]
	sem_push2 = xSemaphoreCreateBinary();
 8002b48:	2203      	movs	r2, #3
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f009 f829 	bl	800bba4 <xQueueGenericCreate>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a21      	ldr	r2, [pc, #132]	; (8002bdc <inicializar_semaforos+0xb8>)
 8002b56:	6013      	str	r3, [r2, #0]
	sem_push3 = xSemaphoreCreateBinary();
 8002b58:	2203      	movs	r2, #3
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	2001      	movs	r0, #1
 8002b5e:	f009 f821 	bl	800bba4 <xQueueGenericCreate>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4a1e      	ldr	r2, [pc, #120]	; (8002be0 <inicializar_semaforos+0xbc>)
 8002b66:	6013      	str	r3, [r2, #0]
	sem_rutina_normal = xSemaphoreCreateBinary();
 8002b68:	2203      	movs	r2, #3
 8002b6a:	2100      	movs	r1, #0
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f009 f819 	bl	800bba4 <xQueueGenericCreate>
 8002b72:	4603      	mov	r3, r0
 8002b74:	4a1b      	ldr	r2, [pc, #108]	; (8002be4 <inicializar_semaforos+0xc0>)
 8002b76:	6013      	str	r3, [r2, #0]
	sem_rutina_alt = xSemaphoreCreateBinary();
 8002b78:	2203      	movs	r2, #3
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f009 f811 	bl	800bba4 <xQueueGenericCreate>
 8002b82:	4603      	mov	r3, r0
 8002b84:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <inicializar_semaforos+0xc4>)
 8002b86:	6013      	str	r3, [r2, #0]

	xSemaphoreTake(sem_rx,0);
 8002b88:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <inicializar_semaforos+0xb0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f009 f9ee 	bl	800bf70 <xQueueSemaphoreTake>
	xSemaphoreTake(sem_push1,0);
 8002b94:	4b10      	ldr	r3, [pc, #64]	; (8002bd8 <inicializar_semaforos+0xb4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2100      	movs	r1, #0
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f009 f9e8 	bl	800bf70 <xQueueSemaphoreTake>
	xSemaphoreTake(sem_push2,0);
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <inicializar_semaforos+0xb8>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f009 f9e2 	bl	800bf70 <xQueueSemaphoreTake>
	xSemaphoreTake(sem_push3,0);
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <inicializar_semaforos+0xbc>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f009 f9dc 	bl	800bf70 <xQueueSemaphoreTake>
	xSemaphoreTake(sem_rutina_normal,0);
 8002bb8:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <inicializar_semaforos+0xc0>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f009 f9d6 	bl	800bf70 <xQueueSemaphoreTake>
	xSemaphoreTake(sem_rutina_alt,0);
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <inicializar_semaforos+0xc4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f009 f9d0 	bl	800bf70 <xQueueSemaphoreTake>
}
 8002bd0:	bf00      	nop
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	20000aa8 	.word	0x20000aa8
 8002bd8:	20000aac 	.word	0x20000aac
 8002bdc:	20000ab0 	.word	0x20000ab0
 8002be0:	20000ab4 	.word	0x20000ab4
 8002be4:	20000ab8 	.word	0x20000ab8
 8002be8:	20000abc 	.word	0x20000abc

08002bec <inicializar_cartel>:

void inicializar_cartel(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
	Actualizar_FechaHora();
 8002bf0:	f7ff f850 	bl	8001c94 <Actualizar_FechaHora>
	sprintf((char *)Cartel_Led.temp,"TEMP:20,2 C  HUM:50%%");
 8002bf4:	4906      	ldr	r1, [pc, #24]	; (8002c10 <inicializar_cartel+0x24>)
 8002bf6:	4807      	ldr	r0, [pc, #28]	; (8002c14 <inicializar_cartel+0x28>)
 8002bf8:	f00b face 	bl	800e198 <siprintf>
	sprintf((char *)Cartel_Led.mensaje,"MSJ BT VACIO");
 8002bfc:	4906      	ldr	r1, [pc, #24]	; (8002c18 <inicializar_cartel+0x2c>)
 8002bfe:	4807      	ldr	r0, [pc, #28]	; (8002c1c <inicializar_cartel+0x30>)
 8002c00:	f00b faca 	bl	800e198 <siprintf>
	sprintf((char *)Cartel_Led.mensaje_sd,"MSJ SD VACIO");
 8002c04:	4906      	ldr	r1, [pc, #24]	; (8002c20 <inicializar_cartel+0x34>)
 8002c06:	4807      	ldr	r0, [pc, #28]	; (8002c24 <inicializar_cartel+0x38>)
 8002c08:	f00b fac6 	bl	800e198 <siprintf>
}
 8002c0c:	bf00      	nop
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	0800ea78 	.word	0x0800ea78
 8002c14:	20000a53 	.word	0x20000a53
 8002c18:	0800ea90 	.word	0x0800ea90
 8002c1c:	20000a6c 	.word	0x20000a6c
 8002c20:	0800eaa0 	.word	0x0800eaa0
 8002c24:	20000a8a 	.word	0x20000a8a

08002c28 <inicializar_BH1750>:

void inicializar_BH1750 (void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
	test_dev = BH1750_init_dev_struct(&hi2c1, "test device", true);
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	4907      	ldr	r1, [pc, #28]	; (8002c4c <inicializar_BH1750+0x24>)
 8002c30:	4807      	ldr	r0, [pc, #28]	; (8002c50 <inicializar_BH1750+0x28>)
 8002c32:	f7fe f8d3 	bl	8000ddc <BH1750_init_dev_struct>
 8002c36:	4603      	mov	r3, r0
 8002c38:	4a06      	ldr	r2, [pc, #24]	; (8002c54 <inicializar_BH1750+0x2c>)
 8002c3a:	6013      	str	r3, [r2, #0]
	BH1750_init_dev(test_dev);
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <inicializar_BH1750+0x2c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe f911 	bl	8000e68 <BH1750_init_dev>
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	0800eab0 	.word	0x0800eab0
 8002c50:	200007f4 	.word	0x200007f4
 8002c54:	20000ac0 	.word	0x20000ac0

08002c58 <inicializar_Matrix>:

void inicializar_Matrix (void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	DOT_MATRIX_Init_TMR(&hspi1, &htim4);
 8002c5c:	4902      	ldr	r1, [pc, #8]	; (8002c68 <inicializar_Matrix+0x10>)
 8002c5e:	4803      	ldr	r0, [pc, #12]	; (8002c6c <inicializar_Matrix+0x14>)
 8002c60:	f7fe fe9c 	bl	800199c <DOT_MATRIX_Init_TMR>
}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	200009a8 	.word	0x200009a8
 8002c6c:	20000868 	.word	0x20000868

08002c70 <inicializar_perifericos>:

void inicializar_perifericos(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	inicializar_semaforos ();
 8002c74:	f7ff ff56 	bl	8002b24 <inicializar_semaforos>
	inicializar_cartel();
 8002c78:	f7ff ffb8 	bl	8002bec <inicializar_cartel>
	inicializar_BH1750();
 8002c7c:	f7ff ffd4 	bl	8002c28 <inicializar_BH1750>
	inicializar_Matrix();
 8002c80:	f7ff ffea 	bl	8002c58 <inicializar_Matrix>
	HAL_TIM_Base_Start(&htim3);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <inicializar_perifericos+0x20>)
 8002c86:	f004 fc77 	bl	8007578 <HAL_TIM_Base_Start>
	//HAL_TIM_Base_Start_IT(&htim2);


}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000960 	.word	0x20000960

08002c94 <inicializar_tareas>:

void inicializar_tareas (void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af02      	add	r7, sp, #8
	xTaskCreate(tarea_uart,"uart2",configMINIMAL_STACK_SIZE,NULL,3,NULL);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	2280      	movs	r2, #128	; 0x80
 8002ca6:	4930      	ldr	r1, [pc, #192]	; (8002d68 <inicializar_tareas+0xd4>)
 8002ca8:	4830      	ldr	r0, [pc, #192]	; (8002d6c <inicializar_tareas+0xd8>)
 8002caa:	f009 fcc0 	bl	800c62e <xTaskCreate>
	xTaskCreate(tarea_actualizarRTC,"actualizarRTC",configMINIMAL_STACK_SIZE,NULL,3,NULL);
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2280      	movs	r2, #128	; 0x80
 8002cba:	492d      	ldr	r1, [pc, #180]	; (8002d70 <inicializar_tareas+0xdc>)
 8002cbc:	482d      	ldr	r0, [pc, #180]	; (8002d74 <inicializar_tareas+0xe0>)
 8002cbe:	f009 fcb6 	bl	800c62e <xTaskCreate>
	xTaskCreate(tarea_acciones_pulsador,"AccionesPulsador",configMINIMAL_STACK_SIZE,NULL,3,NULL);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	9301      	str	r3, [sp, #4]
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	2300      	movs	r3, #0
 8002ccc:	2280      	movs	r2, #128	; 0x80
 8002cce:	492a      	ldr	r1, [pc, #168]	; (8002d78 <inicializar_tareas+0xe4>)
 8002cd0:	482a      	ldr	r0, [pc, #168]	; (8002d7c <inicializar_tareas+0xe8>)
 8002cd2:	f009 fcac 	bl	800c62e <xTaskCreate>
	xTaskCreate( tarea_cartel, "tarea_cartel", configMINIMAL_STACK_SIZE, NULL, 3, NULL );
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	2303      	movs	r3, #3
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2280      	movs	r2, #128	; 0x80
 8002ce2:	4927      	ldr	r1, [pc, #156]	; (8002d80 <inicializar_tareas+0xec>)
 8002ce4:	4827      	ldr	r0, [pc, #156]	; (8002d84 <inicializar_tareas+0xf0>)
 8002ce6:	f009 fca2 	bl	800c62e <xTaskCreate>
	xTaskCreate(tarea_pulsador1,"Pulsador1",configMINIMAL_STACK_SIZE,NULL,2,NULL);
 8002cea:	2300      	movs	r3, #0
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2302      	movs	r3, #2
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	2280      	movs	r2, #128	; 0x80
 8002cf6:	4924      	ldr	r1, [pc, #144]	; (8002d88 <inicializar_tareas+0xf4>)
 8002cf8:	4824      	ldr	r0, [pc, #144]	; (8002d8c <inicializar_tareas+0xf8>)
 8002cfa:	f009 fc98 	bl	800c62e <xTaskCreate>
	xTaskCreate(tarea_pulsador2,"Pulsador2",configMINIMAL_STACK_SIZE,NULL,2,NULL);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2302      	movs	r3, #2
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	2280      	movs	r2, #128	; 0x80
 8002d0a:	4921      	ldr	r1, [pc, #132]	; (8002d90 <inicializar_tareas+0xfc>)
 8002d0c:	4821      	ldr	r0, [pc, #132]	; (8002d94 <inicializar_tareas+0x100>)
 8002d0e:	f009 fc8e 	bl	800c62e <xTaskCreate>
	xTaskCreate(tarea_pulsador3,"Pulsador3",configMINIMAL_STACK_SIZE,NULL,2,NULL);
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2302      	movs	r3, #2
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	491e      	ldr	r1, [pc, #120]	; (8002d98 <inicializar_tareas+0x104>)
 8002d20:	481e      	ldr	r0, [pc, #120]	; (8002d9c <inicializar_tareas+0x108>)
 8002d22:	f009 fc84 	bl	800c62e <xTaskCreate>
	xTaskCreate(tarea_sd,"SD",configMINIMAL_STACK_SIZE,NULL,2,NULL);
 8002d26:	2300      	movs	r3, #0
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2280      	movs	r2, #128	; 0x80
 8002d32:	491b      	ldr	r1, [pc, #108]	; (8002da0 <inicializar_tareas+0x10c>)
 8002d34:	481b      	ldr	r0, [pc, #108]	; (8002da4 <inicializar_tareas+0x110>)
 8002d36:	f009 fc7a 	bl	800c62e <xTaskCreate>
	xTaskCreate( tarea_bh1750, "tarea_bh1750", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9301      	str	r3, [sp, #4]
 8002d3e:	2301      	movs	r3, #1
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2300      	movs	r3, #0
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	4918      	ldr	r1, [pc, #96]	; (8002da8 <inicializar_tareas+0x114>)
 8002d48:	4818      	ldr	r0, [pc, #96]	; (8002dac <inicializar_tareas+0x118>)
 8002d4a:	f009 fc70 	bl	800c62e <xTaskCreate>
	xTaskCreate( tarea_DHT11, "tarea_DHT11", configMINIMAL_STACK_SIZE, NULL, 1, NULL );
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2301      	movs	r3, #1
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2280      	movs	r2, #128	; 0x80
 8002d5a:	4915      	ldr	r1, [pc, #84]	; (8002db0 <inicializar_tareas+0x11c>)
 8002d5c:	4815      	ldr	r0, [pc, #84]	; (8002db4 <inicializar_tareas+0x120>)
 8002d5e:	f009 fc66 	bl	800c62e <xTaskCreate>

}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	0800eabc 	.word	0x0800eabc
 8002d6c:	08004035 	.word	0x08004035
 8002d70:	0800eac4 	.word	0x0800eac4
 8002d74:	080040b9 	.word	0x080040b9
 8002d78:	0800ead4 	.word	0x0800ead4
 8002d7c:	08003d6d 	.word	0x08003d6d
 8002d80:	0800eae8 	.word	0x0800eae8
 8002d84:	08003c6d 	.word	0x08003c6d
 8002d88:	0800eaf8 	.word	0x0800eaf8
 8002d8c:	080040d1 	.word	0x080040d1
 8002d90:	0800eb04 	.word	0x0800eb04
 8002d94:	08004181 	.word	0x08004181
 8002d98:	0800eb10 	.word	0x0800eb10
 8002d9c:	0800421d 	.word	0x0800421d
 8002da0:	0800eb1c 	.word	0x0800eb1c
 8002da4:	080042f1 	.word	0x080042f1
 8002da8:	0800eb20 	.word	0x0800eb20
 8002dac:	08003be9 	.word	0x08003be9
 8002db0:	0800eb30 	.word	0x0800eb30
 8002db4:	08004281 	.word	0x08004281

08002db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b088      	sub	sp, #32
 8002dbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dbe:	f001 fb25 	bl	800440c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dc2:	f000 f831 	bl	8002e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc6:	f000 fabd 	bl	8003344 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002dca:	f000 f899 	bl	8002f00 <MX_I2C1_Init>
  MX_SPI1_Init();
 8002dce:	f000 f93b 	bl	8003048 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002dd2:	f000 fa3f 	bl	8003254 <MX_TIM4_Init>
  MX_RTC_Init();
 8002dd6:	f000 f8c1 	bl	8002f5c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002dda:	f000 fa89 	bl	80032f0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8002dde:	f000 f9eb 	bl	80031b8 <MX_TIM3_Init>
  MX_SPI2_Init();
 8002de2:	f000 f967 	bl	80030b4 <MX_SPI2_Init>
  MX_FATFS_Init();
 8002de6:	f006 f8c1 	bl	8008f6c <MX_FATFS_Init>
  MX_TIM2_Init();
 8002dea:	f000 f999 	bl	8003120 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim3);
  inicializar_perifericos();
 8002dee:	f7ff ff3f 	bl	8002c70 <inicializar_perifericos>
  inicializar_tareas();
 8002df2:	f7ff ff4f 	bl	8002c94 <inicializar_tareas>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <main+0x68>)
 8002df8:	1d3c      	adds	r4, r7, #4
 8002dfa:	461d      	mov	r5, r3
 8002dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002e08:	1d3b      	adds	r3, r7, #4
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f008 fc0b 	bl	800b628 <osThreadCreate>
 8002e12:	4603      	mov	r3, r0
 8002e14:	4a03      	ldr	r2, [pc, #12]	; (8002e24 <main+0x6c>)
 8002e16:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002e18:	f008 fbff 	bl	800b61a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002e1c:	e7fe      	b.n	8002e1c <main+0x64>
 8002e1e:	bf00      	nop
 8002e20:	0800eb48 	.word	0x0800eb48
 8002e24:	20000a34 	.word	0x20000a34

08002e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b094      	sub	sp, #80	; 0x50
 8002e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e2e:	f107 0320 	add.w	r3, r7, #32
 8002e32:	2230      	movs	r2, #48	; 0x30
 8002e34:	2100      	movs	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f00b f836 	bl	800dea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e3c:	f107 030c 	add.w	r3, r7, #12
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	609a      	str	r2, [r3, #8]
 8002e48:	60da      	str	r2, [r3, #12]
 8002e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60bb      	str	r3, [r7, #8]
 8002e50:	4b29      	ldr	r3, [pc, #164]	; (8002ef8 <SystemClock_Config+0xd0>)
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	4a28      	ldr	r2, [pc, #160]	; (8002ef8 <SystemClock_Config+0xd0>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <SystemClock_Config+0xd0>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e68:	2300      	movs	r3, #0
 8002e6a:	607b      	str	r3, [r7, #4]
 8002e6c:	4b23      	ldr	r3, [pc, #140]	; (8002efc <SystemClock_Config+0xd4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e74:	4a21      	ldr	r2, [pc, #132]	; (8002efc <SystemClock_Config+0xd4>)
 8002e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e7a:	6013      	str	r3, [r2, #0]
 8002e7c:	4b1f      	ldr	r3, [pc, #124]	; (8002efc <SystemClock_Config+0xd4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8002e88:	2306      	movs	r3, #6
 8002e8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e90:	2301      	movs	r3, #1
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e94:	2310      	movs	r3, #16
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e98:	2302      	movs	r3, #2
 8002e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002ea0:	2308      	movs	r3, #8
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002ea4:	2348      	movs	r3, #72	; 0x48
 8002ea6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002eac:	2307      	movs	r3, #7
 8002eae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002eb0:	f107 0320 	add.w	r3, r7, #32
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f002 fde7 	bl	8005a88 <HAL_RCC_OscConfig>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002ec0:	f000 fb9a 	bl	80035f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ec4:	230f      	movs	r3, #15
 8002ec6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ed4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eda:	f107 030c 	add.w	r3, r7, #12
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 f849 	bl	8005f78 <HAL_RCC_ClockConfig>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d001      	beq.n	8002ef0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002eec:	f000 fb84 	bl	80035f8 <Error_Handler>
  }
}
 8002ef0:	bf00      	nop
 8002ef2:	3750      	adds	r7, #80	; 0x50
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000

08002f00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f04:	4b12      	ldr	r3, [pc, #72]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f06:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <MX_I2C1_Init+0x54>)
 8002f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f0c:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <MX_I2C1_Init+0x58>)
 8002f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f24:	4b0a      	ldr	r3, [pc, #40]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f2a:	4b09      	ldr	r3, [pc, #36]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f30:	4b07      	ldr	r3, [pc, #28]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f3c:	4804      	ldr	r0, [pc, #16]	; (8002f50 <MX_I2C1_Init+0x50>)
 8002f3e:	f001 fe0d 	bl	8004b5c <HAL_I2C_Init>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f48:	f000 fb56 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f4c:	bf00      	nop
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	200007f4 	.word	0x200007f4
 8002f54:	40005400 	.word	0x40005400
 8002f58:	000186a0 	.word	0x000186a0

08002f5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002f62:	1d3b      	adds	r3, r7, #4
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002f70:	2300      	movs	r3, #0
 8002f72:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <MX_RTC_Init+0xe8>)
 8002f78:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002f7a:	4b31      	ldr	r3, [pc, #196]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002f80:	4b2f      	ldr	r3, [pc, #188]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f82:	227f      	movs	r2, #127	; 0x7f
 8002f84:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f88:	22ff      	movs	r2, #255	; 0xff
 8002f8a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002f8c:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002f92:	4b2b      	ldr	r3, [pc, #172]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002f98:	4b29      	ldr	r3, [pc, #164]	; (8003040 <MX_RTC_Init+0xe4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002f9e:	4828      	ldr	r0, [pc, #160]	; (8003040 <MX_RTC_Init+0xe4>)
 8002fa0:	f003 fb2a 	bl	80065f8 <HAL_RTC_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8002faa:	f000 fb25 	bl	80035f8 <Error_Handler>
  }

  /* USER CODE BEGIN Check_RTC_BKUP */

  if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR0) != RTC_BKUP_DEFINE_CODE)
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4823      	ldr	r0, [pc, #140]	; (8003040 <MX_RTC_Init+0xe4>)
 8002fb2:	f003 fe39 	bl	8006c28 <HAL_RTCEx_BKUPRead>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d02e      	beq.n	800301e <MX_RTC_Init+0xc2>
    {
      // Clear Backup registor : recover to current RTC information

      // Set to Time/Date from current Time/Date
	  sTime.Hours = 12;
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	713b      	strb	r3, [r7, #4]
	    sTime.Minutes = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	717b      	strb	r3, [r7, #5]
	    sTime.Seconds = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	71bb      	strb	r3, [r7, #6]
	    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	613b      	str	r3, [r7, #16]
	    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
	    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002fd4:	1d3b      	adds	r3, r7, #4
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4819      	ldr	r0, [pc, #100]	; (8003040 <MX_RTC_Init+0xe4>)
 8002fdc:	f003 fb82 	bl	80066e4 <HAL_RTC_SetTime>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <MX_RTC_Init+0x8e>
	    {
	      Error_Handler();
 8002fe6:	f000 fb07 	bl	80035f8 <Error_Handler>
	    }
	    sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8002fea:	2302      	movs	r3, #2
 8002fec:	703b      	strb	r3, [r7, #0]
	    sDate.Month = RTC_MONTH_MAY;
 8002fee:	2305      	movs	r3, #5
 8002ff0:	707b      	strb	r3, [r7, #1]
	    sDate.Date = 10;
 8002ff2:	230a      	movs	r3, #10
 8002ff4:	70bb      	strb	r3, [r7, #2]
	    sDate.Year = 22;
 8002ff6:	2316      	movs	r3, #22
 8002ff8:	70fb      	strb	r3, [r7, #3]

	    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002ffa:	463b      	mov	r3, r7
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	4619      	mov	r1, r3
 8003000:	480f      	ldr	r0, [pc, #60]	; (8003040 <MX_RTC_Init+0xe4>)
 8003002:	f003 fc67 	bl	80068d4 <HAL_RTC_SetDate>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <MX_RTC_Init+0xb4>
	    {
	      Error_Handler();
 800300c:	f000 faf4 	bl	80035f8 <Error_Handler>
	    }
      // Write a data in ad RTC Backup data register
      HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0, RTC_BKUP_DEFINE_CODE);
 8003010:	f64b 62be 	movw	r2, #48830	; 0xbebe
 8003014:	2100      	movs	r1, #0
 8003016:	480a      	ldr	r0, [pc, #40]	; (8003040 <MX_RTC_Init+0xe4>)
 8003018:	f003 fdec 	bl	8006bf4 <HAL_RTCEx_BKUPWrite>
//    Error_Handler();
//  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 800301c:	e00b      	b.n	8003036 <MX_RTC_Init+0xda>
      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800301e:	1d3b      	adds	r3, r7, #4
 8003020:	2200      	movs	r2, #0
 8003022:	4619      	mov	r1, r3
 8003024:	4806      	ldr	r0, [pc, #24]	; (8003040 <MX_RTC_Init+0xe4>)
 8003026:	f003 fbf7 	bl	8006818 <HAL_RTC_GetTime>
      HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800302a:	463b      	mov	r3, r7
 800302c:	2200      	movs	r2, #0
 800302e:	4619      	mov	r1, r3
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <MX_RTC_Init+0xe4>)
 8003032:	f003 fcd3 	bl	80069dc <HAL_RTC_GetDate>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000848 	.word	0x20000848
 8003044:	40002800 	.word	0x40002800

08003048 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800304c:	4b17      	ldr	r3, [pc, #92]	; (80030ac <MX_SPI1_Init+0x64>)
 800304e:	4a18      	ldr	r2, [pc, #96]	; (80030b0 <MX_SPI1_Init+0x68>)
 8003050:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <MX_SPI1_Init+0x64>)
 8003054:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003058:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <MX_SPI1_Init+0x64>)
 800305c:	2200      	movs	r2, #0
 800305e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003060:	4b12      	ldr	r3, [pc, #72]	; (80030ac <MX_SPI1_Init+0x64>)
 8003062:	2200      	movs	r2, #0
 8003064:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003066:	4b11      	ldr	r3, [pc, #68]	; (80030ac <MX_SPI1_Init+0x64>)
 8003068:	2200      	movs	r2, #0
 800306a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800306c:	4b0f      	ldr	r3, [pc, #60]	; (80030ac <MX_SPI1_Init+0x64>)
 800306e:	2200      	movs	r2, #0
 8003070:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003072:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <MX_SPI1_Init+0x64>)
 8003074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003078:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800307a:	4b0c      	ldr	r3, [pc, #48]	; (80030ac <MX_SPI1_Init+0x64>)
 800307c:	2238      	movs	r2, #56	; 0x38
 800307e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <MX_SPI1_Init+0x64>)
 8003082:	2200      	movs	r2, #0
 8003084:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <MX_SPI1_Init+0x64>)
 8003088:	2200      	movs	r2, #0
 800308a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800308c:	4b07      	ldr	r3, [pc, #28]	; (80030ac <MX_SPI1_Init+0x64>)
 800308e:	2200      	movs	r2, #0
 8003090:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <MX_SPI1_Init+0x64>)
 8003094:	220a      	movs	r2, #10
 8003096:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003098:	4804      	ldr	r0, [pc, #16]	; (80030ac <MX_SPI1_Init+0x64>)
 800309a:	f003 fddd 	bl	8006c58 <HAL_SPI_Init>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80030a4:	f000 faa8 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030a8:	bf00      	nop
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	20000868 	.word	0x20000868
 80030b0:	40013000 	.word	0x40013000

080030b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80030b8:	4b17      	ldr	r3, [pc, #92]	; (8003118 <MX_SPI2_Init+0x64>)
 80030ba:	4a18      	ldr	r2, [pc, #96]	; (800311c <MX_SPI2_Init+0x68>)
 80030bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80030be:	4b16      	ldr	r3, [pc, #88]	; (8003118 <MX_SPI2_Init+0x64>)
 80030c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80030c6:	4b14      	ldr	r3, [pc, #80]	; (8003118 <MX_SPI2_Init+0x64>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <MX_SPI2_Init+0x64>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80030d2:	4b11      	ldr	r3, [pc, #68]	; (8003118 <MX_SPI2_Init+0x64>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <MX_SPI2_Init+0x64>)
 80030da:	2200      	movs	r2, #0
 80030dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <MX_SPI2_Init+0x64>)
 80030e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <MX_SPI2_Init+0x64>)
 80030e8:	2220      	movs	r2, #32
 80030ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <MX_SPI2_Init+0x64>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <MX_SPI2_Init+0x64>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <MX_SPI2_Init+0x64>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <MX_SPI2_Init+0x64>)
 8003100:	220a      	movs	r2, #10
 8003102:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003104:	4804      	ldr	r0, [pc, #16]	; (8003118 <MX_SPI2_Init+0x64>)
 8003106:	f003 fda7 	bl	8006c58 <HAL_SPI_Init>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003110:	f000 fa72 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	200008c0 	.word	0x200008c0
 800311c:	40003800 	.word	0x40003800

08003120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b086      	sub	sp, #24
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	2200      	movs	r2, #0
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003134:	463b      	mov	r3, r7
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <MX_TIM2_Init+0x94>)
 800313e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003142:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000-1;
 8003144:	4b1b      	ldr	r3, [pc, #108]	; (80031b4 <MX_TIM2_Init+0x94>)
 8003146:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800314a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800314c:	4b19      	ldr	r3, [pc, #100]	; (80031b4 <MX_TIM2_Init+0x94>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8003152:	4b18      	ldr	r3, [pc, #96]	; (80031b4 <MX_TIM2_Init+0x94>)
 8003154:	2201      	movs	r2, #1
 8003156:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003158:	4b16      	ldr	r3, [pc, #88]	; (80031b4 <MX_TIM2_Init+0x94>)
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800315e:	4b15      	ldr	r3, [pc, #84]	; (80031b4 <MX_TIM2_Init+0x94>)
 8003160:	2200      	movs	r2, #0
 8003162:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003164:	4813      	ldr	r0, [pc, #76]	; (80031b4 <MX_TIM2_Init+0x94>)
 8003166:	f004 f9b7 	bl	80074d8 <HAL_TIM_Base_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8003170:	f000 fa42 	bl	80035f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003178:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800317a:	f107 0308 	add.w	r3, r7, #8
 800317e:	4619      	mov	r1, r3
 8003180:	480c      	ldr	r0, [pc, #48]	; (80031b4 <MX_TIM2_Init+0x94>)
 8003182:	f004 fbbd 	bl	8007900 <HAL_TIM_ConfigClockSource>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800318c:	f000 fa34 	bl	80035f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003190:	2320      	movs	r3, #32
 8003192:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003194:	2300      	movs	r3, #0
 8003196:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003198:	463b      	mov	r3, r7
 800319a:	4619      	mov	r1, r3
 800319c:	4805      	ldr	r0, [pc, #20]	; (80031b4 <MX_TIM2_Init+0x94>)
 800319e:	f004 fdb9 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80031a8:	f000 fa26 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80031ac:	bf00      	nop
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000918 	.word	0x20000918

080031b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031be:	f107 0308 	add.w	r3, r7, #8
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031cc:	463b      	mov	r3, r7
 80031ce:	2200      	movs	r2, #0
 80031d0:	601a      	str	r2, [r3, #0]
 80031d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <MX_TIM3_Init+0x94>)
 80031d6:	4a1e      	ldr	r2, [pc, #120]	; (8003250 <MX_TIM3_Init+0x98>)
 80031d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80031da:	4b1c      	ldr	r3, [pc, #112]	; (800324c <MX_TIM3_Init+0x94>)
 80031dc:	2247      	movs	r2, #71	; 0x47
 80031de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031e0:	4b1a      	ldr	r3, [pc, #104]	; (800324c <MX_TIM3_Init+0x94>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80031e6:	4b19      	ldr	r3, [pc, #100]	; (800324c <MX_TIM3_Init+0x94>)
 80031e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031ee:	4b17      	ldr	r3, [pc, #92]	; (800324c <MX_TIM3_Init+0x94>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031f4:	4b15      	ldr	r3, [pc, #84]	; (800324c <MX_TIM3_Init+0x94>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80031fa:	4814      	ldr	r0, [pc, #80]	; (800324c <MX_TIM3_Init+0x94>)
 80031fc:	f004 f96c 	bl	80074d8 <HAL_TIM_Base_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003206:	f000 f9f7 	bl	80035f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800320a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800320e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003210:	f107 0308 	add.w	r3, r7, #8
 8003214:	4619      	mov	r1, r3
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <MX_TIM3_Init+0x94>)
 8003218:	f004 fb72 	bl	8007900 <HAL_TIM_ConfigClockSource>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003222:	f000 f9e9 	bl	80035f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003226:	2300      	movs	r3, #0
 8003228:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800322e:	463b      	mov	r3, r7
 8003230:	4619      	mov	r1, r3
 8003232:	4806      	ldr	r0, [pc, #24]	; (800324c <MX_TIM3_Init+0x94>)
 8003234:	f004 fd6e 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800323e:	f000 f9db 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20000960 	.word	0x20000960
 8003250:	40000400 	.word	0x40000400

08003254 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800325a:	f107 0308 	add.w	r3, r7, #8
 800325e:	2200      	movs	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	605a      	str	r2, [r3, #4]
 8003264:	609a      	str	r2, [r3, #8]
 8003266:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003268:	463b      	mov	r3, r7
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003270:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <MX_TIM4_Init+0x94>)
 8003272:	4a1e      	ldr	r2, [pc, #120]	; (80032ec <MX_TIM4_Init+0x98>)
 8003274:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003276:	4b1c      	ldr	r3, [pc, #112]	; (80032e8 <MX_TIM4_Init+0x94>)
 8003278:	2200      	movs	r2, #0
 800327a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <MX_TIM4_Init+0x94>)
 800327e:	2200      	movs	r2, #0
 8003280:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <MX_TIM4_Init+0x94>)
 8003284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003288:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <MX_TIM4_Init+0x94>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003290:	4b15      	ldr	r3, [pc, #84]	; (80032e8 <MX_TIM4_Init+0x94>)
 8003292:	2200      	movs	r2, #0
 8003294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003296:	4814      	ldr	r0, [pc, #80]	; (80032e8 <MX_TIM4_Init+0x94>)
 8003298:	f004 f91e 	bl	80074d8 <HAL_TIM_Base_Init>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80032a2:	f000 f9a9 	bl	80035f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	4619      	mov	r1, r3
 80032b2:	480d      	ldr	r0, [pc, #52]	; (80032e8 <MX_TIM4_Init+0x94>)
 80032b4:	f004 fb24 	bl	8007900 <HAL_TIM_ConfigClockSource>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80032be:	f000 f99b 	bl	80035f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c2:	2300      	movs	r3, #0
 80032c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80032ca:	463b      	mov	r3, r7
 80032cc:	4619      	mov	r1, r3
 80032ce:	4806      	ldr	r0, [pc, #24]	; (80032e8 <MX_TIM4_Init+0x94>)
 80032d0:	f004 fd20 	bl	8007d14 <HAL_TIMEx_MasterConfigSynchronization>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80032da:	f000 f98d 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80032de:	bf00      	nop
 80032e0:	3718      	adds	r7, #24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	200009a8 	.word	0x200009a8
 80032ec:	40000800 	.word	0x40000800

080032f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <MX_USART1_UART_Init+0x4c>)
 80032f6:	4a12      	ldr	r2, [pc, #72]	; (8003340 <MX_USART1_UART_Init+0x50>)
 80032f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <MX_USART1_UART_Init+0x4c>)
 80032fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003300:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003302:	4b0e      	ldr	r3, [pc, #56]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <MX_USART1_UART_Init+0x4c>)
 800330a:	2200      	movs	r2, #0
 800330c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800330e:	4b0b      	ldr	r3, [pc, #44]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003310:	2200      	movs	r2, #0
 8003312:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003314:	4b09      	ldr	r3, [pc, #36]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003316:	220c      	movs	r2, #12
 8003318:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <MX_USART1_UART_Init+0x4c>)
 800331c:	2200      	movs	r2, #0
 800331e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003322:	2200      	movs	r2, #0
 8003324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003326:	4805      	ldr	r0, [pc, #20]	; (800333c <MX_USART1_UART_Init+0x4c>)
 8003328:	f004 fd76 	bl	8007e18 <HAL_UART_Init>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003332:	f000 f961 	bl	80035f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200009f0 	.word	0x200009f0
 8003340:	40011000 	.word	0x40011000

08003344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334a:	f107 0314 	add.w	r3, r7, #20
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	605a      	str	r2, [r3, #4]
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	60da      	str	r2, [r3, #12]
 8003358:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b48      	ldr	r3, [pc, #288]	; (8003480 <MX_GPIO_Init+0x13c>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	4a47      	ldr	r2, [pc, #284]	; (8003480 <MX_GPIO_Init+0x13c>)
 8003364:	f043 0304 	orr.w	r3, r3, #4
 8003368:	6313      	str	r3, [r2, #48]	; 0x30
 800336a:	4b45      	ldr	r3, [pc, #276]	; (8003480 <MX_GPIO_Init+0x13c>)
 800336c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b41      	ldr	r3, [pc, #260]	; (8003480 <MX_GPIO_Init+0x13c>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a40      	ldr	r2, [pc, #256]	; (8003480 <MX_GPIO_Init+0x13c>)
 8003380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <MX_GPIO_Init+0x13c>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <MX_GPIO_Init+0x13c>)
 8003398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339a:	4a39      	ldr	r2, [pc, #228]	; (8003480 <MX_GPIO_Init+0x13c>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6313      	str	r3, [r2, #48]	; 0x30
 80033a2:	4b37      	ldr	r3, [pc, #220]	; (8003480 <MX_GPIO_Init+0x13c>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	4b33      	ldr	r3, [pc, #204]	; (8003480 <MX_GPIO_Init+0x13c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	4a32      	ldr	r2, [pc, #200]	; (8003480 <MX_GPIO_Init+0x13c>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6313      	str	r3, [r2, #48]	; 0x30
 80033be:	4b30      	ldr	r3, [pc, #192]	; (8003480 <MX_GPIO_Init+0x13c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 80033ca:	2200      	movs	r2, #0
 80033cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80033d0:	482c      	ldr	r0, [pc, #176]	; (8003484 <MX_GPIO_Init+0x140>)
 80033d2:	f001 fb91 	bl	8004af8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PUSH1_Pin PUSH2_Pin PUSH3_Pin */
  GPIO_InitStruct.Pin = PUSH1_Pin|PUSH2_Pin|PUSH3_Pin;
 80033d6:	230e      	movs	r3, #14
 80033d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80033da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80033de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033e0:	2301      	movs	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033e4:	f107 0314 	add.w	r3, r7, #20
 80033e8:	4619      	mov	r1, r3
 80033ea:	4827      	ldr	r0, [pc, #156]	; (8003488 <MX_GPIO_Init+0x144>)
 80033ec:	f001 f9e8 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f0:	230c      	movs	r3, #12
 80033f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f4:	2302      	movs	r3, #2
 80033f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fc:	2300      	movs	r3, #0
 80033fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003400:	2307      	movs	r3, #7
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003404:	f107 0314 	add.w	r3, r7, #20
 8003408:	4619      	mov	r1, r3
 800340a:	4820      	ldr	r0, [pc, #128]	; (800348c <MX_GPIO_Init+0x148>)
 800340c:	f001 f9d8 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8003410:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003416:	2301      	movs	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8003422:	f107 0314 	add.w	r3, r7, #20
 8003426:	4619      	mov	r1, r3
 8003428:	4816      	ldr	r0, [pc, #88]	; (8003484 <MX_GPIO_Init+0x140>)
 800342a:	f001 f9c9 	bl	80047c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CD_Pin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 800342e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4619      	mov	r1, r3
 8003442:	4812      	ldr	r0, [pc, #72]	; (800348c <MX_GPIO_Init+0x148>)
 8003444:	f001 f9bc 	bl	80047c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	2105      	movs	r1, #5
 800344c:	2007      	movs	r0, #7
 800344e:	f001 f8fb 	bl	8004648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003452:	2007      	movs	r0, #7
 8003454:	f001 f914 	bl	8004680 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8003458:	2200      	movs	r2, #0
 800345a:	2105      	movs	r1, #5
 800345c:	2008      	movs	r0, #8
 800345e:	f001 f8f3 	bl	8004648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8003462:	2008      	movs	r0, #8
 8003464:	f001 f90c 	bl	8004680 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8003468:	2200      	movs	r2, #0
 800346a:	2105      	movs	r1, #5
 800346c:	2009      	movs	r0, #9
 800346e:	f001 f8eb 	bl	8004648 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8003472:	2009      	movs	r0, #9
 8003474:	f001 f904 	bl	8004680 <HAL_NVIC_EnableIRQ>

}
 8003478:	bf00      	nop
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	40020400 	.word	0x40020400
 8003488:	40020800 	.word	0x40020800
 800348c:	40020000 	.word	0x40020000

08003490 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	80fb      	strh	r3, [r7, #6]
	BaseType_t p;

	if(GPIO_Pin==PUSH1_Pin)
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d125      	bne.n	80034ec <HAL_GPIO_EXTI_Callback+0x5c>
	{
		HAL_Delay(5);
 80034a0:	2005      	movs	r0, #5
 80034a2:	f000 fff5 	bl	8004490 <HAL_Delay>
		while(HAL_GPIO_ReadPin(PUSH1_GPIO_Port, GPIO_Pin)==0);
 80034a6:	bf00      	nop
 80034a8:	88fb      	ldrh	r3, [r7, #6]
 80034aa:	4619      	mov	r1, r3
 80034ac:	483a      	ldr	r0, [pc, #232]	; (8003598 <HAL_GPIO_EXTI_Callback+0x108>)
 80034ae:	f001 fb0b 	bl	8004ac8 <HAL_GPIO_ReadPin>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d0f7      	beq.n	80034a8 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_Delay(5);
 80034b8:	2005      	movs	r0, #5
 80034ba:	f000 ffe9 	bl	8004490 <HAL_Delay>
		pulsador_apretado=1;
 80034be:	4b37      	ldr	r3, [pc, #220]	; (800359c <HAL_GPIO_EXTI_Callback+0x10c>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
		xSemaphoreGiveFromISR(sem_push1,&p);
 80034c4:	4b36      	ldr	r3, [pc, #216]	; (80035a0 <HAL_GPIO_EXTI_Callback+0x110>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f107 020c 	add.w	r2, r7, #12
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f008 fcc0 	bl	800be54 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(p);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d059      	beq.n	800358e <HAL_GPIO_EXTI_Callback+0xfe>
 80034da:	4b32      	ldr	r3, [pc, #200]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x114>)
 80034dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f3bf 8f4f 	dsb	sy
 80034e6:	f3bf 8f6f 	isb	sy
		portEND_SWITCHING_ISR(p);
	}

	//xSemaphoreGiveFromISR(sem_push,&p);
	//portEND_SWITCHING_ISR(p);
}
 80034ea:	e050      	b.n	800358e <HAL_GPIO_EXTI_Callback+0xfe>
	else if(GPIO_Pin==PUSH2_Pin)
 80034ec:	88fb      	ldrh	r3, [r7, #6]
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d125      	bne.n	800353e <HAL_GPIO_EXTI_Callback+0xae>
		HAL_Delay(5);
 80034f2:	2005      	movs	r0, #5
 80034f4:	f000 ffcc 	bl	8004490 <HAL_Delay>
		while(HAL_GPIO_ReadPin(PUSH2_GPIO_Port, GPIO_Pin)==0);
 80034f8:	bf00      	nop
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4619      	mov	r1, r3
 80034fe:	4826      	ldr	r0, [pc, #152]	; (8003598 <HAL_GPIO_EXTI_Callback+0x108>)
 8003500:	f001 fae2 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0f7      	beq.n	80034fa <HAL_GPIO_EXTI_Callback+0x6a>
		HAL_Delay(5);
 800350a:	2005      	movs	r0, #5
 800350c:	f000 ffc0 	bl	8004490 <HAL_Delay>
		pulsador_apretado=2;
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_GPIO_EXTI_Callback+0x10c>)
 8003512:	2202      	movs	r2, #2
 8003514:	701a      	strb	r2, [r3, #0]
		xSemaphoreGiveFromISR(sem_push2,&p);
 8003516:	4b24      	ldr	r3, [pc, #144]	; (80035a8 <HAL_GPIO_EXTI_Callback+0x118>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f107 020c 	add.w	r2, r7, #12
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f008 fc97 	bl	800be54 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(p);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d030      	beq.n	800358e <HAL_GPIO_EXTI_Callback+0xfe>
 800352c:	4b1d      	ldr	r3, [pc, #116]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x114>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
}
 800353c:	e027      	b.n	800358e <HAL_GPIO_EXTI_Callback+0xfe>
	else if(GPIO_Pin==PUSH3_Pin)
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d124      	bne.n	800358e <HAL_GPIO_EXTI_Callback+0xfe>
		HAL_Delay(5);
 8003544:	2005      	movs	r0, #5
 8003546:	f000 ffa3 	bl	8004490 <HAL_Delay>
		while(HAL_GPIO_ReadPin(PUSH2_GPIO_Port, GPIO_Pin)==0);
 800354a:	bf00      	nop
 800354c:	88fb      	ldrh	r3, [r7, #6]
 800354e:	4619      	mov	r1, r3
 8003550:	4811      	ldr	r0, [pc, #68]	; (8003598 <HAL_GPIO_EXTI_Callback+0x108>)
 8003552:	f001 fab9 	bl	8004ac8 <HAL_GPIO_ReadPin>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0f7      	beq.n	800354c <HAL_GPIO_EXTI_Callback+0xbc>
		HAL_Delay(5);
 800355c:	2005      	movs	r0, #5
 800355e:	f000 ff97 	bl	8004490 <HAL_Delay>
		pulsador_apretado=3;
 8003562:	4b0e      	ldr	r3, [pc, #56]	; (800359c <HAL_GPIO_EXTI_Callback+0x10c>)
 8003564:	2203      	movs	r2, #3
 8003566:	701a      	strb	r2, [r3, #0]
		xSemaphoreGiveFromISR(sem_push3,&p);
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_GPIO_EXTI_Callback+0x11c>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f107 020c 	add.w	r2, r7, #12
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f008 fc6e 	bl	800be54 <xQueueGiveFromISR>
		portEND_SWITCHING_ISR(p);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_GPIO_EXTI_Callback+0xfe>
 800357e:	4b09      	ldr	r3, [pc, #36]	; (80035a4 <HAL_GPIO_EXTI_Callback+0x114>)
 8003580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	f3bf 8f6f 	isb	sy
}
 800358e:	bf00      	nop
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	40020800 	.word	0x40020800
 800359c:	20000ac4 	.word	0x20000ac4
 80035a0:	20000aac 	.word	0x20000aac
 80035a4:	e000ed04 	.word	0xe000ed04
 80035a8:	20000ab0 	.word	0x20000ab0
 80035ac:	20000ab4 	.word	0x20000ab4

080035b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80035b8:	2001      	movs	r0, #1
 80035ba:	f008 f881 	bl	800b6c0 <osDelay>
 80035be:	e7fb      	b.n	80035b8 <StartDefaultTask+0x8>

080035c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a08      	ldr	r2, [pc, #32]	; (80035f0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80035d2:	f000 ff3d 	bl	8004450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM4) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a06      	ldr	r2, [pc, #24]	; (80035f4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d102      	bne.n	80035e6 <HAL_TIM_PeriodElapsedCallback+0x26>
    MATRIX_TMR_OVF_ISR(htim);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7fe fa6f 	bl	8001ac4 <MATRIX_TMR_OVF_ISR>
  }
  /* USER CODE END Callback 1 */
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000800 	.word	0x40000800

080035f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035fc:	b672      	cpsid	i
}
 80035fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003600:	e7fe      	b.n	8003600 <Error_Handler+0x8>
	...

08003604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	4b12      	ldr	r3, [pc, #72]	; (8003658 <HAL_MspInit+0x54>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	4a11      	ldr	r2, [pc, #68]	; (8003658 <HAL_MspInit+0x54>)
 8003614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003618:	6453      	str	r3, [r2, #68]	; 0x44
 800361a:	4b0f      	ldr	r3, [pc, #60]	; (8003658 <HAL_MspInit+0x54>)
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003622:	607b      	str	r3, [r7, #4]
 8003624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	4b0b      	ldr	r3, [pc, #44]	; (8003658 <HAL_MspInit+0x54>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <HAL_MspInit+0x54>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
 8003636:	4b08      	ldr	r3, [pc, #32]	; (8003658 <HAL_MspInit+0x54>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003642:	2200      	movs	r2, #0
 8003644:	210f      	movs	r1, #15
 8003646:	f06f 0001 	mvn.w	r0, #1
 800364a:	f000 fffd 	bl	8004648 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800364e:	bf00      	nop
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	40023800 	.word	0x40023800

0800365c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b08a      	sub	sp, #40	; 0x28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003664:	f107 0314 	add.w	r3, r7, #20
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
 8003672:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a19      	ldr	r2, [pc, #100]	; (80036e0 <HAL_I2C_MspInit+0x84>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d12b      	bne.n	80036d6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <HAL_I2C_MspInit+0x88>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003686:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <HAL_I2C_MspInit+0x88>)
 8003688:	f043 0302 	orr.w	r3, r3, #2
 800368c:	6313      	str	r3, [r2, #48]	; 0x30
 800368e:	4b15      	ldr	r3, [pc, #84]	; (80036e4 <HAL_I2C_MspInit+0x88>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	f003 0302 	and.w	r3, r3, #2
 8003696:	613b      	str	r3, [r7, #16]
 8003698:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800369a:	23c0      	movs	r3, #192	; 0xc0
 800369c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800369e:	2312      	movs	r3, #18
 80036a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036a6:	2303      	movs	r3, #3
 80036a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036aa:	2304      	movs	r3, #4
 80036ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ae:	f107 0314 	add.w	r3, r7, #20
 80036b2:	4619      	mov	r1, r3
 80036b4:	480c      	ldr	r0, [pc, #48]	; (80036e8 <HAL_I2C_MspInit+0x8c>)
 80036b6:	f001 f883 	bl	80047c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_I2C_MspInit+0x88>)
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <HAL_I2C_MspInit+0x88>)
 80036c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036c8:	6413      	str	r3, [r2, #64]	; 0x40
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_I2C_MspInit+0x88>)
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036d6:	bf00      	nop
 80036d8:	3728      	adds	r7, #40	; 0x28
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40005400 	.word	0x40005400
 80036e4:	40023800 	.word	0x40023800
 80036e8:	40020400 	.word	0x40020400

080036ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036f4:	f107 030c 	add.w	r3, r7, #12
 80036f8:	2200      	movs	r2, #0
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	605a      	str	r2, [r3, #4]
 80036fe:	609a      	str	r2, [r3, #8]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0c      	ldr	r2, [pc, #48]	; (800373c <HAL_RTC_MspInit+0x50>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d111      	bne.n	8003732 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800370e:	2302      	movs	r3, #2
 8003710:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003716:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003718:	f107 030c 	add.w	r3, r7, #12
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fe7d 	bl	800641c <HAL_RCCEx_PeriphCLKConfig>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8003728:	f7ff ff66 	bl	80035f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <HAL_RTC_MspInit+0x54>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003732:	bf00      	nop
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	40002800 	.word	0x40002800
 8003740:	42470e3c 	.word	0x42470e3c

08003744 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	2200      	movs	r2, #0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	605a      	str	r2, [r3, #4]
 8003756:	609a      	str	r2, [r3, #8]
 8003758:	60da      	str	r2, [r3, #12]
 800375a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a32      	ldr	r2, [pc, #200]	; (800382c <HAL_SPI_MspInit+0xe8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d12c      	bne.n	80037c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	61bb      	str	r3, [r7, #24]
 800376a:	4b31      	ldr	r3, [pc, #196]	; (8003830 <HAL_SPI_MspInit+0xec>)
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	4a30      	ldr	r2, [pc, #192]	; (8003830 <HAL_SPI_MspInit+0xec>)
 8003770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003774:	6453      	str	r3, [r2, #68]	; 0x44
 8003776:	4b2e      	ldr	r3, [pc, #184]	; (8003830 <HAL_SPI_MspInit+0xec>)
 8003778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	61bb      	str	r3, [r7, #24]
 8003780:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <HAL_SPI_MspInit+0xec>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a29      	ldr	r2, [pc, #164]	; (8003830 <HAL_SPI_MspInit+0xec>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b27      	ldr	r3, [pc, #156]	; (8003830 <HAL_SPI_MspInit+0xec>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800379e:	23a0      	movs	r3, #160	; 0xa0
 80037a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037aa:	2303      	movs	r3, #3
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80037ae:	2305      	movs	r3, #5
 80037b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	4619      	mov	r1, r3
 80037b8:	481e      	ldr	r0, [pc, #120]	; (8003834 <HAL_SPI_MspInit+0xf0>)
 80037ba:	f001 f801 	bl	80047c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80037be:	e031      	b.n	8003824 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_SPI_MspInit+0xf4>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d12c      	bne.n	8003824 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <HAL_SPI_MspInit+0xec>)
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	4a17      	ldr	r2, [pc, #92]	; (8003830 <HAL_SPI_MspInit+0xec>)
 80037d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037d8:	6413      	str	r3, [r2, #64]	; 0x40
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_SPI_MspInit+0xec>)
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	613b      	str	r3, [r7, #16]
 80037e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	4b11      	ldr	r3, [pc, #68]	; (8003830 <HAL_SPI_MspInit+0xec>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	4a10      	ldr	r2, [pc, #64]	; (8003830 <HAL_SPI_MspInit+0xec>)
 80037f0:	f043 0302 	orr.w	r3, r3, #2
 80037f4:	6313      	str	r3, [r2, #48]	; 0x30
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <HAL_SPI_MspInit+0xec>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003802:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003808:	2302      	movs	r3, #2
 800380a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380c:	2300      	movs	r3, #0
 800380e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003814:	2305      	movs	r3, #5
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003818:	f107 031c 	add.w	r3, r7, #28
 800381c:	4619      	mov	r1, r3
 800381e:	4807      	ldr	r0, [pc, #28]	; (800383c <HAL_SPI_MspInit+0xf8>)
 8003820:	f000 ffce 	bl	80047c0 <HAL_GPIO_Init>
}
 8003824:	bf00      	nop
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013000 	.word	0x40013000
 8003830:	40023800 	.word	0x40023800
 8003834:	40020000 	.word	0x40020000
 8003838:	40003800 	.word	0x40003800
 800383c:	40020400 	.word	0x40020400

08003840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003850:	d116      	bne.n	8003880 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
 8003856:	4b24      	ldr	r3, [pc, #144]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a23      	ldr	r2, [pc, #140]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
 8003862:	4b21      	ldr	r3, [pc, #132]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2105      	movs	r1, #5
 8003872:	201c      	movs	r0, #28
 8003874:	f000 fee8 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003878:	201c      	movs	r0, #28
 800387a:	f000 ff01 	bl	8004680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800387e:	e02e      	b.n	80038de <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a19      	ldr	r2, [pc, #100]	; (80038ec <HAL_TIM_Base_MspInit+0xac>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d10e      	bne.n	80038a8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	4b16      	ldr	r3, [pc, #88]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 8003894:	f043 0302 	orr.w	r3, r3, #2
 8003898:	6413      	str	r3, [r2, #64]	; 0x40
 800389a:	4b13      	ldr	r3, [pc, #76]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
}
 80038a6:	e01a      	b.n	80038de <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM4)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a10      	ldr	r2, [pc, #64]	; (80038f0 <HAL_TIM_Base_MspInit+0xb0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d115      	bne.n	80038de <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80038b2:	2300      	movs	r3, #0
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	4a0b      	ldr	r2, [pc, #44]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	6413      	str	r3, [r2, #64]	; 0x40
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <HAL_TIM_Base_MspInit+0xa8>)
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 80038ce:	2200      	movs	r2, #0
 80038d0:	2105      	movs	r1, #5
 80038d2:	201e      	movs	r0, #30
 80038d4:	f000 feb8 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80038d8:	201e      	movs	r0, #30
 80038da:	f000 fed1 	bl	8004680 <HAL_NVIC_EnableIRQ>
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40023800 	.word	0x40023800
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800

080038f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b08a      	sub	sp, #40	; 0x28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0314 	add.w	r3, r7, #20
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
 800390a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <HAL_UART_MspInit+0x94>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d134      	bne.n	8003980 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003916:	2300      	movs	r3, #0
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	4b1c      	ldr	r3, [pc, #112]	; (800398c <HAL_UART_MspInit+0x98>)
 800391c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_UART_MspInit+0x98>)
 8003920:	f043 0310 	orr.w	r3, r3, #16
 8003924:	6453      	str	r3, [r2, #68]	; 0x44
 8003926:	4b19      	ldr	r3, [pc, #100]	; (800398c <HAL_UART_MspInit+0x98>)
 8003928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_UART_MspInit+0x98>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	4a14      	ldr	r2, [pc, #80]	; (800398c <HAL_UART_MspInit+0x98>)
 800393c:	f043 0301 	orr.w	r3, r3, #1
 8003940:	6313      	str	r3, [r2, #48]	; 0x30
 8003942:	4b12      	ldr	r3, [pc, #72]	; (800398c <HAL_UART_MspInit+0x98>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800394e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003954:	2302      	movs	r3, #2
 8003956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800395c:	2303      	movs	r3, #3
 800395e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003960:	2307      	movs	r3, #7
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4619      	mov	r1, r3
 800396a:	4809      	ldr	r0, [pc, #36]	; (8003990 <HAL_UART_MspInit+0x9c>)
 800396c:	f000 ff28 	bl	80047c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003970:	2200      	movs	r2, #0
 8003972:	2105      	movs	r1, #5
 8003974:	2025      	movs	r0, #37	; 0x25
 8003976:	f000 fe67 	bl	8004648 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800397a:	2025      	movs	r0, #37	; 0x25
 800397c:	f000 fe80 	bl	8004680 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003980:	bf00      	nop
 8003982:	3728      	adds	r7, #40	; 0x28
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40011000 	.word	0x40011000
 800398c:	40023800 	.word	0x40023800
 8003990:	40020000 	.word	0x40020000

08003994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80039a4:	2200      	movs	r2, #0
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	2019      	movs	r0, #25
 80039aa:	f000 fe4d 	bl	8004648 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80039ae:	2019      	movs	r0, #25
 80039b0:	f000 fe66 	bl	8004680 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <HAL_InitTick+0xa0>)
 80039ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039bc:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <HAL_InitTick+0xa0>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	6453      	str	r3, [r2, #68]	; 0x44
 80039c4:	4b1b      	ldr	r3, [pc, #108]	; (8003a34 <HAL_InitTick+0xa0>)
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80039d0:	f107 0210 	add.w	r2, r7, #16
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 fcec 	bl	80063b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80039e0:	f002 fcd6 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 80039e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <HAL_InitTick+0xa4>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	3b01      	subs	r3, #1
 80039f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_InitTick+0xa8>)
 80039f6:	4a12      	ldr	r2, [pc, #72]	; (8003a40 <HAL_InitTick+0xac>)
 80039f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_InitTick+0xa8>)
 80039fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a00:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_InitTick+0xa8>)
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003a08:	4b0c      	ldr	r3, [pc, #48]	; (8003a3c <HAL_InitTick+0xa8>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a0e:	4b0b      	ldr	r3, [pc, #44]	; (8003a3c <HAL_InitTick+0xa8>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003a14:	4809      	ldr	r0, [pc, #36]	; (8003a3c <HAL_InitTick+0xa8>)
 8003a16:	f003 fd5f 	bl	80074d8 <HAL_TIM_Base_Init>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d104      	bne.n	8003a2a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003a20:	4806      	ldr	r0, [pc, #24]	; (8003a3c <HAL_InitTick+0xa8>)
 8003a22:	f003 fe03 	bl	800762c <HAL_TIM_Base_Start_IT>
 8003a26:	4603      	mov	r3, r0
 8003a28:	e000      	b.n	8003a2c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3730      	adds	r7, #48	; 0x30
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	40023800 	.word	0x40023800
 8003a38:	431bde83 	.word	0x431bde83
 8003a3c:	20000ac8 	.word	0x20000ac8
 8003a40:	40010000 	.word	0x40010000

08003a44 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <SDTimer_Handler+0x40>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <SDTimer_Handler+0x1c>
    Timer1--;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <SDTimer_Handler+0x40>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b2da      	uxtb	r2, r3
 8003a5c:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <SDTimer_Handler+0x40>)
 8003a5e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <SDTimer_Handler+0x44>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d006      	beq.n	8003a78 <SDTimer_Handler+0x34>
    Timer2--;
 8003a6a:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <SDTimer_Handler+0x44>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <SDTimer_Handler+0x44>)
 8003a76:	701a      	strb	r2, [r3, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000b11 	.word	0x20000b11
 8003a88:	20000b12 	.word	0x20000b12

08003a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <NMI_Handler+0x4>

08003a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <HardFault_Handler+0x4>

08003a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <MemManage_Handler+0x4>

08003a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa2:	e7fe      	b.n	8003aa2 <BusFault_Handler+0x4>

08003aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <UsageFault_Handler+0x4>

08003aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH1_Pin);
 8003abc:	2002      	movs	r0, #2
 8003abe:	f001 f835 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003ac2:	bf00      	nop
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003ac6:	b580      	push	{r7, lr}
 8003ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH2_Pin);
 8003aca:	2004      	movs	r0, #4
 8003acc:	f001 f82e 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PUSH3_Pin);
 8003ad8:	2008      	movs	r0, #8
 8003ada:	f001 f827 	bl	8004b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ae8:	4802      	ldr	r0, [pc, #8]	; (8003af4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003aea:	f003 fe01 	bl	80076f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003aee:	bf00      	nop
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000ac8 	.word	0x20000ac8

08003af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003afc:	480a      	ldr	r0, [pc, #40]	; (8003b28 <TIM2_IRQHandler+0x30>)
 8003afe:	f003 fdf7 	bl	80076f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  FatFsCnt++;
 8003b02:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <TIM2_IRQHandler+0x34>)
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b07      	ldr	r3, [pc, #28]	; (8003b2c <TIM2_IRQHandler+0x34>)
 8003b0e:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10)
 8003b10:	4b06      	ldr	r3, [pc, #24]	; (8003b2c <TIM2_IRQHandler+0x34>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b09      	cmp	r3, #9
 8003b18:	d904      	bls.n	8003b24 <TIM2_IRQHandler+0x2c>
  {
    FatFsCnt = 0;
 8003b1a:	4b04      	ldr	r3, [pc, #16]	; (8003b2c <TIM2_IRQHandler+0x34>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	701a      	strb	r2, [r3, #0]
    SDTimer_Handler();
 8003b20:	f7ff ff90 	bl	8003a44 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8003b24:	bf00      	nop
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	20000918 	.word	0x20000918
 8003b2c:	20000b10 	.word	0x20000b10

08003b30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003b34:	4802      	ldr	r0, [pc, #8]	; (8003b40 <TIM4_IRQHandler+0x10>)
 8003b36:	f003 fddb 	bl	80076f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	200009a8 	.word	0x200009a8

08003b44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003b48:	4802      	ldr	r0, [pc, #8]	; (8003b54 <USART1_IRQHandler+0x10>)
 8003b4a:	f004 faa9 	bl	80080a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200009f0 	.word	0x200009f0

08003b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b086      	sub	sp, #24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <_sbrk+0x5c>)
 8003b62:	4b15      	ldr	r3, [pc, #84]	; (8003bb8 <_sbrk+0x60>)
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b6c:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <_sbrk+0x64>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d102      	bne.n	8003b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <_sbrk+0x64>)
 8003b76:	4a12      	ldr	r2, [pc, #72]	; (8003bc0 <_sbrk+0x68>)
 8003b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7a:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <_sbrk+0x64>)
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4413      	add	r3, r2
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d207      	bcs.n	8003b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b88:	f00a f94c 	bl	800de24 <__errno>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	220c      	movs	r2, #12
 8003b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295
 8003b96:	e009      	b.n	8003bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b98:	4b08      	ldr	r3, [pc, #32]	; (8003bbc <_sbrk+0x64>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b9e:	4b07      	ldr	r3, [pc, #28]	; (8003bbc <_sbrk+0x64>)
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4a05      	ldr	r2, [pc, #20]	; (8003bbc <_sbrk+0x64>)
 8003ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003baa:	68fb      	ldr	r3, [r7, #12]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20018000 	.word	0x20018000
 8003bb8:	00000400 	.word	0x00000400
 8003bbc:	20000b14 	.word	0x20000b14
 8003bc0:	20004b50 	.word	0x20004b50

08003bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <SystemInit+0x20>)
 8003bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bce:	4a05      	ldr	r2, [pc, #20]	; (8003be4 <SystemInit+0x20>)
 8003bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bd8:	bf00      	nop
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000ed00 	.word	0xe000ed00

08003be8 <tarea_bh1750>:
extern char mensaje_sd[];
extern uint32_t timer_msg_sd;


void tarea_bh1750( void *pvParameters )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
	uint8_t i =0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
	for (;;){
		BH1750_get_lumen(test_dev);
 8003bf4:	4b1c      	ldr	r3, [pc, #112]	; (8003c68 <tarea_bh1750+0x80>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd f995 	bl	8000f28 <BH1750_get_lumen>
		if (test_dev->value>1000){
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	; (8003c68 <tarea_bh1750+0x80>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	895b      	ldrh	r3, [r3, #10]
 8003c04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c08:	d902      	bls.n	8003c10 <tarea_bh1750+0x28>
			  i = 10;
 8003c0a:	230a      	movs	r3, #10
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e021      	b.n	8003c54 <tarea_bh1750+0x6c>
		  }
		  else if (test_dev->value>200){
 8003c10:	4b15      	ldr	r3, [pc, #84]	; (8003c68 <tarea_bh1750+0x80>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	895b      	ldrh	r3, [r3, #10]
 8003c16:	2bc8      	cmp	r3, #200	; 0xc8
 8003c18:	d902      	bls.n	8003c20 <tarea_bh1750+0x38>
			  i = 5;
 8003c1a:	2305      	movs	r3, #5
 8003c1c:	73fb      	strb	r3, [r7, #15]
 8003c1e:	e019      	b.n	8003c54 <tarea_bh1750+0x6c>
		  }
		  else if (test_dev->value>100){
 8003c20:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <tarea_bh1750+0x80>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	895b      	ldrh	r3, [r3, #10]
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d902      	bls.n	8003c30 <tarea_bh1750+0x48>
				  i = 3;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	73fb      	strb	r3, [r7, #15]
 8003c2e:	e011      	b.n	8003c54 <tarea_bh1750+0x6c>
			  }
		  else if (test_dev->value>50){
 8003c30:	4b0d      	ldr	r3, [pc, #52]	; (8003c68 <tarea_bh1750+0x80>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	895b      	ldrh	r3, [r3, #10]
 8003c36:	2b32      	cmp	r3, #50	; 0x32
 8003c38:	d902      	bls.n	8003c40 <tarea_bh1750+0x58>
			  i = 2;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e009      	b.n	8003c54 <tarea_bh1750+0x6c>
		  }
		  else if (test_dev->value>20){
 8003c40:	4b09      	ldr	r3, [pc, #36]	; (8003c68 <tarea_bh1750+0x80>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	895b      	ldrh	r3, [r3, #10]
 8003c46:	2b14      	cmp	r3, #20
 8003c48:	d902      	bls.n	8003c50 <tarea_bh1750+0x68>
			  i = 1;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
 8003c4e:	e001      	b.n	8003c54 <tarea_bh1750+0x6c>
		  }
		  else {
			  i = 0;
 8003c50:	2300      	movs	r3, #0
 8003c52:	73fb      	strb	r3, [r7, #15]
		  }
		DOT_MATRIX_Brightness(i);
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd fba2 	bl	80013a0 <DOT_MATRIX_Brightness>
		vTaskDelay(2000);
 8003c5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003c60:	f008 fe32 	bl	800c8c8 <vTaskDelay>
		BH1750_get_lumen(test_dev);
 8003c64:	e7c6      	b.n	8003bf4 <tarea_bh1750+0xc>
 8003c66:	bf00      	nop
 8003c68:	20000ac0 	.word	0x20000ac0

08003c6c <tarea_cartel>:
		}

}

void tarea_cartel( void *pvParameters )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
	uint8_t i =0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	73fb      	strb	r3, [r7, #15]

	MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003c78:	4833      	ldr	r0, [pc, #204]	; (8003d48 <tarea_cartel+0xdc>)
 8003c7a:	f7fc fabb 	bl	80001f4 <strlen>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3302      	adds	r3, #2
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	461a      	mov	r2, r3
 8003c88:	492f      	ldr	r1, [pc, #188]	; (8003d48 <tarea_cartel+0xdc>)
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	f7fd feec 	bl	8001a68 <MATRIX_DisplayMessage>
	vTaskDelay(10000);
 8003c90:	f242 7010 	movw	r0, #10000	; 0x2710
 8003c94:	f008 fe18 	bl	800c8c8 <vTaskDelay>

	for (;;){
		if (flag_rutina!=0) xSemaphoreTake(sem_rutina_normal,HAL_MAX_DELAY);
 8003c98:	4b2c      	ldr	r3, [pc, #176]	; (8003d4c <tarea_cartel+0xe0>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d006      	beq.n	8003cae <tarea_cartel+0x42>
 8003ca0:	4b2b      	ldr	r3, [pc, #172]	; (8003d50 <tarea_cartel+0xe4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f008 f961 	bl	800bf70 <xQueueSemaphoreTake>

		memset(MSG,'\0',strlen(MSG));
 8003cae:	4826      	ldr	r0, [pc, #152]	; (8003d48 <tarea_cartel+0xdc>)
 8003cb0:	f7fc faa0 	bl	80001f4 <strlen>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4823      	ldr	r0, [pc, #140]	; (8003d48 <tarea_cartel+0xdc>)
 8003cbc:	f00a f8f4 	bl	800dea8 <memset>
		DOT_MATRIX_Clear(&hspi1);
 8003cc0:	4824      	ldr	r0, [pc, #144]	; (8003d54 <tarea_cartel+0xe8>)
 8003cc2:	f7fd fdff 	bl	80018c4 <DOT_MATRIX_Clear>

		//if(i==-1)

		if (i==0)
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d105      	bne.n	8003cd8 <tarea_cartel+0x6c>
			sprintf(MSG,"%s ",(char *)Cartel_Led.fecha);
 8003ccc:	4a22      	ldr	r2, [pc, #136]	; (8003d58 <tarea_cartel+0xec>)
 8003cce:	4923      	ldr	r1, [pc, #140]	; (8003d5c <tarea_cartel+0xf0>)
 8003cd0:	481d      	ldr	r0, [pc, #116]	; (8003d48 <tarea_cartel+0xdc>)
 8003cd2:	f00a fa61 	bl	800e198 <siprintf>
 8003cd6:	e010      	b.n	8003cfa <tarea_cartel+0x8e>

		else if (i==1)
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <tarea_cartel+0x7e>
			sprintf(MSG,"%s ",(char *)Cartel_Led.hora);
 8003cde:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <tarea_cartel+0xf4>)
 8003ce0:	491e      	ldr	r1, [pc, #120]	; (8003d5c <tarea_cartel+0xf0>)
 8003ce2:	4819      	ldr	r0, [pc, #100]	; (8003d48 <tarea_cartel+0xdc>)
 8003ce4:	f00a fa58 	bl	800e198 <siprintf>
 8003ce8:	e007      	b.n	8003cfa <tarea_cartel+0x8e>

		else if (i==2)
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b02      	cmp	r3, #2
 8003cee:	d104      	bne.n	8003cfa <tarea_cartel+0x8e>
			sprintf(MSG,"%s ",(char *)Cartel_Led.temp);
 8003cf0:	4a1c      	ldr	r2, [pc, #112]	; (8003d64 <tarea_cartel+0xf8>)
 8003cf2:	491a      	ldr	r1, [pc, #104]	; (8003d5c <tarea_cartel+0xf0>)
 8003cf4:	4814      	ldr	r0, [pc, #80]	; (8003d48 <tarea_cartel+0xdc>)
 8003cf6:	f00a fa4f 	bl	800e198 <siprintf>

		MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003cfa:	4813      	ldr	r0, [pc, #76]	; (8003d48 <tarea_cartel+0xdc>)
 8003cfc:	f7fc fa7a 	bl	80001f4 <strlen>
 8003d00:	4603      	mov	r3, r0
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	3302      	adds	r3, #2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	461a      	mov	r2, r3
 8003d0a:	490f      	ldr	r1, [pc, #60]	; (8003d48 <tarea_cartel+0xdc>)
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fd feab 	bl	8001a68 <MATRIX_DisplayMessage>
		i++;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	3301      	adds	r3, #1
 8003d16:	73fb      	strb	r3, [r7, #15]
		i%=3;
 8003d18:	7bfa      	ldrb	r2, [r7, #15]
 8003d1a:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <tarea_cartel+0xfc>)
 8003d1c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d20:	0859      	lsrs	r1, r3, #1
 8003d22:	460b      	mov	r3, r1
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	440b      	add	r3, r1
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	73fb      	strb	r3, [r7, #15]
		if(i!=0) vTaskDelay(20000);
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d004      	beq.n	8003d3c <tarea_cartel+0xd0>
 8003d32:	f644 6020 	movw	r0, #20000	; 0x4e20
 8003d36:	f008 fdc7 	bl	800c8c8 <vTaskDelay>
 8003d3a:	e7ad      	b.n	8003c98 <tarea_cartel+0x2c>
		else vTaskDelay(24000);
 8003d3c:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8003d40:	f008 fdc2 	bl	800c8c8 <vTaskDelay>
		if (flag_rutina!=0) xSemaphoreTake(sem_rutina_normal,HAL_MAX_DELAY);
 8003d44:	e7a8      	b.n	8003c98 <tarea_cartel+0x2c>
 8003d46:	bf00      	nop
 8003d48:	200001e4 	.word	0x200001e4
 8003d4c:	20000b36 	.word	0x20000b36
 8003d50:	20000ab8 	.word	0x20000ab8
 8003d54:	20000868 	.word	0x20000868
 8003d58:	20000a38 	.word	0x20000a38
 8003d5c:	0800eb64 	.word	0x0800eb64
 8003d60:	20000a45 	.word	0x20000a45
 8003d64:	20000a53 	.word	0x20000a53
 8003d68:	aaaaaaab 	.word	0xaaaaaaab

08003d6c <tarea_acciones_pulsador>:
		}

}

void tarea_acciones_pulsador (void *p)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b09c      	sub	sp, #112	; 0x70
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
	uint8_t fecha_ant[13]="00-00-0000";
 8003d74:	4aa2      	ldr	r2, [pc, #648]	; (8004000 <tarea_acciones_pulsador+0x294>)
 8003d76:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003d7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d7c:	c303      	stmia	r3!, {r0, r1}
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	3302      	adds	r3, #2
 8003d82:	0c12      	lsrs	r2, r2, #16
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	f107 036b 	add.w	r3, r7, #107	; 0x6b
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	801a      	strh	r2, [r3, #0]
	uint8_t hora_ant[8]="11:11";
 8003d8e:	4a9d      	ldr	r2, [pc, #628]	; (8004004 <tarea_acciones_pulsador+0x298>)
 8003d90:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003d94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d98:	6018      	str	r0, [r3, #0]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	8019      	strh	r1, [r3, #0]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint8_t temp_ant[13]="TEMP: 12 C";
 8003da4:	4a98      	ldr	r2, [pc, #608]	; (8004008 <tarea_acciones_pulsador+0x29c>)
 8003da6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003daa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003dac:	c303      	stmia	r3!, {r0, r1}
 8003dae:	801a      	strh	r2, [r3, #0]
 8003db0:	3302      	adds	r3, #2
 8003db2:	0c12      	lsrs	r2, r2, #16
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	f107 0353 	add.w	r3, r7, #83	; 0x53
 8003dba:	2200      	movs	r2, #0
 8003dbc:	801a      	strh	r2, [r3, #0]
	uint8_t msj_ant[32],msj_ant_sd[32];
	while(1)
	{
		if (!flag_rutina) xSemaphoreTake(sem_rutina_alt,HAL_MAX_DELAY);
 8003dbe:	4b93      	ldr	r3, [pc, #588]	; (800400c <tarea_acciones_pulsador+0x2a0>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <tarea_acciones_pulsador+0x68>
 8003dc6:	4b92      	ldr	r3, [pc, #584]	; (8004010 <tarea_acciones_pulsador+0x2a4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f04f 31ff 	mov.w	r1, #4294967295
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f008 f8ce 	bl	800bf70 <xQueueSemaphoreTake>

		if(flag_rutina==1)
 8003dd4:	4b8d      	ldr	r3, [pc, #564]	; (800400c <tarea_acciones_pulsador+0x2a0>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d12d      	bne.n	8003e38 <tarea_acciones_pulsador+0xcc>
		{
			if(strcmp((char*)fecha_ant,(char *)Cartel_Led.fecha)!=0)
 8003ddc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003de0:	498c      	ldr	r1, [pc, #560]	; (8004014 <tarea_acciones_pulsador+0x2a8>)
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fc f9fc 	bl	80001e0 <strcmp>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f000 8103 	beq.w	8003ff6 <tarea_acciones_pulsador+0x28a>
			{
				memset(MSG,'\0',strlen(MSG));
 8003df0:	4889      	ldr	r0, [pc, #548]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003df2:	f7fc f9ff 	bl	80001f4 <strlen>
 8003df6:	4603      	mov	r3, r0
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2100      	movs	r1, #0
 8003dfc:	4886      	ldr	r0, [pc, #536]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003dfe:	f00a f853 	bl	800dea8 <memset>
				DOT_MATRIX_Clear(&hspi1);
 8003e02:	4886      	ldr	r0, [pc, #536]	; (800401c <tarea_acciones_pulsador+0x2b0>)
 8003e04:	f7fd fd5e 	bl	80018c4 <DOT_MATRIX_Clear>
				sprintf(MSG,"%s ",(char *)Cartel_Led.fecha);
 8003e08:	4a82      	ldr	r2, [pc, #520]	; (8004014 <tarea_acciones_pulsador+0x2a8>)
 8003e0a:	4985      	ldr	r1, [pc, #532]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003e0c:	4882      	ldr	r0, [pc, #520]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e0e:	f00a f9c3 	bl	800e198 <siprintf>
				strcpy((char*)fecha_ant,(char *)Cartel_Led.fecha);
 8003e12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8003e16:	497f      	ldr	r1, [pc, #508]	; (8004014 <tarea_acciones_pulsador+0x2a8>)
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00a f9dd 	bl	800e1d8 <strcpy>
				MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003e1e:	487e      	ldr	r0, [pc, #504]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e20:	f7fc f9e8 	bl	80001f4 <strlen>
 8003e24:	4603      	mov	r3, r0
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	3302      	adds	r3, #2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	497a      	ldr	r1, [pc, #488]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e30:	2000      	movs	r0, #0
 8003e32:	f7fd fe19 	bl	8001a68 <MATRIX_DisplayMessage>
 8003e36:	e0de      	b.n	8003ff6 <tarea_acciones_pulsador+0x28a>
			}
		}
		else if(flag_rutina==2)
 8003e38:	4b74      	ldr	r3, [pc, #464]	; (800400c <tarea_acciones_pulsador+0x2a0>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d12d      	bne.n	8003e9c <tarea_acciones_pulsador+0x130>
		{
			if(strcmp((char*)hora_ant,(char *)Cartel_Led.hora)!=0)
 8003e40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e44:	4977      	ldr	r1, [pc, #476]	; (8004024 <tarea_acciones_pulsador+0x2b8>)
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fc f9ca 	bl	80001e0 <strcmp>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80d1 	beq.w	8003ff6 <tarea_acciones_pulsador+0x28a>
			{
				memset(MSG,'\0',strlen(MSG));
 8003e54:	4870      	ldr	r0, [pc, #448]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e56:	f7fc f9cd 	bl	80001f4 <strlen>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2100      	movs	r1, #0
 8003e60:	486d      	ldr	r0, [pc, #436]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e62:	f00a f821 	bl	800dea8 <memset>
				DOT_MATRIX_Clear(&hspi1);
 8003e66:	486d      	ldr	r0, [pc, #436]	; (800401c <tarea_acciones_pulsador+0x2b0>)
 8003e68:	f7fd fd2c 	bl	80018c4 <DOT_MATRIX_Clear>
				sprintf(MSG,"%s ",(char *)Cartel_Led.hora);
 8003e6c:	4a6d      	ldr	r2, [pc, #436]	; (8004024 <tarea_acciones_pulsador+0x2b8>)
 8003e6e:	496c      	ldr	r1, [pc, #432]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003e70:	4869      	ldr	r0, [pc, #420]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e72:	f00a f991 	bl	800e198 <siprintf>
				strcpy((char*)hora_ant,(char *)Cartel_Led.hora);
 8003e76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003e7a:	496a      	ldr	r1, [pc, #424]	; (8004024 <tarea_acciones_pulsador+0x2b8>)
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00a f9ab 	bl	800e1d8 <strcpy>
				MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003e82:	4865      	ldr	r0, [pc, #404]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e84:	f7fc f9b6 	bl	80001f4 <strlen>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3302      	adds	r3, #2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	461a      	mov	r2, r3
 8003e92:	4961      	ldr	r1, [pc, #388]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003e94:	2000      	movs	r0, #0
 8003e96:	f7fd fde7 	bl	8001a68 <MATRIX_DisplayMessage>
 8003e9a:	e0ac      	b.n	8003ff6 <tarea_acciones_pulsador+0x28a>
			}
		}
		else if(flag_rutina==3)
 8003e9c:	4b5b      	ldr	r3, [pc, #364]	; (800400c <tarea_acciones_pulsador+0x2a0>)
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	2b03      	cmp	r3, #3
 8003ea2:	d12d      	bne.n	8003f00 <tarea_acciones_pulsador+0x194>
		{
			if(strcmp((char*)temp_ant,(char *)Cartel_Led.temp)!=0)
 8003ea4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ea8:	495f      	ldr	r1, [pc, #380]	; (8004028 <tarea_acciones_pulsador+0x2bc>)
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f7fc f998 	bl	80001e0 <strcmp>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	f000 809f 	beq.w	8003ff6 <tarea_acciones_pulsador+0x28a>
			{
				memset(MSG,'\0',strlen(MSG));
 8003eb8:	4857      	ldr	r0, [pc, #348]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003eba:	f7fc f99b 	bl	80001f4 <strlen>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4854      	ldr	r0, [pc, #336]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003ec6:	f009 ffef 	bl	800dea8 <memset>
				DOT_MATRIX_Clear(&hspi1);
 8003eca:	4854      	ldr	r0, [pc, #336]	; (800401c <tarea_acciones_pulsador+0x2b0>)
 8003ecc:	f7fd fcfa 	bl	80018c4 <DOT_MATRIX_Clear>
				sprintf(MSG,"%s ",(char *)Cartel_Led.temp);
 8003ed0:	4a55      	ldr	r2, [pc, #340]	; (8004028 <tarea_acciones_pulsador+0x2bc>)
 8003ed2:	4953      	ldr	r1, [pc, #332]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003ed4:	4850      	ldr	r0, [pc, #320]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003ed6:	f00a f95f 	bl	800e198 <siprintf>
				strcpy((char*)temp_ant,(char *)Cartel_Led.temp);
 8003eda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ede:	4952      	ldr	r1, [pc, #328]	; (8004028 <tarea_acciones_pulsador+0x2bc>)
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f00a f979 	bl	800e1d8 <strcpy>
				MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003ee6:	484c      	ldr	r0, [pc, #304]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003ee8:	f7fc f984 	bl	80001f4 <strlen>
 8003eec:	4603      	mov	r3, r0
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	3302      	adds	r3, #2
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	4948      	ldr	r1, [pc, #288]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fd fdb5 	bl	8001a68 <MATRIX_DisplayMessage>
 8003efe:	e07a      	b.n	8003ff6 <tarea_acciones_pulsador+0x28a>
			}
		}
		else if(flag_rutina==4)
 8003f00:	4b42      	ldr	r3, [pc, #264]	; (800400c <tarea_acciones_pulsador+0x2a0>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d139      	bne.n	8003f7c <tarea_acciones_pulsador+0x210>
		{
			if(strcmp((char*)msj_ant,(char *)Cartel_Led.mensaje)!=0)
 8003f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f0c:	4947      	ldr	r1, [pc, #284]	; (800402c <tarea_acciones_pulsador+0x2c0>)
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fc f966 	bl	80001e0 <strcmp>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06d      	beq.n	8003ff6 <tarea_acciones_pulsador+0x28a>
			{
				memset(MSG,'\0',strlen(MSG));
 8003f1a:	483f      	ldr	r0, [pc, #252]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003f1c:	f7fc f96a 	bl	80001f4 <strlen>
 8003f20:	4603      	mov	r3, r0
 8003f22:	461a      	mov	r2, r3
 8003f24:	2100      	movs	r1, #0
 8003f26:	483c      	ldr	r0, [pc, #240]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003f28:	f009 ffbe 	bl	800dea8 <memset>
				memset((char*) msj_ant, '\0',strlen((char *)msj_ant));
 8003f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f30:	4618      	mov	r0, r3
 8003f32:	f7fc f95f 	bl	80001f4 <strlen>
 8003f36:	4602      	mov	r2, r0
 8003f38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f009 ffb2 	bl	800dea8 <memset>
				DOT_MATRIX_Clear(&hspi1);
 8003f44:	4835      	ldr	r0, [pc, #212]	; (800401c <tarea_acciones_pulsador+0x2b0>)
 8003f46:	f7fd fcbd 	bl	80018c4 <DOT_MATRIX_Clear>
				sprintf(MSG,"%s ",(char *)Cartel_Led.mensaje);
 8003f4a:	4a38      	ldr	r2, [pc, #224]	; (800402c <tarea_acciones_pulsador+0x2c0>)
 8003f4c:	4934      	ldr	r1, [pc, #208]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003f4e:	4832      	ldr	r0, [pc, #200]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003f50:	f00a f922 	bl	800e198 <siprintf>
				sprintf((char*)msj_ant,"%s ",(char *)Cartel_Led.mensaje);
 8003f54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f58:	4a34      	ldr	r2, [pc, #208]	; (800402c <tarea_acciones_pulsador+0x2c0>)
 8003f5a:	4931      	ldr	r1, [pc, #196]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f00a f91b 	bl	800e198 <siprintf>
				//strcpy((char*)msj_ant,(char *)Cartel_Led.mensaje);
				MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003f62:	482d      	ldr	r0, [pc, #180]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003f64:	f7fc f946 	bl	80001f4 <strlen>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	461a      	mov	r2, r3
 8003f72:	4929      	ldr	r1, [pc, #164]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7fd fd77 	bl	8001a68 <MATRIX_DisplayMessage>
 8003f7a:	e03c      	b.n	8003ff6 <tarea_acciones_pulsador+0x28a>
			}
		}
		else if(flag_rutina==5)
 8003f7c:	4b23      	ldr	r3, [pc, #140]	; (800400c <tarea_acciones_pulsador+0x2a0>)
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b05      	cmp	r3, #5
 8003f82:	d138      	bne.n	8003ff6 <tarea_acciones_pulsador+0x28a>
		{
			if(strcmp((char*)msj_ant_sd,(char*)Cartel_Led.mensaje_sd)!=0)
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4929      	ldr	r1, [pc, #164]	; (8004030 <tarea_acciones_pulsador+0x2c4>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fc f928 	bl	80001e0 <strcmp>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02f      	beq.n	8003ff6 <tarea_acciones_pulsador+0x28a>
			{
				memset(MSG,'\0',strlen(MSG));
 8003f96:	4820      	ldr	r0, [pc, #128]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003f98:	f7fc f92c 	bl	80001f4 <strlen>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	481d      	ldr	r0, [pc, #116]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003fa4:	f009 ff80 	bl	800dea8 <memset>
				memset((char*) msj_ant_sd,'\0',strlen((char*)msj_ant_sd));
 8003fa8:	f107 0308 	add.w	r3, r7, #8
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7fc f921 	bl	80001f4 <strlen>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	f107 0308 	add.w	r3, r7, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f009 ff74 	bl	800dea8 <memset>
				DOT_MATRIX_Clear(&hspi1);
 8003fc0:	4816      	ldr	r0, [pc, #88]	; (800401c <tarea_acciones_pulsador+0x2b0>)
 8003fc2:	f7fd fc7f 	bl	80018c4 <DOT_MATRIX_Clear>
				sprintf(MSG,"%s ",(char*)Cartel_Led.mensaje_sd);
 8003fc6:	4a1a      	ldr	r2, [pc, #104]	; (8004030 <tarea_acciones_pulsador+0x2c4>)
 8003fc8:	4915      	ldr	r1, [pc, #84]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003fca:	4813      	ldr	r0, [pc, #76]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003fcc:	f00a f8e4 	bl	800e198 <siprintf>
				sprintf((char*)msj_ant_sd,"%s ",(char*)Cartel_Led.mensaje_sd);
 8003fd0:	f107 0308 	add.w	r3, r7, #8
 8003fd4:	4a16      	ldr	r2, [pc, #88]	; (8004030 <tarea_acciones_pulsador+0x2c4>)
 8003fd6:	4912      	ldr	r1, [pc, #72]	; (8004020 <tarea_acciones_pulsador+0x2b4>)
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f00a f8dd 	bl	800e198 <siprintf>
				MATRIX_DisplayMessage(MATRIX_DISPLAY_UNIT1, MSG, strlen(MSG)+2);
 8003fde:	480e      	ldr	r0, [pc, #56]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003fe0:	f7fc f908 	bl	80001f4 <strlen>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	3302      	adds	r3, #2
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	490a      	ldr	r1, [pc, #40]	; (8004018 <tarea_acciones_pulsador+0x2ac>)
 8003ff0:	2000      	movs	r0, #0
 8003ff2:	f7fd fd39 	bl	8001a68 <MATRIX_DisplayMessage>
			}
		}
		vTaskDelay(500);
 8003ff6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003ffa:	f008 fc65 	bl	800c8c8 <vTaskDelay>
		if (!flag_rutina) xSemaphoreTake(sem_rutina_alt,HAL_MAX_DELAY);
 8003ffe:	e6de      	b.n	8003dbe <tarea_acciones_pulsador+0x52>
 8004000:	0800eb68 	.word	0x0800eb68
 8004004:	0800eb78 	.word	0x0800eb78
 8004008:	0800eb80 	.word	0x0800eb80
 800400c:	20000b36 	.word	0x20000b36
 8004010:	20000abc 	.word	0x20000abc
 8004014:	20000a38 	.word	0x20000a38
 8004018:	200001e4 	.word	0x200001e4
 800401c:	20000868 	.word	0x20000868
 8004020:	0800eb64 	.word	0x0800eb64
 8004024:	20000a45 	.word	0x20000a45
 8004028:	20000a53 	.word	0x20000a53
 800402c:	20000a6c 	.word	0x20000a6c
 8004030:	20000a8a 	.word	0x20000a8a

08004034 <tarea_uart>:
	}
}

void tarea_uart (void *p)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	//Recibo en forma de interrupcion una cantidad estimada de datos o hasta que llega a un estado idle (hay '\0' - corta antes)
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRx, sizeof(dataRx));
 800403c:	221e      	movs	r2, #30
 800403e:	4919      	ldr	r1, [pc, #100]	; (80040a4 <tarea_uart+0x70>)
 8004040:	4819      	ldr	r0, [pc, #100]	; (80040a8 <tarea_uart+0x74>)
 8004042:	f003 ffc8 	bl	8007fd6 <HAL_UARTEx_ReceiveToIdle_IT>
	while(1)
	{
		xSemaphoreTake(sem_rx,portMAX_DELAY);
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <tarea_uart+0x78>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f04f 31ff 	mov.w	r1, #4294967295
 800404e:	4618      	mov	r0, r3
 8004050:	f007 ff8e 	bl	800bf70 <xQueueSemaphoreTake>

		if(!strncmp((char*)dataRx,"ATY",3))
 8004054:	2203      	movs	r2, #3
 8004056:	4916      	ldr	r1, [pc, #88]	; (80040b0 <tarea_uart+0x7c>)
 8004058:	4812      	ldr	r0, [pc, #72]	; (80040a4 <tarea_uart+0x70>)
 800405a:	f00a f8c5 	bl	800e1e8 <strncmp>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <tarea_uart+0x3c>
		{
				f_comandos(dataRx[3]);//Acá podemos enviar unos comandos que puede servir como mantenimiento (sincronización, chequear retorno)
 8004064:	4b0f      	ldr	r3, [pc, #60]	; (80040a4 <tarea_uart+0x70>)
 8004066:	78db      	ldrb	r3, [r3, #3]
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc ff6d 	bl	8000f48 <f_comandos>
 800406e:	e00e      	b.n	800408e <tarea_uart+0x5a>
		}

			else
			{
				memset((char*)Cartel_Led.mensaje,'\0',LONG_DATOS_BT); //borro el mensaje guardado en el struct del cartel
 8004070:	221e      	movs	r2, #30
 8004072:	2100      	movs	r1, #0
 8004074:	480f      	ldr	r0, [pc, #60]	; (80040b4 <tarea_uart+0x80>)
 8004076:	f009 ff17 	bl	800dea8 <memset>
				strncpy((char*)Cartel_Led.mensaje,(char*)dataRx,strlen((char*)dataRx)-2); //cargo un nuevo mensaje y le quito el \r y \n
 800407a:	480a      	ldr	r0, [pc, #40]	; (80040a4 <tarea_uart+0x70>)
 800407c:	f7fc f8ba 	bl	80001f4 <strlen>
 8004080:	4603      	mov	r3, r0
 8004082:	3b02      	subs	r3, #2
 8004084:	461a      	mov	r2, r3
 8004086:	4907      	ldr	r1, [pc, #28]	; (80040a4 <tarea_uart+0x70>)
 8004088:	480a      	ldr	r0, [pc, #40]	; (80040b4 <tarea_uart+0x80>)
 800408a:	f00a f8c1 	bl	800e210 <strncpy>
			}
		memset((char*)dataRx,'\0',LONG_DATOS_BT); //borro el buffer de recepcion
 800408e:	221e      	movs	r2, #30
 8004090:	2100      	movs	r1, #0
 8004092:	4804      	ldr	r0, [pc, #16]	; (80040a4 <tarea_uart+0x70>)
 8004094:	f009 ff08 	bl	800dea8 <memset>
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, dataRx, sizeof(dataRx)); //habilito la uart para recibir de nuevo
 8004098:	221e      	movs	r2, #30
 800409a:	4902      	ldr	r1, [pc, #8]	; (80040a4 <tarea_uart+0x70>)
 800409c:	4802      	ldr	r0, [pc, #8]	; (80040a8 <tarea_uart+0x74>)
 800409e:	f003 ff9a 	bl	8007fd6 <HAL_UARTEx_ReceiveToIdle_IT>
		xSemaphoreTake(sem_rx,portMAX_DELAY);
 80040a2:	e7d0      	b.n	8004046 <tarea_uart+0x12>
 80040a4:	20000b18 	.word	0x20000b18
 80040a8:	200009f0 	.word	0x200009f0
 80040ac:	20000aa8 	.word	0x20000aa8
 80040b0:	0800eb90 	.word	0x0800eb90
 80040b4:	20000a6c 	.word	0x20000a6c

080040b8 <tarea_actualizarRTC>:
	}
}

void tarea_actualizarRTC (void *p)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Actualizar_FechaHora();
 80040c0:	f7fd fde8 	bl	8001c94 <Actualizar_FechaHora>
		vTaskDelay(1000/portTICK_PERIOD_MS);
 80040c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040c8:	f008 fbfe 	bl	800c8c8 <vTaskDelay>
		Actualizar_FechaHora();
 80040cc:	e7f8      	b.n	80040c0 <tarea_actualizarRTC+0x8>
	...

080040d0 <tarea_pulsador1>:
	}
}

void tarea_pulsador1 (void *p)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
	uint8_t veces_push1=0;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
	uint8_t flag_rutina_ant=0;
 80040dc:	2300      	movs	r3, #0
 80040de:	73bb      	strb	r3, [r7, #14]
	while(1)
	{
		xSemaphoreTake(sem_push1,portMAX_DELAY);
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <tarea_pulsador1+0xa0>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f04f 31ff 	mov.w	r1, #4294967295
 80040e8:	4618      	mov	r0, r3
 80040ea:	f007 ff41 	bl	800bf70 <xQueueSemaphoreTake>
		//memset(MSG,'\0',strlen(MSG));
		//DOT_MATRIX_Clear(&hspi1);
		if(flag_rutina_ant!=flag_rutina) veces_push1=0;
 80040ee:	4b21      	ldr	r3, [pc, #132]	; (8004174 <tarea_pulsador1+0xa4>)
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	7bba      	ldrb	r2, [r7, #14]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d002      	beq.n	80040fe <tarea_pulsador1+0x2e>
 80040f8:	2300      	movs	r3, #0
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	e002      	b.n	8004104 <tarea_pulsador1+0x34>
		else veces_push1++;
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	3301      	adds	r3, #1
 8004102:	73fb      	strb	r3, [r7, #15]

		switch(veces_push1)
 8004104:	7bfb      	ldrb	r3, [r7, #15]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d00e      	beq.n	8004128 <tarea_pulsador1+0x58>
 800410a:	2b03      	cmp	r3, #3
 800410c:	dc10      	bgt.n	8004130 <tarea_pulsador1+0x60>
 800410e:	2b01      	cmp	r3, #1
 8004110:	d002      	beq.n	8004118 <tarea_pulsador1+0x48>
 8004112:	2b02      	cmp	r3, #2
 8004114:	d004      	beq.n	8004120 <tarea_pulsador1+0x50>
 8004116:	e00b      	b.n	8004130 <tarea_pulsador1+0x60>
		{
			case 1 :
					flag_rutina=1;
 8004118:	4b16      	ldr	r3, [pc, #88]	; (8004174 <tarea_pulsador1+0xa4>)
 800411a:	2201      	movs	r2, #1
 800411c:	701a      	strb	r2, [r3, #0]
					break;
 800411e:	e00f      	b.n	8004140 <tarea_pulsador1+0x70>
			case 2 :
					flag_rutina=2;
 8004120:	4b14      	ldr	r3, [pc, #80]	; (8004174 <tarea_pulsador1+0xa4>)
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
					break;
 8004126:	e00b      	b.n	8004140 <tarea_pulsador1+0x70>
			case 3 :
					flag_rutina=3;
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <tarea_pulsador1+0xa4>)
 800412a:	2203      	movs	r2, #3
 800412c:	701a      	strb	r2, [r3, #0]
					break;
 800412e:	e007      	b.n	8004140 <tarea_pulsador1+0x70>
			default:
					veces_push1 %= 4;
 8004130:	7bfb      	ldrb	r3, [r7, #15]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	73fb      	strb	r3, [r7, #15]
					flag_rutina=0;
 8004138:	4b0e      	ldr	r3, [pc, #56]	; (8004174 <tarea_pulsador1+0xa4>)
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
					break;
 800413e:	bf00      	nop
		}
		flag_rutina_ant=flag_rutina;
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <tarea_pulsador1+0xa4>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	73bb      	strb	r3, [r7, #14]
		if (!flag_rutina) xSemaphoreGive(sem_rutina_normal);
 8004146:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <tarea_pulsador1+0xa4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d107      	bne.n	800415e <tarea_pulsador1+0x8e>
 800414e:	4b0a      	ldr	r3, [pc, #40]	; (8004178 <tarea_pulsador1+0xa8>)
 8004150:	6818      	ldr	r0, [r3, #0]
 8004152:	2300      	movs	r3, #0
 8004154:	2200      	movs	r2, #0
 8004156:	2100      	movs	r1, #0
 8004158:	f007 fd7e 	bl	800bc58 <xQueueGenericSend>
 800415c:	e7c0      	b.n	80040e0 <tarea_pulsador1+0x10>
		else xSemaphoreGive(sem_rutina_alt);
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <tarea_pulsador1+0xac>)
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	2300      	movs	r3, #0
 8004164:	2200      	movs	r2, #0
 8004166:	2100      	movs	r1, #0
 8004168:	f007 fd76 	bl	800bc58 <xQueueGenericSend>
		xSemaphoreTake(sem_push1,portMAX_DELAY);
 800416c:	e7b8      	b.n	80040e0 <tarea_pulsador1+0x10>
 800416e:	bf00      	nop
 8004170:	20000aac 	.word	0x20000aac
 8004174:	20000b36 	.word	0x20000b36
 8004178:	20000ab8 	.word	0x20000ab8
 800417c:	20000abc 	.word	0x20000abc

08004180 <tarea_pulsador2>:
	}
}

void tarea_pulsador2 (void *p)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
	uint8_t veces_push2=0;
 8004188:	2300      	movs	r3, #0
 800418a:	73fb      	strb	r3, [r7, #15]
	uint8_t flag_rutina_ant=0;
 800418c:	2300      	movs	r3, #0
 800418e:	73bb      	strb	r3, [r7, #14]
	while(1)
	{
		xSemaphoreTake(sem_push2,portMAX_DELAY);
 8004190:	4b1e      	ldr	r3, [pc, #120]	; (800420c <tarea_pulsador2+0x8c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f04f 31ff 	mov.w	r1, #4294967295
 8004198:	4618      	mov	r0, r3
 800419a:	f007 fee9 	bl	800bf70 <xQueueSemaphoreTake>
		if(flag_rutina_ant!=flag_rutina) veces_push2=0;
 800419e:	4b1c      	ldr	r3, [pc, #112]	; (8004210 <tarea_pulsador2+0x90>)
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	7bba      	ldrb	r2, [r7, #14]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d002      	beq.n	80041ae <tarea_pulsador2+0x2e>
 80041a8:	2300      	movs	r3, #0
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e002      	b.n	80041b4 <tarea_pulsador2+0x34>
		else veces_push2++;
 80041ae:	7bfb      	ldrb	r3, [r7, #15]
 80041b0:	3301      	adds	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
		switch(veces_push2)
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d002      	beq.n	80041c0 <tarea_pulsador2+0x40>
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d004      	beq.n	80041c8 <tarea_pulsador2+0x48>
 80041be:	e007      	b.n	80041d0 <tarea_pulsador2+0x50>
		{
			case 1 :
					flag_rutina=4;
 80041c0:	4b13      	ldr	r3, [pc, #76]	; (8004210 <tarea_pulsador2+0x90>)
 80041c2:	2204      	movs	r2, #4
 80041c4:	701a      	strb	r2, [r3, #0]
					break;
 80041c6:	e009      	b.n	80041dc <tarea_pulsador2+0x5c>
			case 2 :
					flag_rutina=5;
 80041c8:	4b11      	ldr	r3, [pc, #68]	; (8004210 <tarea_pulsador2+0x90>)
 80041ca:	2205      	movs	r2, #5
 80041cc:	701a      	strb	r2, [r3, #0]
					break;
 80041ce:	e005      	b.n	80041dc <tarea_pulsador2+0x5c>

			default:
					//veces_push2 %= 4;
					veces_push2 =0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
					flag_rutina=0;
 80041d4:	4b0e      	ldr	r3, [pc, #56]	; (8004210 <tarea_pulsador2+0x90>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]
					break;
 80041da:	bf00      	nop
		}
		flag_rutina_ant=flag_rutina;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <tarea_pulsador2+0x90>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	73bb      	strb	r3, [r7, #14]
		if (!flag_rutina) xSemaphoreGive(sem_rutina_normal);
 80041e2:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <tarea_pulsador2+0x90>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d107      	bne.n	80041fa <tarea_pulsador2+0x7a>
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <tarea_pulsador2+0x94>)
 80041ec:	6818      	ldr	r0, [r3, #0]
 80041ee:	2300      	movs	r3, #0
 80041f0:	2200      	movs	r2, #0
 80041f2:	2100      	movs	r1, #0
 80041f4:	f007 fd30 	bl	800bc58 <xQueueGenericSend>
 80041f8:	e7ca      	b.n	8004190 <tarea_pulsador2+0x10>
		else xSemaphoreGive(sem_rutina_alt);
 80041fa:	4b07      	ldr	r3, [pc, #28]	; (8004218 <tarea_pulsador2+0x98>)
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	2300      	movs	r3, #0
 8004200:	2200      	movs	r2, #0
 8004202:	2100      	movs	r1, #0
 8004204:	f007 fd28 	bl	800bc58 <xQueueGenericSend>
		xSemaphoreTake(sem_push2,portMAX_DELAY);
 8004208:	e7c2      	b.n	8004190 <tarea_pulsador2+0x10>
 800420a:	bf00      	nop
 800420c:	20000ab0 	.word	0x20000ab0
 8004210:	20000b36 	.word	0x20000b36
 8004214:	20000ab8 	.word	0x20000ab8
 8004218:	20000abc 	.word	0x20000abc

0800421c <tarea_pulsador3>:
	}
}

void tarea_pulsador3 (void *p)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
	uint8_t veces_push3=0;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		xSemaphoreTake(sem_push3,portMAX_DELAY);
 8004228:	4b14      	ldr	r3, [pc, #80]	; (800427c <tarea_pulsador3+0x60>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f04f 31ff 	mov.w	r1, #4294967295
 8004230:	4618      	mov	r0, r3
 8004232:	f007 fe9d 	bl	800bf70 <xQueueSemaphoreTake>
		veces_push3++;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
 8004238:	3301      	adds	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
		switch(veces_push3)
 800423c:	7bfb      	ldrb	r3, [r7, #15]
 800423e:	2b03      	cmp	r3, #3
 8004240:	d011      	beq.n	8004266 <tarea_pulsador3+0x4a>
 8004242:	2b03      	cmp	r3, #3
 8004244:	dc15      	bgt.n	8004272 <tarea_pulsador3+0x56>
 8004246:	2b01      	cmp	r3, #1
 8004248:	d002      	beq.n	8004250 <tarea_pulsador3+0x34>
 800424a:	2b02      	cmp	r3, #2
 800424c:	d005      	beq.n	800425a <tarea_pulsador3+0x3e>
 800424e:	e010      	b.n	8004272 <tarea_pulsador3+0x56>
		{
			case 1 :
					MATRIX_SCROLL_SetSpeed(0,100);
 8004250:	2164      	movs	r1, #100	; 0x64
 8004252:	2000      	movs	r0, #0
 8004254:	f7fd fbee 	bl	8001a34 <MATRIX_SCROLL_SetSpeed>
					break;
 8004258:	e00b      	b.n	8004272 <tarea_pulsador3+0x56>
			case 2 :
					MATRIX_SCROLL_SetSpeed(0,500);
 800425a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800425e:	2000      	movs	r0, #0
 8004260:	f7fd fbe8 	bl	8001a34 <MATRIX_SCROLL_SetSpeed>
					break;
 8004264:	e005      	b.n	8004272 <tarea_pulsador3+0x56>
			case 3 :
					MATRIX_SCROLL_SetSpeed(0,1000);
 8004266:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800426a:	2000      	movs	r0, #0
 800426c:	f7fd fbe2 	bl	8001a34 <MATRIX_SCROLL_SetSpeed>
					break;
 8004270:	bf00      	nop
		}
		veces_push3 %= 4;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
 8004274:	f003 0303 	and.w	r3, r3, #3
 8004278:	73fb      	strb	r3, [r7, #15]
		xSemaphoreTake(sem_push3,portMAX_DELAY);
 800427a:	e7d5      	b.n	8004228 <tarea_pulsador3+0xc>
 800427c:	20000ab4 	.word	0x20000ab4

08004280 <tarea_DHT11>:
	}
}

void tarea_DHT11(void *p)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af02      	add	r7, sp, #8
 8004286:	6078      	str	r0, [r7, #4]
	//uint8_t tCelsius = 0;

	while(1)
	{

			DHT11_Start(); //Siempre que solicite datos
 8004288:	f7fd fdd4 	bl	8001e34 <DHT11_Start>
			 RHI = DHT11_Read(); // Relative humidity integral
 800428c:	f7fd fe44 	bl	8001f18 <DHT11_Read>
 8004290:	4603      	mov	r3, r0
 8004292:	73fb      	strb	r3, [r7, #15]
			 RHD = DHT11_Read(); // Relative humidity decimal
 8004294:	f7fd fe40 	bl	8001f18 <DHT11_Read>
 8004298:	4603      	mov	r3, r0
 800429a:	73bb      	strb	r3, [r7, #14]
			 TCI = DHT11_Read(); // Celsius integral
 800429c:	f7fd fe3c 	bl	8001f18 <DHT11_Read>
 80042a0:	4603      	mov	r3, r0
 80042a2:	737b      	strb	r3, [r7, #13]
			 TCD = DHT11_Read(); // Celsius decimal
 80042a4:	f7fd fe38 	bl	8001f18 <DHT11_Read>
 80042a8:	4603      	mov	r3, r0
 80042aa:	733b      	strb	r3, [r7, #12]
			 SUM = DHT11_Read(); // Check sum
 80042ac:	f7fd fe34 	bl	8001f18 <DHT11_Read>
 80042b0:	4603      	mov	r3, r0
 80042b2:	72fb      	strb	r3, [r7, #11]

			 if (RHI + RHD + TCI + TCD == SUM)
 80042b4:	7bfa      	ldrb	r2, [r7, #15]
 80042b6:	7bbb      	ldrb	r3, [r7, #14]
 80042b8:	441a      	add	r2, r3
 80042ba:	7b7b      	ldrb	r3, [r7, #13]
 80042bc:	441a      	add	r2, r3
 80042be:	7b3b      	ldrb	r3, [r7, #12]
 80042c0:	441a      	add	r2, r3
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d108      	bne.n	80042da <tarea_DHT11+0x5a>
			 {
				 sprintf((char *)Cartel_Led.temp,"TEMP:%d.%1d C  HUM:%d%%",TCI,TCD,RHI);
 80042c8:	7b7a      	ldrb	r2, [r7, #13]
 80042ca:	7b39      	ldrb	r1, [r7, #12]
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	460b      	mov	r3, r1
 80042d2:	4904      	ldr	r1, [pc, #16]	; (80042e4 <tarea_DHT11+0x64>)
 80042d4:	4804      	ldr	r0, [pc, #16]	; (80042e8 <tarea_DHT11+0x68>)
 80042d6:	f009 ff5f 	bl	800e198 <siprintf>
				 //tCelsius = TCI;//(float)TCI + (float)(TCD/10.0);
			 }
			vTaskDelay(5*60000);
 80042da:	4804      	ldr	r0, [pc, #16]	; (80042ec <tarea_DHT11+0x6c>)
 80042dc:	f008 faf4 	bl	800c8c8 <vTaskDelay>
			DHT11_Start(); //Siempre que solicite datos
 80042e0:	e7d2      	b.n	8004288 <tarea_DHT11+0x8>
 80042e2:	bf00      	nop
 80042e4:	0800eb94 	.word	0x0800eb94
 80042e8:	20000a53 	.word	0x20000a53
 80042ec:	000493e0 	.word	0x000493e0

080042f0 <tarea_sd>:

	}
}

void tarea_sd(void *p)
{
 80042f0:	b5b0      	push	{r4, r5, r7, lr}
 80042f2:	b08a      	sub	sp, #40	; 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
	char bufferSd[STR_MAX_SD];
	static uint8_t estadoSd = NO_INIT;


	vTaskDelay(1000);
 80042f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042fc:	f008 fae4 	bl	800c8c8 <vTaskDelay>
	for (;;){

				if(!DetectarSd() && estadoSd !=INIT) /* sd conectada? */
 8004300:	f7fd ff14 	bl	800212c <DetectarSd>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <tarea_sd+0x30>
 800430a:	4b28      	ldr	r3, [pc, #160]	; (80043ac <tarea_sd+0xbc>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <tarea_sd+0x30>
				{
					estadoSd = InicializarSd();
 8004312:	f7fd fefd 	bl	8002110 <InicializarSd>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	4b24      	ldr	r3, [pc, #144]	; (80043ac <tarea_sd+0xbc>)
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e016      	b.n	800434e <tarea_sd+0x5e>
				}
				else if(estadoSd != INIT){
 8004320:	4b22      	ldr	r3, [pc, #136]	; (80043ac <tarea_sd+0xbc>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <tarea_sd+0x5e>
					//actualizo cartel "inserte tarjeta sd"
					memset((char*)Cartel_Led.mensaje_sd, '\0',STR_MAX_SD);
 8004328:	221e      	movs	r2, #30
 800432a:	2100      	movs	r1, #0
 800432c:	4820      	ldr	r0, [pc, #128]	; (80043b0 <tarea_sd+0xc0>)
 800432e:	f009 fdbb 	bl	800dea8 <memset>
					strcpy((char*)Cartel_Led.mensaje_sd, "Inserte tarjeta Sd");
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <tarea_sd+0xc0>)
 8004334:	4b1f      	ldr	r3, [pc, #124]	; (80043b4 <tarea_sd+0xc4>)
 8004336:	4615      	mov	r5, r2
 8004338:	461c      	mov	r4, r3
 800433a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800433c:	6028      	str	r0, [r5, #0]
 800433e:	6069      	str	r1, [r5, #4]
 8004340:	60aa      	str	r2, [r5, #8]
 8004342:	60eb      	str	r3, [r5, #12]
 8004344:	8823      	ldrh	r3, [r4, #0]
 8004346:	78a2      	ldrb	r2, [r4, #2]
 8004348:	822b      	strh	r3, [r5, #16]
 800434a:	4613      	mov	r3, r2
 800434c:	74ab      	strb	r3, [r5, #18]
					//memset(mensaje_sd, '\0',STR_MAX_SD);
					//strcpy(mensaje_sd, "Inserte tarjeta Sd");
				}

				if(estadoSd==INIT){
 800434e:	4b17      	ldr	r3, [pc, #92]	; (80043ac <tarea_sd+0xbc>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d121      	bne.n	800439a <tarea_sd+0xaa>
				memset(bufferSd,'\0',STR_MAX_SD);
 8004356:	f107 0308 	add.w	r3, r7, #8
 800435a:	221e      	movs	r2, #30
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f009 fda2 	bl	800dea8 <memset>
				estadoSd = LeerDatos(bufferSd);
 8004364:	f107 0308 	add.w	r3, r7, #8
 8004368:	4618      	mov	r0, r3
 800436a:	f7fd fe51 	bl	8002010 <LeerDatos>
 800436e:	4603      	mov	r3, r0
 8004370:	461a      	mov	r2, r3
 8004372:	4b0e      	ldr	r3, [pc, #56]	; (80043ac <tarea_sd+0xbc>)
 8004374:	701a      	strb	r2, [r3, #0]
				memset((char*)Cartel_Led.mensaje_sd, '\0',STR_MAX_SD);
 8004376:	221e      	movs	r2, #30
 8004378:	2100      	movs	r1, #0
 800437a:	480d      	ldr	r0, [pc, #52]	; (80043b0 <tarea_sd+0xc0>)
 800437c:	f009 fd94 	bl	800dea8 <memset>
				strncpy((char*)Cartel_Led.mensaje_sd, bufferSd,strlen(bufferSd)-1);
 8004380:	f107 0308 	add.w	r3, r7, #8
 8004384:	4618      	mov	r0, r3
 8004386:	f7fb ff35 	bl	80001f4 <strlen>
 800438a:	4603      	mov	r3, r0
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	4619      	mov	r1, r3
 8004394:	4806      	ldr	r0, [pc, #24]	; (80043b0 <tarea_sd+0xc0>)
 8004396:	f009 ff3b 	bl	800e210 <strncpy>
				}


			HAL_Delay(100);
 800439a:	2064      	movs	r0, #100	; 0x64
 800439c:	f000 f878 	bl	8004490 <HAL_Delay>

			vTaskDelay(30000);
 80043a0:	f247 5030 	movw	r0, #30000	; 0x7530
 80043a4:	f008 fa90 	bl	800c8c8 <vTaskDelay>
				if(!DetectarSd() && estadoSd !=INIT) /* sd conectada? */
 80043a8:	e7aa      	b.n	8004300 <tarea_sd+0x10>
 80043aa:	bf00      	nop
 80043ac:	2000020c 	.word	0x2000020c
 80043b0:	20000a8a 	.word	0x20000a8a
 80043b4:	0800ebac 	.word	0x0800ebac

080043b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80043b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043bc:	480d      	ldr	r0, [pc, #52]	; (80043f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80043be:	490e      	ldr	r1, [pc, #56]	; (80043f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80043c0:	4a0e      	ldr	r2, [pc, #56]	; (80043fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80043c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c4:	e002      	b.n	80043cc <LoopCopyDataInit>

080043c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043ca:	3304      	adds	r3, #4

080043cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043d0:	d3f9      	bcc.n	80043c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043d2:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043d4:	4c0b      	ldr	r4, [pc, #44]	; (8004404 <LoopFillZerobss+0x26>)
  movs r3, #0
 80043d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d8:	e001      	b.n	80043de <LoopFillZerobss>

080043da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043dc:	3204      	adds	r2, #4

080043de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043e0:	d3fb      	bcc.n	80043da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043e2:	f7ff fbef 	bl	8003bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043e6:	f009 fd23 	bl	800de30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043ea:	f7fe fce5 	bl	8002db8 <main>
  bx  lr    
 80043ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80043f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80043f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043f8:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 80043fc:	0800ee54 	.word	0x0800ee54
  ldr r2, =_sbss
 8004400:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8004404:	20004b50 	.word	0x20004b50

08004408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004408:	e7fe      	b.n	8004408 <ADC_IRQHandler>
	...

0800440c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004410:	4b0e      	ldr	r3, [pc, #56]	; (800444c <HAL_Init+0x40>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a0d      	ldr	r2, [pc, #52]	; (800444c <HAL_Init+0x40>)
 8004416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800441a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_Init+0x40>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a0a      	ldr	r2, [pc, #40]	; (800444c <HAL_Init+0x40>)
 8004422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004428:	4b08      	ldr	r3, [pc, #32]	; (800444c <HAL_Init+0x40>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a07      	ldr	r2, [pc, #28]	; (800444c <HAL_Init+0x40>)
 800442e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004434:	2003      	movs	r0, #3
 8004436:	f000 f8fc 	bl	8004632 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800443a:	200f      	movs	r0, #15
 800443c:	f7ff faaa 	bl	8003994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004440:	f7ff f8e0 	bl	8003604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40023c00 	.word	0x40023c00

08004450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004454:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_IncTick+0x20>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_IncTick+0x24>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4413      	add	r3, r2
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_IncTick+0x24>)
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	bf00      	nop
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000214 	.word	0x20000214
 8004474:	20000b38 	.word	0x20000b38

08004478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004478:	b480      	push	{r7}
 800447a:	af00      	add	r7, sp, #0
  return uwTick;
 800447c:	4b03      	ldr	r3, [pc, #12]	; (800448c <HAL_GetTick+0x14>)
 800447e:	681b      	ldr	r3, [r3, #0]
}
 8004480:	4618      	mov	r0, r3
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000b38 	.word	0x20000b38

08004490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004498:	f7ff ffee 	bl	8004478 <HAL_GetTick>
 800449c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a8:	d005      	beq.n	80044b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044aa:	4b0a      	ldr	r3, [pc, #40]	; (80044d4 <HAL_Delay+0x44>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	461a      	mov	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4413      	add	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044b6:	bf00      	nop
 80044b8:	f7ff ffde 	bl	8004478 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d8f7      	bhi.n	80044b8 <HAL_Delay+0x28>
  {
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	20000214 	.word	0x20000214

080044d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f003 0307 	and.w	r3, r3, #7
 80044e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044e8:	4b0c      	ldr	r3, [pc, #48]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044f4:	4013      	ands	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <__NVIC_SetPriorityGrouping+0x44>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	60d3      	str	r3, [r2, #12]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	e000ed00 	.word	0xe000ed00

08004520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <__NVIC_GetPriorityGrouping+0x18>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	0a1b      	lsrs	r3, r3, #8
 800452a:	f003 0307 	and.w	r3, r3, #7
}
 800452e:	4618      	mov	r0, r3
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr
 8004538:	e000ed00 	.word	0xe000ed00

0800453c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	4603      	mov	r3, r0
 8004544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	2b00      	cmp	r3, #0
 800454c:	db0b      	blt.n	8004566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	4907      	ldr	r1, [pc, #28]	; (8004574 <__NVIC_EnableIRQ+0x38>)
 8004556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	2001      	movs	r0, #1
 800455e:	fa00 f202 	lsl.w	r2, r0, r2
 8004562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	6039      	str	r1, [r7, #0]
 8004582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	2b00      	cmp	r3, #0
 800458a:	db0a      	blt.n	80045a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	b2da      	uxtb	r2, r3
 8004590:	490c      	ldr	r1, [pc, #48]	; (80045c4 <__NVIC_SetPriority+0x4c>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	0112      	lsls	r2, r2, #4
 8004598:	b2d2      	uxtb	r2, r2
 800459a:	440b      	add	r3, r1
 800459c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045a0:	e00a      	b.n	80045b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	4908      	ldr	r1, [pc, #32]	; (80045c8 <__NVIC_SetPriority+0x50>)
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	3b04      	subs	r3, #4
 80045b0:	0112      	lsls	r2, r2, #4
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	440b      	add	r3, r1
 80045b6:	761a      	strb	r2, [r3, #24]
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	e000e100 	.word	0xe000e100
 80045c8:	e000ed00 	.word	0xe000ed00

080045cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f003 0307 	and.w	r3, r3, #7
 80045de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	f1c3 0307 	rsb	r3, r3, #7
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	bf28      	it	cs
 80045ea:	2304      	movcs	r3, #4
 80045ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3304      	adds	r3, #4
 80045f2:	2b06      	cmp	r3, #6
 80045f4:	d902      	bls.n	80045fc <NVIC_EncodePriority+0x30>
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	3b03      	subs	r3, #3
 80045fa:	e000      	b.n	80045fe <NVIC_EncodePriority+0x32>
 80045fc:	2300      	movs	r3, #0
 80045fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004600:	f04f 32ff 	mov.w	r2, #4294967295
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43da      	mvns	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	401a      	ands	r2, r3
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004614:	f04f 31ff 	mov.w	r1, #4294967295
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	fa01 f303 	lsl.w	r3, r1, r3
 800461e:	43d9      	mvns	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004624:	4313      	orrs	r3, r2
         );
}
 8004626:	4618      	mov	r0, r3
 8004628:	3724      	adds	r7, #36	; 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b082      	sub	sp, #8
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ff4c 	bl	80044d8 <__NVIC_SetPriorityGrouping>
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	4603      	mov	r3, r0
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800465a:	f7ff ff61 	bl	8004520 <__NVIC_GetPriorityGrouping>
 800465e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68b9      	ldr	r1, [r7, #8]
 8004664:	6978      	ldr	r0, [r7, #20]
 8004666:	f7ff ffb1 	bl	80045cc <NVIC_EncodePriority>
 800466a:	4602      	mov	r2, r0
 800466c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f7ff ff80 	bl	8004578 <__NVIC_SetPriority>
}
 8004678:	bf00      	nop
 800467a:	3718      	adds	r7, #24
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	4603      	mov	r3, r0
 8004688:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff ff54 	bl	800453c <__NVIC_EnableIRQ>
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046aa:	f7ff fee5 	bl	8004478 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d008      	beq.n	80046ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2280      	movs	r2, #128	; 0x80
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e052      	b.n	8004774 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f022 0216 	bic.w	r2, r2, #22
 80046dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	695a      	ldr	r2, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <HAL_DMA_Abort+0x62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d007      	beq.n	800470e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0208 	bic.w	r2, r2, #8
 800470c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 0201 	bic.w	r2, r2, #1
 800471c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800471e:	e013      	b.n	8004748 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004720:	f7ff feaa 	bl	8004478 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b05      	cmp	r3, #5
 800472c:	d90c      	bls.n	8004748 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2203      	movs	r2, #3
 8004738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e015      	b.n	8004774 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e4      	bne.n	8004720 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800475a:	223f      	movs	r2, #63	; 0x3f
 800475c:	409a      	lsls	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d004      	beq.n	800479a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2280      	movs	r2, #128	; 0x80
 8004794:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e00c      	b.n	80047b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2205      	movs	r2, #5
 800479e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	; 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e159      	b.n	8004a90 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047dc:	2201      	movs	r2, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f040 8148 	bne.w	8004a8a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d005      	beq.n	8004812 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800480e:	2b02      	cmp	r3, #2
 8004810:	d130      	bne.n	8004874 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 0201 	and.w	r2, r3, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b03      	cmp	r3, #3
 800487e:	d017      	beq.n	80048b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d123      	bne.n	8004904 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	220f      	movs	r2, #15
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	08da      	lsrs	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0203 	and.w	r2, r3, #3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a2 	beq.w	8004a8a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004946:	2300      	movs	r3, #0
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	4b57      	ldr	r3, [pc, #348]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	4a56      	ldr	r2, [pc, #344]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 8004950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004954:	6453      	str	r3, [r2, #68]	; 0x44
 8004956:	4b54      	ldr	r3, [pc, #336]	; (8004aa8 <HAL_GPIO_Init+0x2e8>)
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004962:	4a52      	ldr	r2, [pc, #328]	; (8004aac <HAL_GPIO_Init+0x2ec>)
 8004964:	69fb      	ldr	r3, [r7, #28]
 8004966:	089b      	lsrs	r3, r3, #2
 8004968:	3302      	adds	r3, #2
 800496a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	220f      	movs	r2, #15
 800497a:	fa02 f303 	lsl.w	r3, r2, r3
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a49      	ldr	r2, [pc, #292]	; (8004ab0 <HAL_GPIO_Init+0x2f0>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d019      	beq.n	80049c2 <HAL_GPIO_Init+0x202>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a48      	ldr	r2, [pc, #288]	; (8004ab4 <HAL_GPIO_Init+0x2f4>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <HAL_GPIO_Init+0x1fe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a47      	ldr	r2, [pc, #284]	; (8004ab8 <HAL_GPIO_Init+0x2f8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00d      	beq.n	80049ba <HAL_GPIO_Init+0x1fa>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a46      	ldr	r2, [pc, #280]	; (8004abc <HAL_GPIO_Init+0x2fc>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d007      	beq.n	80049b6 <HAL_GPIO_Init+0x1f6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a45      	ldr	r2, [pc, #276]	; (8004ac0 <HAL_GPIO_Init+0x300>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <HAL_GPIO_Init+0x1f2>
 80049ae:	2304      	movs	r3, #4
 80049b0:	e008      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049b2:	2307      	movs	r3, #7
 80049b4:	e006      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049b6:	2303      	movs	r3, #3
 80049b8:	e004      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049ba:	2302      	movs	r3, #2
 80049bc:	e002      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <HAL_GPIO_Init+0x204>
 80049c2:	2300      	movs	r3, #0
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	f002 0203 	and.w	r2, r2, #3
 80049ca:	0092      	lsls	r2, r2, #2
 80049cc:	4093      	lsls	r3, r2
 80049ce:	69ba      	ldr	r2, [r7, #24]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049d4:	4935      	ldr	r1, [pc, #212]	; (8004aac <HAL_GPIO_Init+0x2ec>)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	089b      	lsrs	r3, r3, #2
 80049da:	3302      	adds	r3, #2
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049e2:	4b38      	ldr	r3, [pc, #224]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	69ba      	ldr	r2, [r7, #24]
 80049ee:	4013      	ands	r3, r2
 80049f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a06:	4a2f      	ldr	r2, [pc, #188]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a0c:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	43db      	mvns	r3, r3
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	4013      	ands	r3, r2
 8004a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d003      	beq.n	8004a30 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a30:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a36:	4b23      	ldr	r3, [pc, #140]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a5a:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a60:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a84:	4a0f      	ldr	r2, [pc, #60]	; (8004ac4 <HAL_GPIO_Init+0x304>)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	61fb      	str	r3, [r7, #28]
 8004a90:	69fb      	ldr	r3, [r7, #28]
 8004a92:	2b0f      	cmp	r3, #15
 8004a94:	f67f aea2 	bls.w	80047dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a98:	bf00      	nop
 8004a9a:	bf00      	nop
 8004a9c:	3724      	adds	r7, #36	; 0x24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	40013800 	.word	0x40013800
 8004ab0:	40020000 	.word	0x40020000
 8004ab4:	40020400 	.word	0x40020400
 8004ab8:	40020800 	.word	0x40020800
 8004abc:	40020c00 	.word	0x40020c00
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	40013c00 	.word	0x40013c00

08004ac8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691a      	ldr	r2, [r3, #16]
 8004ad8:	887b      	ldrh	r3, [r7, #2]
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d002      	beq.n	8004ae6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	73fb      	strb	r3, [r7, #15]
 8004ae4:	e001      	b.n	8004aea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	460b      	mov	r3, r1
 8004b02:	807b      	strh	r3, [r7, #2]
 8004b04:	4613      	mov	r3, r2
 8004b06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b08:	787b      	ldrb	r3, [r7, #1]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b0e:	887a      	ldrh	r2, [r7, #2]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b14:	e003      	b.n	8004b1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b16:	887b      	ldrh	r3, [r7, #2]
 8004b18:	041a      	lsls	r2, r3, #16
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	619a      	str	r2, [r3, #24]
}
 8004b1e:	bf00      	nop
 8004b20:	370c      	adds	r7, #12
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	4603      	mov	r3, r0
 8004b34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b38:	695a      	ldr	r2, [r3, #20]
 8004b3a:	88fb      	ldrh	r3, [r7, #6]
 8004b3c:	4013      	ands	r3, r2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d006      	beq.n	8004b50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b42:	4a05      	ldr	r2, [pc, #20]	; (8004b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b44:	88fb      	ldrh	r3, [r7, #6]
 8004b46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b48:	88fb      	ldrh	r3, [r7, #6]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe fca0 	bl	8003490 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b50:	bf00      	nop
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	40013c00 	.word	0x40013c00

08004b5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d101      	bne.n	8004b6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e12b      	b.n	8004dc6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d106      	bne.n	8004b88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7fe fd6a 	bl	800365c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2224      	movs	r2, #36	; 0x24
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0201 	bic.w	r2, r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bbe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004bc0:	f001 fbd2 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 8004bc4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4a81      	ldr	r2, [pc, #516]	; (8004dd0 <HAL_I2C_Init+0x274>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d807      	bhi.n	8004be0 <HAL_I2C_Init+0x84>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a80      	ldr	r2, [pc, #512]	; (8004dd4 <HAL_I2C_Init+0x278>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	bf94      	ite	ls
 8004bd8:	2301      	movls	r3, #1
 8004bda:	2300      	movhi	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	e006      	b.n	8004bee <HAL_I2C_Init+0x92>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a7d      	ldr	r2, [pc, #500]	; (8004dd8 <HAL_I2C_Init+0x27c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	bf94      	ite	ls
 8004be8:	2301      	movls	r3, #1
 8004bea:	2300      	movhi	r3, #0
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e0e7      	b.n	8004dc6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4a78      	ldr	r2, [pc, #480]	; (8004ddc <HAL_I2C_Init+0x280>)
 8004bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfe:	0c9b      	lsrs	r3, r3, #18
 8004c00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a6a      	ldr	r2, [pc, #424]	; (8004dd0 <HAL_I2C_Init+0x274>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d802      	bhi.n	8004c30 <HAL_I2C_Init+0xd4>
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	e009      	b.n	8004c44 <HAL_I2C_Init+0xe8>
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c36:	fb02 f303 	mul.w	r3, r2, r3
 8004c3a:	4a69      	ldr	r2, [pc, #420]	; (8004de0 <HAL_I2C_Init+0x284>)
 8004c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c40:	099b      	lsrs	r3, r3, #6
 8004c42:	3301      	adds	r3, #1
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	495c      	ldr	r1, [pc, #368]	; (8004dd0 <HAL_I2C_Init+0x274>)
 8004c60:	428b      	cmp	r3, r1
 8004c62:	d819      	bhi.n	8004c98 <HAL_I2C_Init+0x13c>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	1e59      	subs	r1, r3, #1
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c72:	1c59      	adds	r1, r3, #1
 8004c74:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c78:	400b      	ands	r3, r1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d00a      	beq.n	8004c94 <HAL_I2C_Init+0x138>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	1e59      	subs	r1, r3, #1
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c92:	e051      	b.n	8004d38 <HAL_I2C_Init+0x1dc>
 8004c94:	2304      	movs	r3, #4
 8004c96:	e04f      	b.n	8004d38 <HAL_I2C_Init+0x1dc>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d111      	bne.n	8004cc4 <HAL_I2C_Init+0x168>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	1e58      	subs	r0, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6859      	ldr	r1, [r3, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	440b      	add	r3, r1
 8004cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	e012      	b.n	8004cea <HAL_I2C_Init+0x18e>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e58      	subs	r0, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	0099      	lsls	r1, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cda:	3301      	adds	r3, #1
 8004cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	bf0c      	ite	eq
 8004ce4:	2301      	moveq	r3, #1
 8004ce6:	2300      	movne	r3, #0
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <HAL_I2C_Init+0x196>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e022      	b.n	8004d38 <HAL_I2C_Init+0x1dc>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10e      	bne.n	8004d18 <HAL_I2C_Init+0x1bc>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1e58      	subs	r0, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6859      	ldr	r1, [r3, #4]
 8004d02:	460b      	mov	r3, r1
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	440b      	add	r3, r1
 8004d08:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d16:	e00f      	b.n	8004d38 <HAL_I2C_Init+0x1dc>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	1e58      	subs	r0, r3, #1
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6859      	ldr	r1, [r3, #4]
 8004d20:	460b      	mov	r3, r1
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	0099      	lsls	r1, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d38:	6879      	ldr	r1, [r7, #4]
 8004d3a:	6809      	ldr	r1, [r1, #0]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	69da      	ldr	r2, [r3, #28]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	6911      	ldr	r1, [r2, #16]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68d2      	ldr	r2, [r2, #12]
 8004d72:	4311      	orrs	r1, r2
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	431a      	orrs	r2, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f042 0201 	orr.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2220      	movs	r2, #32
 8004db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	000186a0 	.word	0x000186a0
 8004dd4:	001e847f 	.word	0x001e847f
 8004dd8:	003d08ff 	.word	0x003d08ff
 8004ddc:	431bde83 	.word	0x431bde83
 8004de0:	10624dd3 	.word	0x10624dd3

08004de4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b088      	sub	sp, #32
 8004de8:	af02      	add	r7, sp, #8
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	607a      	str	r2, [r7, #4]
 8004dee:	461a      	mov	r2, r3
 8004df0:	460b      	mov	r3, r1
 8004df2:	817b      	strh	r3, [r7, #10]
 8004df4:	4613      	mov	r3, r2
 8004df6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004df8:	f7ff fb3e 	bl	8004478 <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b20      	cmp	r3, #32
 8004e08:	f040 80e0 	bne.w	8004fcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	2319      	movs	r3, #25
 8004e12:	2201      	movs	r2, #1
 8004e14:	4970      	ldr	r1, [pc, #448]	; (8004fd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 fc58 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0d3      	b.n	8004fce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2C_Master_Transmit+0x50>
 8004e30:	2302      	movs	r3, #2
 8004e32:	e0cc      	b.n	8004fce <HAL_I2C_Master_Transmit+0x1ea>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d007      	beq.n	8004e5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0201 	orr.w	r2, r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2221      	movs	r2, #33	; 0x21
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2210      	movs	r2, #16
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	893a      	ldrh	r2, [r7, #8]
 8004e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a50      	ldr	r2, [pc, #320]	; (8004fdc <HAL_I2C_Master_Transmit+0x1f8>)
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e9c:	8979      	ldrh	r1, [r7, #10]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6a3a      	ldr	r2, [r7, #32]
 8004ea2:	68f8      	ldr	r0, [r7, #12]
 8004ea4:	f000 fac2 	bl	800542c <I2C_MasterRequestWrite>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d001      	beq.n	8004eb2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e08d      	b.n	8004fce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	613b      	str	r3, [r7, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	613b      	str	r3, [r7, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	613b      	str	r3, [r7, #16]
 8004ec6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004ec8:	e066      	b.n	8004f98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	6a39      	ldr	r1, [r7, #32]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 fcd2 	bl	8005878 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ede:	2b04      	cmp	r3, #4
 8004ee0:	d107      	bne.n	8004ef2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ef0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e06b      	b.n	8004fce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	1c5a      	adds	r2, r3, #1
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	3b01      	subs	r3, #1
 8004f14:	b29a      	uxth	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	b29a      	uxth	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695b      	ldr	r3, [r3, #20]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d11b      	bne.n	8004f6c <HAL_I2C_Master_Transmit+0x188>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d017      	beq.n	8004f6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f40:	781a      	ldrb	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	1c5a      	adds	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	3b01      	subs	r3, #1
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	6a39      	ldr	r1, [r7, #32]
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 fcc2 	bl	80058fa <I2C_WaitOnBTFFlagUntilTimeout>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00d      	beq.n	8004f98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d107      	bne.n	8004f94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e01a      	b.n	8004fce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d194      	bne.n	8004eca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	e000      	b.n	8004fce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004fcc:	2302      	movs	r3, #2
  }
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	00100002 	.word	0x00100002
 8004fdc:	ffff0000 	.word	0xffff0000

08004fe0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b08c      	sub	sp, #48	; 0x30
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	607a      	str	r2, [r7, #4]
 8004fea:	461a      	mov	r2, r3
 8004fec:	460b      	mov	r3, r1
 8004fee:	817b      	strh	r3, [r7, #10]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ff4:	f7ff fa40 	bl	8004478 <HAL_GetTick>
 8004ff8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b20      	cmp	r3, #32
 8005004:	f040 820b 	bne.w	800541e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	2319      	movs	r3, #25
 800500e:	2201      	movs	r2, #1
 8005010:	497c      	ldr	r1, [pc, #496]	; (8005204 <HAL_I2C_Master_Receive+0x224>)
 8005012:	68f8      	ldr	r0, [r7, #12]
 8005014:	f000 fb5a 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d001      	beq.n	8005022 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
 8005020:	e1fe      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005028:	2b01      	cmp	r3, #1
 800502a:	d101      	bne.n	8005030 <HAL_I2C_Master_Receive+0x50>
 800502c:	2302      	movs	r3, #2
 800502e:	e1f7      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b01      	cmp	r3, #1
 8005044:	d007      	beq.n	8005056 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f042 0201 	orr.w	r2, r2, #1
 8005054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2222      	movs	r2, #34	; 0x22
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2210      	movs	r2, #16
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	893a      	ldrh	r2, [r7, #8]
 8005086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <HAL_I2C_Master_Receive+0x228>)
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005098:	8979      	ldrh	r1, [r7, #10]
 800509a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 fa46 	bl	8005530 <I2C_MasterRequestRead>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e1b8      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d113      	bne.n	80050de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050b6:	2300      	movs	r3, #0
 80050b8:	623b      	str	r3, [r7, #32]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e18c      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d11b      	bne.n	800511e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	61fb      	str	r3, [r7, #28]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	699b      	ldr	r3, [r3, #24]
 8005108:	61fb      	str	r3, [r7, #28]
 800510a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	e16c      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005122:	2b02      	cmp	r3, #2
 8005124:	d11b      	bne.n	800515e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005134:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005144:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005146:	2300      	movs	r3, #0
 8005148:	61bb      	str	r3, [r7, #24]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	61bb      	str	r3, [r7, #24]
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	e14c      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800516c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800516e:	2300      	movs	r3, #0
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	617b      	str	r3, [r7, #20]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	699b      	ldr	r3, [r3, #24]
 8005180:	617b      	str	r3, [r7, #20]
 8005182:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005184:	e138      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800518a:	2b03      	cmp	r3, #3
 800518c:	f200 80f1 	bhi.w	8005372 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	2b01      	cmp	r3, #1
 8005196:	d123      	bne.n	80051e0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 fbed 	bl	800597c <I2C_WaitOnRXNEFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e139      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c8:	3b01      	subs	r3, #1
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051de:	e10b      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d14e      	bne.n	8005286 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	4906      	ldr	r1, [pc, #24]	; (800520c <HAL_I2C_Master_Receive+0x22c>)
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fa6a 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d008      	beq.n	8005210 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e10e      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
 8005202:	bf00      	nop
 8005204:	00100002 	.word	0x00100002
 8005208:	ffff0000 	.word	0xffff0000
 800520c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800521e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	691a      	ldr	r2, [r3, #16]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005232:	1c5a      	adds	r2, r3, #1
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800523c:	3b01      	subs	r3, #1
 800523e:	b29a      	uxth	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005248:	b29b      	uxth	r3, r3
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526e:	3b01      	subs	r3, #1
 8005270:	b29a      	uxth	r2, r3
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527a:	b29b      	uxth	r3, r3
 800527c:	3b01      	subs	r3, #1
 800527e:	b29a      	uxth	r2, r3
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005284:	e0b8      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	9300      	str	r3, [sp, #0]
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2200      	movs	r2, #0
 800528e:	4966      	ldr	r1, [pc, #408]	; (8005428 <HAL_I2C_Master_Receive+0x448>)
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fa1b 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d001      	beq.n	80052a0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	e0bf      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691a      	ldr	r2, [r3, #16]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052cc:	3b01      	subs	r3, #1
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d8:	b29b      	uxth	r3, r3
 80052da:	3b01      	subs	r3, #1
 80052dc:	b29a      	uxth	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	2200      	movs	r2, #0
 80052ea:	494f      	ldr	r1, [pc, #316]	; (8005428 <HAL_I2C_Master_Receive+0x448>)
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f9ed 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d001      	beq.n	80052fc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e091      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800530a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691a      	ldr	r2, [r3, #16]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	1c5a      	adds	r2, r3, #1
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800535a:	3b01      	subs	r3, #1
 800535c:	b29a      	uxth	r2, r3
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005366:	b29b      	uxth	r3, r3
 8005368:	3b01      	subs	r3, #1
 800536a:	b29a      	uxth	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005370:	e042      	b.n	80053f8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005374:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f000 fb00 	bl	800597c <I2C_WaitOnRXNEFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e04c      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	691a      	ldr	r2, [r3, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	b2d2      	uxtb	r2, r2
 8005392:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	3b01      	subs	r3, #1
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0304 	and.w	r3, r3, #4
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	d118      	bne.n	80053f8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	b2d2      	uxtb	r2, r2
 80053d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053e2:	3b01      	subs	r3, #1
 80053e4:	b29a      	uxth	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f47f aec2 	bne.w	8005186 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3728      	adds	r7, #40	; 0x28
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	00010004 	.word	0x00010004

0800542c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b088      	sub	sp, #32
 8005430:	af02      	add	r7, sp, #8
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	607a      	str	r2, [r7, #4]
 8005436:	603b      	str	r3, [r7, #0]
 8005438:	460b      	mov	r3, r1
 800543a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d006      	beq.n	8005456 <I2C_MasterRequestWrite+0x2a>
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d003      	beq.n	8005456 <I2C_MasterRequestWrite+0x2a>
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005454:	d108      	bne.n	8005468 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005464:	601a      	str	r2, [r3, #0]
 8005466:	e00b      	b.n	8005480 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	2b12      	cmp	r3, #18
 800546e:	d107      	bne.n	8005480 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800547e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f91d 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00d      	beq.n	80054b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a6:	d103      	bne.n	80054b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e035      	b.n	8005520 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054bc:	d108      	bne.n	80054d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054be:	897b      	ldrh	r3, [r7, #10]
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	461a      	mov	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054cc:	611a      	str	r2, [r3, #16]
 80054ce:	e01b      	b.n	8005508 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80054d0:	897b      	ldrh	r3, [r7, #10]
 80054d2:	11db      	asrs	r3, r3, #7
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 0306 	and.w	r3, r3, #6
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	f063 030f 	orn	r3, r3, #15
 80054e0:	b2da      	uxtb	r2, r3
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	490e      	ldr	r1, [pc, #56]	; (8005528 <I2C_MasterRequestWrite+0xfc>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 f943 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e010      	b.n	8005520 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054fe:	897b      	ldrh	r3, [r7, #10]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4907      	ldr	r1, [pc, #28]	; (800552c <I2C_MasterRequestWrite+0x100>)
 800550e:	68f8      	ldr	r0, [r7, #12]
 8005510:	f000 f933 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	00010008 	.word	0x00010008
 800552c:	00010002 	.word	0x00010002

08005530 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b088      	sub	sp, #32
 8005534:	af02      	add	r7, sp, #8
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	603b      	str	r3, [r7, #0]
 800553c:	460b      	mov	r3, r1
 800553e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005554:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d006      	beq.n	800556a <I2C_MasterRequestRead+0x3a>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d003      	beq.n	800556a <I2C_MasterRequestRead+0x3a>
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005568:	d108      	bne.n	800557c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e00b      	b.n	8005594 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	2b11      	cmp	r3, #17
 8005582:	d107      	bne.n	8005594 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005592:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	9300      	str	r3, [sp, #0]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f893 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00d      	beq.n	80055c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ba:	d103      	bne.n	80055c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055c4:	2303      	movs	r3, #3
 80055c6:	e079      	b.n	80056bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055d0:	d108      	bne.n	80055e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055d2:	897b      	ldrh	r3, [r7, #10]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f043 0301 	orr.w	r3, r3, #1
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	e05f      	b.n	80056a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	11db      	asrs	r3, r3, #7
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0306 	and.w	r3, r3, #6
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f063 030f 	orn	r3, r3, #15
 80055f4:	b2da      	uxtb	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	4930      	ldr	r1, [pc, #192]	; (80056c4 <I2C_MasterRequestRead+0x194>)
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f8b9 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e054      	b.n	80056bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005612:	897b      	ldrh	r3, [r7, #10]
 8005614:	b2da      	uxtb	r2, r3
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	4929      	ldr	r1, [pc, #164]	; (80056c8 <I2C_MasterRequestRead+0x198>)
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f8a9 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e044      	b.n	80056bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005632:	2300      	movs	r3, #0
 8005634:	613b      	str	r3, [r7, #16]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005656:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f831 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00d      	beq.n	800568c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d103      	bne.n	8005688 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005686:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	e017      	b.n	80056bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800568c:	897b      	ldrh	r3, [r7, #10]
 800568e:	11db      	asrs	r3, r3, #7
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f003 0306 	and.w	r3, r3, #6
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f063 030e 	orn	r3, r3, #14
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	4907      	ldr	r1, [pc, #28]	; (80056c8 <I2C_MasterRequestRead+0x198>)
 80056aa:	68f8      	ldr	r0, [r7, #12]
 80056ac:	f000 f865 	bl	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3718      	adds	r7, #24
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	00010008 	.word	0x00010008
 80056c8:	00010002 	.word	0x00010002

080056cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056dc:	e025      	b.n	800572a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d021      	beq.n	800572a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fe fec7 	bl	8004478 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d116      	bne.n	800572a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e023      	b.n	8005772 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10d      	bne.n	8005750 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	43da      	mvns	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4013      	ands	r3, r2
 8005740:	b29b      	uxth	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	bf0c      	ite	eq
 8005746:	2301      	moveq	r3, #1
 8005748:	2300      	movne	r3, #0
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	e00c      	b.n	800576a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf0c      	ite	eq
 8005762:	2301      	moveq	r3, #1
 8005764:	2300      	movne	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	461a      	mov	r2, r3
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	429a      	cmp	r2, r3
 800576e:	d0b6      	beq.n	80056de <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3710      	adds	r7, #16
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	60f8      	str	r0, [r7, #12]
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607a      	str	r2, [r7, #4]
 8005786:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005788:	e051      	b.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d123      	bne.n	80057e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057a8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057b2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	f043 0204 	orr.w	r2, r3, #4
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e046      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d021      	beq.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe fe45 	bl	8004478 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d116      	bne.n	800582e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e020      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	0c1b      	lsrs	r3, r3, #16
 8005832:	b2db      	uxtb	r3, r3
 8005834:	2b01      	cmp	r3, #1
 8005836:	d10c      	bne.n	8005852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	4013      	ands	r3, r2
 8005844:	b29b      	uxth	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	bf14      	ite	ne
 800584a:	2301      	movne	r3, #1
 800584c:	2300      	moveq	r3, #0
 800584e:	b2db      	uxtb	r3, r3
 8005850:	e00b      	b.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	43da      	mvns	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	4013      	ands	r3, r2
 800585e:	b29b      	uxth	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d18d      	bne.n	800578a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005884:	e02d      	b.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005886:	68f8      	ldr	r0, [r7, #12]
 8005888:	f000 f8ce 	bl	8005a28 <I2C_IsAcknowledgeFailed>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d001      	beq.n	8005896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e02d      	b.n	80058f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589c:	d021      	beq.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fe fdeb 	bl	8004478 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d116      	bne.n	80058e2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e007      	b.n	80058f2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695b      	ldr	r3, [r3, #20]
 80058e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d1ca      	bne.n	8005886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005906:	e02d      	b.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f88d 	bl	8005a28 <I2C_IsAcknowledgeFailed>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d001      	beq.n	8005918 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e02d      	b.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800591e:	d021      	beq.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005920:	f7fe fdaa 	bl	8004478 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	429a      	cmp	r2, r3
 800592e:	d302      	bcc.n	8005936 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d116      	bne.n	8005964 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e007      	b.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d1ca      	bne.n	8005908 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3710      	adds	r7, #16
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005988:	e042      	b.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	f003 0310 	and.w	r3, r3, #16
 8005994:	2b10      	cmp	r3, #16
 8005996:	d119      	bne.n	80059cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0210 	mvn.w	r2, #16
 80059a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e029      	b.n	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059cc:	f7fe fd54 	bl	8004478 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d302      	bcc.n	80059e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d116      	bne.n	8005a10 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2220      	movs	r2, #32
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e007      	b.n	8005a20 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1a:	2b40      	cmp	r3, #64	; 0x40
 8005a1c:	d1b5      	bne.n	800598a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a3e:	d11b      	bne.n	8005a78 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005a48:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a64:	f043 0204 	orr.w	r2, r3, #4
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e000      	b.n	8005a7a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
	...

08005a88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b086      	sub	sp, #24
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e267      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d075      	beq.n	8005b92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aa6:	4b88      	ldr	r3, [pc, #544]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 030c 	and.w	r3, r3, #12
 8005aae:	2b04      	cmp	r3, #4
 8005ab0:	d00c      	beq.n	8005acc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ab2:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d112      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005abe:	4b82      	ldr	r3, [pc, #520]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005acc:	4b7e      	ldr	r3, [pc, #504]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d05b      	beq.n	8005b90 <HAL_RCC_OscConfig+0x108>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d157      	bne.n	8005b90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e242      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aec:	d106      	bne.n	8005afc <HAL_RCC_OscConfig+0x74>
 8005aee:	4b76      	ldr	r3, [pc, #472]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a75      	ldr	r2, [pc, #468]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e01d      	b.n	8005b38 <HAL_RCC_OscConfig+0xb0>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b04:	d10c      	bne.n	8005b20 <HAL_RCC_OscConfig+0x98>
 8005b06:	4b70      	ldr	r3, [pc, #448]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a6f      	ldr	r2, [pc, #444]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	4b6d      	ldr	r3, [pc, #436]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a6c      	ldr	r2, [pc, #432]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b1c:	6013      	str	r3, [r2, #0]
 8005b1e:	e00b      	b.n	8005b38 <HAL_RCC_OscConfig+0xb0>
 8005b20:	4b69      	ldr	r3, [pc, #420]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a68      	ldr	r2, [pc, #416]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2a:	6013      	str	r3, [r2, #0]
 8005b2c:	4b66      	ldr	r3, [pc, #408]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a65      	ldr	r2, [pc, #404]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d013      	beq.n	8005b68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b40:	f7fe fc9a 	bl	8004478 <HAL_GetTick>
 8005b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b46:	e008      	b.n	8005b5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b48:	f7fe fc96 	bl	8004478 <HAL_GetTick>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	1ad3      	subs	r3, r2, r3
 8005b52:	2b64      	cmp	r3, #100	; 0x64
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e207      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5a:	4b5b      	ldr	r3, [pc, #364]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d0f0      	beq.n	8005b48 <HAL_RCC_OscConfig+0xc0>
 8005b66:	e014      	b.n	8005b92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b68:	f7fe fc86 	bl	8004478 <HAL_GetTick>
 8005b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6e:	e008      	b.n	8005b82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b70:	f7fe fc82 	bl	8004478 <HAL_GetTick>
 8005b74:	4602      	mov	r2, r0
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	2b64      	cmp	r3, #100	; 0x64
 8005b7c:	d901      	bls.n	8005b82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e1f3      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b82:	4b51      	ldr	r3, [pc, #324]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1f0      	bne.n	8005b70 <HAL_RCC_OscConfig+0xe8>
 8005b8e:	e000      	b.n	8005b92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d063      	beq.n	8005c66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b9e:	4b4a      	ldr	r3, [pc, #296]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	f003 030c 	and.w	r3, r3, #12
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00b      	beq.n	8005bc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005baa:	4b47      	ldr	r3, [pc, #284]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	d11c      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bb6:	4b44      	ldr	r3, [pc, #272]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d116      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc2:	4b41      	ldr	r3, [pc, #260]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0302 	and.w	r3, r3, #2
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <HAL_RCC_OscConfig+0x152>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d001      	beq.n	8005bda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e1c7      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bda:	4b3b      	ldr	r3, [pc, #236]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4937      	ldr	r1, [pc, #220]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bee:	e03a      	b.n	8005c66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d020      	beq.n	8005c3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bf8:	4b34      	ldr	r3, [pc, #208]	; (8005ccc <HAL_RCC_OscConfig+0x244>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfe:	f7fe fc3b 	bl	8004478 <HAL_GetTick>
 8005c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c04:	e008      	b.n	8005c18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c06:	f7fe fc37 	bl	8004478 <HAL_GetTick>
 8005c0a:	4602      	mov	r2, r0
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	2b02      	cmp	r3, #2
 8005c12:	d901      	bls.n	8005c18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e1a8      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c18:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0302 	and.w	r3, r3, #2
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d0f0      	beq.n	8005c06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c24:	4b28      	ldr	r3, [pc, #160]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4925      	ldr	r1, [pc, #148]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	600b      	str	r3, [r1, #0]
 8005c38:	e015      	b.n	8005c66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c3a:	4b24      	ldr	r3, [pc, #144]	; (8005ccc <HAL_RCC_OscConfig+0x244>)
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c40:	f7fe fc1a 	bl	8004478 <HAL_GetTick>
 8005c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c46:	e008      	b.n	8005c5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c48:	f7fe fc16 	bl	8004478 <HAL_GetTick>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad3      	subs	r3, r2, r3
 8005c52:	2b02      	cmp	r3, #2
 8005c54:	d901      	bls.n	8005c5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c56:	2303      	movs	r3, #3
 8005c58:	e187      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5a:	4b1b      	ldr	r3, [pc, #108]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1f0      	bne.n	8005c48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d036      	beq.n	8005ce0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c7a:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <HAL_RCC_OscConfig+0x248>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c80:	f7fe fbfa 	bl	8004478 <HAL_GetTick>
 8005c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c88:	f7fe fbf6 	bl	8004478 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e167      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c9a:	4b0b      	ldr	r3, [pc, #44]	; (8005cc8 <HAL_RCC_OscConfig+0x240>)
 8005c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d0f0      	beq.n	8005c88 <HAL_RCC_OscConfig+0x200>
 8005ca6:	e01b      	b.n	8005ce0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ca8:	4b09      	ldr	r3, [pc, #36]	; (8005cd0 <HAL_RCC_OscConfig+0x248>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cae:	f7fe fbe3 	bl	8004478 <HAL_GetTick>
 8005cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb4:	e00e      	b.n	8005cd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005cb6:	f7fe fbdf 	bl	8004478 <HAL_GetTick>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	2b02      	cmp	r3, #2
 8005cc2:	d907      	bls.n	8005cd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e150      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	42470000 	.word	0x42470000
 8005cd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	4b88      	ldr	r3, [pc, #544]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd8:	f003 0302 	and.w	r3, r3, #2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1ea      	bne.n	8005cb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0304 	and.w	r3, r3, #4
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8097 	beq.w	8005e1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cf2:	4b81      	ldr	r3, [pc, #516]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cfe:	2300      	movs	r3, #0
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	4b7d      	ldr	r3, [pc, #500]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	4a7c      	ldr	r2, [pc, #496]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d0e:	4b7a      	ldr	r3, [pc, #488]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d16:	60bb      	str	r3, [r7, #8]
 8005d18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d1e:	4b77      	ldr	r3, [pc, #476]	; (8005efc <HAL_RCC_OscConfig+0x474>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d118      	bne.n	8005d5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d2a:	4b74      	ldr	r3, [pc, #464]	; (8005efc <HAL_RCC_OscConfig+0x474>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a73      	ldr	r2, [pc, #460]	; (8005efc <HAL_RCC_OscConfig+0x474>)
 8005d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d36:	f7fe fb9f 	bl	8004478 <HAL_GetTick>
 8005d3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3c:	e008      	b.n	8005d50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d3e:	f7fe fb9b 	bl	8004478 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e10c      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d50:	4b6a      	ldr	r3, [pc, #424]	; (8005efc <HAL_RCC_OscConfig+0x474>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0f0      	beq.n	8005d3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d106      	bne.n	8005d72 <HAL_RCC_OscConfig+0x2ea>
 8005d64:	4b64      	ldr	r3, [pc, #400]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d68:	4a63      	ldr	r2, [pc, #396]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d6a:	f043 0301 	orr.w	r3, r3, #1
 8005d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d70:	e01c      	b.n	8005dac <HAL_RCC_OscConfig+0x324>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x30c>
 8005d7a:	4b5f      	ldr	r3, [pc, #380]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	4a5e      	ldr	r2, [pc, #376]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d80:	f043 0304 	orr.w	r3, r3, #4
 8005d84:	6713      	str	r3, [r2, #112]	; 0x70
 8005d86:	4b5c      	ldr	r3, [pc, #368]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a5b      	ldr	r2, [pc, #364]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d8c:	f043 0301 	orr.w	r3, r3, #1
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
 8005d92:	e00b      	b.n	8005dac <HAL_RCC_OscConfig+0x324>
 8005d94:	4b58      	ldr	r3, [pc, #352]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d98:	4a57      	ldr	r2, [pc, #348]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005d9a:	f023 0301 	bic.w	r3, r3, #1
 8005d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8005da0:	4b55      	ldr	r3, [pc, #340]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da4:	4a54      	ldr	r2, [pc, #336]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005da6:	f023 0304 	bic.w	r3, r3, #4
 8005daa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d015      	beq.n	8005de0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fe fb60 	bl	8004478 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dba:	e00a      	b.n	8005dd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005dbc:	f7fe fb5c 	bl	8004478 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e0cb      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd2:	4b49      	ldr	r3, [pc, #292]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0ee      	beq.n	8005dbc <HAL_RCC_OscConfig+0x334>
 8005dde:	e014      	b.n	8005e0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de0:	f7fe fb4a 	bl	8004478 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005de6:	e00a      	b.n	8005dfe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005de8:	f7fe fb46 	bl	8004478 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d901      	bls.n	8005dfe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dfa:	2303      	movs	r3, #3
 8005dfc:	e0b5      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dfe:	4b3e      	ldr	r3, [pc, #248]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d1ee      	bne.n	8005de8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e0a:	7dfb      	ldrb	r3, [r7, #23]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d105      	bne.n	8005e1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e10:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	4a38      	ldr	r2, [pc, #224]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005e16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	699b      	ldr	r3, [r3, #24]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 80a1 	beq.w	8005f68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e26:	4b34      	ldr	r3, [pc, #208]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b08      	cmp	r3, #8
 8005e30:	d05c      	beq.n	8005eec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d141      	bne.n	8005ebe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3a:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <HAL_RCC_OscConfig+0x478>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e40:	f7fe fb1a 	bl	8004478 <HAL_GetTick>
 8005e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e46:	e008      	b.n	8005e5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e48:	f7fe fb16 	bl	8004478 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d901      	bls.n	8005e5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	e087      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5a:	4b27      	ldr	r3, [pc, #156]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d1f0      	bne.n	8005e48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	69da      	ldr	r2, [r3, #28]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e74:	019b      	lsls	r3, r3, #6
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7c:	085b      	lsrs	r3, r3, #1
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	431a      	orrs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	061b      	lsls	r3, r3, #24
 8005e8a:	491b      	ldr	r1, [pc, #108]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e90:	4b1b      	ldr	r3, [pc, #108]	; (8005f00 <HAL_RCC_OscConfig+0x478>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e96:	f7fe faef 	bl	8004478 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e9e:	f7fe faeb 	bl	8004478 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e05c      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb0:	4b11      	ldr	r3, [pc, #68]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0f0      	beq.n	8005e9e <HAL_RCC_OscConfig+0x416>
 8005ebc:	e054      	b.n	8005f68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ebe:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <HAL_RCC_OscConfig+0x478>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ec4:	f7fe fad8 	bl	8004478 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eca:	e008      	b.n	8005ede <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ecc:	f7fe fad4 	bl	8004478 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d901      	bls.n	8005ede <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e045      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ede:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <HAL_RCC_OscConfig+0x470>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1f0      	bne.n	8005ecc <HAL_RCC_OscConfig+0x444>
 8005eea:	e03d      	b.n	8005f68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d107      	bne.n	8005f04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e038      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
 8005ef8:	40023800 	.word	0x40023800
 8005efc:	40007000 	.word	0x40007000
 8005f00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f04:	4b1b      	ldr	r3, [pc, #108]	; (8005f74 <HAL_RCC_OscConfig+0x4ec>)
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	699b      	ldr	r3, [r3, #24]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d028      	beq.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d121      	bne.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d11a      	bne.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f34:	4013      	ands	r3, r2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d111      	bne.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	085b      	lsrs	r3, r3, #1
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d107      	bne.n	8005f64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e000      	b.n	8005f6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	40023800 	.word	0x40023800

08005f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0cc      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f8c:	4b68      	ldr	r3, [pc, #416]	; (8006130 <HAL_RCC_ClockConfig+0x1b8>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d90c      	bls.n	8005fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f9a:	4b65      	ldr	r3, [pc, #404]	; (8006130 <HAL_RCC_ClockConfig+0x1b8>)
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fa2:	4b63      	ldr	r3, [pc, #396]	; (8006130 <HAL_RCC_ClockConfig+0x1b8>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f003 0307 	and.w	r3, r3, #7
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d001      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0b8      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d020      	beq.n	8006002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fcc:	4b59      	ldr	r3, [pc, #356]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	4a58      	ldr	r2, [pc, #352]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8005fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d005      	beq.n	8005ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fe4:	4b53      	ldr	r3, [pc, #332]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	4a52      	ldr	r2, [pc, #328]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8005fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ff0:	4b50      	ldr	r3, [pc, #320]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	494d      	ldr	r1, [pc, #308]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0301 	and.w	r3, r3, #1
 800600a:	2b00      	cmp	r3, #0
 800600c:	d044      	beq.n	8006098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d107      	bne.n	8006026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006016:	4b47      	ldr	r3, [pc, #284]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d119      	bne.n	8006056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e07f      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d003      	beq.n	8006036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006032:	2b03      	cmp	r3, #3
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006036:	4b3f      	ldr	r3, [pc, #252]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d109      	bne.n	8006056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e06f      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006046:	4b3b      	ldr	r3, [pc, #236]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e067      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006056:	4b37      	ldr	r3, [pc, #220]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	689b      	ldr	r3, [r3, #8]
 800605a:	f023 0203 	bic.w	r2, r3, #3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4934      	ldr	r1, [pc, #208]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	4313      	orrs	r3, r2
 8006066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006068:	f7fe fa06 	bl	8004478 <HAL_GetTick>
 800606c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800606e:	e00a      	b.n	8006086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006070:	f7fe fa02 	bl	8004478 <HAL_GetTick>
 8006074:	4602      	mov	r2, r0
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1ad3      	subs	r3, r2, r3
 800607a:	f241 3288 	movw	r2, #5000	; 0x1388
 800607e:	4293      	cmp	r3, r2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e04f      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006086:	4b2b      	ldr	r3, [pc, #172]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f003 020c 	and.w	r2, r3, #12
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	429a      	cmp	r2, r3
 8006096:	d1eb      	bne.n	8006070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <HAL_RCC_ClockConfig+0x1b8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0307 	and.w	r3, r3, #7
 80060a0:	683a      	ldr	r2, [r7, #0]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d20c      	bcs.n	80060c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060a6:	4b22      	ldr	r3, [pc, #136]	; (8006130 <HAL_RCC_ClockConfig+0x1b8>)
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ae:	4b20      	ldr	r3, [pc, #128]	; (8006130 <HAL_RCC_ClockConfig+0x1b8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0307 	and.w	r3, r3, #7
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d001      	beq.n	80060c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e032      	b.n	8006126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0304 	and.w	r3, r3, #4
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d008      	beq.n	80060de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060cc:	4b19      	ldr	r3, [pc, #100]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	4916      	ldr	r1, [pc, #88]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0308 	and.w	r3, r3, #8
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060ea:	4b12      	ldr	r3, [pc, #72]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	00db      	lsls	r3, r3, #3
 80060f8:	490e      	ldr	r1, [pc, #56]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060fe:	f000 f821 	bl	8006144 <HAL_RCC_GetSysClockFreq>
 8006102:	4602      	mov	r2, r0
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	091b      	lsrs	r3, r3, #4
 800610a:	f003 030f 	and.w	r3, r3, #15
 800610e:	490a      	ldr	r1, [pc, #40]	; (8006138 <HAL_RCC_ClockConfig+0x1c0>)
 8006110:	5ccb      	ldrb	r3, [r1, r3]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	4a09      	ldr	r2, [pc, #36]	; (800613c <HAL_RCC_ClockConfig+0x1c4>)
 8006118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800611a:	4b09      	ldr	r3, [pc, #36]	; (8006140 <HAL_RCC_ClockConfig+0x1c8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7fd fc38 	bl	8003994 <HAL_InitTick>

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	40023c00 	.word	0x40023c00
 8006134:	40023800 	.word	0x40023800
 8006138:	0800ec18 	.word	0x0800ec18
 800613c:	20000208 	.word	0x20000208
 8006140:	20000210 	.word	0x20000210

08006144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006148:	b094      	sub	sp, #80	; 0x50
 800614a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800614c:	2300      	movs	r3, #0
 800614e:	647b      	str	r3, [r7, #68]	; 0x44
 8006150:	2300      	movs	r3, #0
 8006152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006154:	2300      	movs	r3, #0
 8006156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006158:	2300      	movs	r3, #0
 800615a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800615c:	4b79      	ldr	r3, [pc, #484]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	f003 030c 	and.w	r3, r3, #12
 8006164:	2b08      	cmp	r3, #8
 8006166:	d00d      	beq.n	8006184 <HAL_RCC_GetSysClockFreq+0x40>
 8006168:	2b08      	cmp	r3, #8
 800616a:	f200 80e1 	bhi.w	8006330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800616e:	2b00      	cmp	r3, #0
 8006170:	d002      	beq.n	8006178 <HAL_RCC_GetSysClockFreq+0x34>
 8006172:	2b04      	cmp	r3, #4
 8006174:	d003      	beq.n	800617e <HAL_RCC_GetSysClockFreq+0x3a>
 8006176:	e0db      	b.n	8006330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006178:	4b73      	ldr	r3, [pc, #460]	; (8006348 <HAL_RCC_GetSysClockFreq+0x204>)
 800617a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800617c:	e0db      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800617e:	4b73      	ldr	r3, [pc, #460]	; (800634c <HAL_RCC_GetSysClockFreq+0x208>)
 8006180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006182:	e0d8      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006184:	4b6f      	ldr	r3, [pc, #444]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800618c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800618e:	4b6d      	ldr	r3, [pc, #436]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d063      	beq.n	8006262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619a:	4b6a      	ldr	r3, [pc, #424]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	099b      	lsrs	r3, r3, #6
 80061a0:	2200      	movs	r2, #0
 80061a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ac:	633b      	str	r3, [r7, #48]	; 0x30
 80061ae:	2300      	movs	r3, #0
 80061b0:	637b      	str	r3, [r7, #52]	; 0x34
 80061b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061b6:	4622      	mov	r2, r4
 80061b8:	462b      	mov	r3, r5
 80061ba:	f04f 0000 	mov.w	r0, #0
 80061be:	f04f 0100 	mov.w	r1, #0
 80061c2:	0159      	lsls	r1, r3, #5
 80061c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c8:	0150      	lsls	r0, r2, #5
 80061ca:	4602      	mov	r2, r0
 80061cc:	460b      	mov	r3, r1
 80061ce:	4621      	mov	r1, r4
 80061d0:	1a51      	subs	r1, r2, r1
 80061d2:	6139      	str	r1, [r7, #16]
 80061d4:	4629      	mov	r1, r5
 80061d6:	eb63 0301 	sbc.w	r3, r3, r1
 80061da:	617b      	str	r3, [r7, #20]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061e8:	4659      	mov	r1, fp
 80061ea:	018b      	lsls	r3, r1, #6
 80061ec:	4651      	mov	r1, sl
 80061ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061f2:	4651      	mov	r1, sl
 80061f4:	018a      	lsls	r2, r1, #6
 80061f6:	4651      	mov	r1, sl
 80061f8:	ebb2 0801 	subs.w	r8, r2, r1
 80061fc:	4659      	mov	r1, fp
 80061fe:	eb63 0901 	sbc.w	r9, r3, r1
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800620e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006216:	4690      	mov	r8, r2
 8006218:	4699      	mov	r9, r3
 800621a:	4623      	mov	r3, r4
 800621c:	eb18 0303 	adds.w	r3, r8, r3
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	462b      	mov	r3, r5
 8006224:	eb49 0303 	adc.w	r3, r9, r3
 8006228:	60fb      	str	r3, [r7, #12]
 800622a:	f04f 0200 	mov.w	r2, #0
 800622e:	f04f 0300 	mov.w	r3, #0
 8006232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006236:	4629      	mov	r1, r5
 8006238:	024b      	lsls	r3, r1, #9
 800623a:	4621      	mov	r1, r4
 800623c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006240:	4621      	mov	r1, r4
 8006242:	024a      	lsls	r2, r1, #9
 8006244:	4610      	mov	r0, r2
 8006246:	4619      	mov	r1, r3
 8006248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624a:	2200      	movs	r2, #0
 800624c:	62bb      	str	r3, [r7, #40]	; 0x28
 800624e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006254:	f7fa fc1a 	bl	8000a8c <__aeabi_uldivmod>
 8006258:	4602      	mov	r2, r0
 800625a:	460b      	mov	r3, r1
 800625c:	4613      	mov	r3, r2
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006260:	e058      	b.n	8006314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006262:	4b38      	ldr	r3, [pc, #224]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	2200      	movs	r2, #0
 800626a:	4618      	mov	r0, r3
 800626c:	4611      	mov	r1, r2
 800626e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006272:	623b      	str	r3, [r7, #32]
 8006274:	2300      	movs	r3, #0
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
 8006278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	f04f 0000 	mov.w	r0, #0
 8006284:	f04f 0100 	mov.w	r1, #0
 8006288:	0159      	lsls	r1, r3, #5
 800628a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800628e:	0150      	lsls	r0, r2, #5
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4641      	mov	r1, r8
 8006296:	ebb2 0a01 	subs.w	sl, r2, r1
 800629a:	4649      	mov	r1, r9
 800629c:	eb63 0b01 	sbc.w	fp, r3, r1
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062b4:	ebb2 040a 	subs.w	r4, r2, sl
 80062b8:	eb63 050b 	sbc.w	r5, r3, fp
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	00eb      	lsls	r3, r5, #3
 80062c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80062ca:	00e2      	lsls	r2, r4, #3
 80062cc:	4614      	mov	r4, r2
 80062ce:	461d      	mov	r5, r3
 80062d0:	4643      	mov	r3, r8
 80062d2:	18e3      	adds	r3, r4, r3
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	464b      	mov	r3, r9
 80062d8:	eb45 0303 	adc.w	r3, r5, r3
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	f04f 0200 	mov.w	r2, #0
 80062e2:	f04f 0300 	mov.w	r3, #0
 80062e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062ea:	4629      	mov	r1, r5
 80062ec:	028b      	lsls	r3, r1, #10
 80062ee:	4621      	mov	r1, r4
 80062f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062f4:	4621      	mov	r1, r4
 80062f6:	028a      	lsls	r2, r1, #10
 80062f8:	4610      	mov	r0, r2
 80062fa:	4619      	mov	r1, r3
 80062fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062fe:	2200      	movs	r2, #0
 8006300:	61bb      	str	r3, [r7, #24]
 8006302:	61fa      	str	r2, [r7, #28]
 8006304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006308:	f7fa fbc0 	bl	8000a8c <__aeabi_uldivmod>
 800630c:	4602      	mov	r2, r0
 800630e:	460b      	mov	r3, r1
 8006310:	4613      	mov	r3, r2
 8006312:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_GetSysClockFreq+0x200>)
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	0c1b      	lsrs	r3, r3, #16
 800631a:	f003 0303 	and.w	r3, r3, #3
 800631e:	3301      	adds	r3, #1
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006328:	fbb2 f3f3 	udiv	r3, r2, r3
 800632c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800632e:	e002      	b.n	8006336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006330:	4b05      	ldr	r3, [pc, #20]	; (8006348 <HAL_RCC_GetSysClockFreq+0x204>)
 8006332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006338:	4618      	mov	r0, r3
 800633a:	3750      	adds	r7, #80	; 0x50
 800633c:	46bd      	mov	sp, r7
 800633e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006342:	bf00      	nop
 8006344:	40023800 	.word	0x40023800
 8006348:	00f42400 	.word	0x00f42400
 800634c:	007a1200 	.word	0x007a1200

08006350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006354:	4b03      	ldr	r3, [pc, #12]	; (8006364 <HAL_RCC_GetHCLKFreq+0x14>)
 8006356:	681b      	ldr	r3, [r3, #0]
}
 8006358:	4618      	mov	r0, r3
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000208 	.word	0x20000208

08006368 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800636c:	f7ff fff0 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006370:	4602      	mov	r2, r0
 8006372:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	0a9b      	lsrs	r3, r3, #10
 8006378:	f003 0307 	and.w	r3, r3, #7
 800637c:	4903      	ldr	r1, [pc, #12]	; (800638c <HAL_RCC_GetPCLK1Freq+0x24>)
 800637e:	5ccb      	ldrb	r3, [r1, r3]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006384:	4618      	mov	r0, r3
 8006386:	bd80      	pop	{r7, pc}
 8006388:	40023800 	.word	0x40023800
 800638c:	0800ec28 	.word	0x0800ec28

08006390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006394:	f7ff ffdc 	bl	8006350 <HAL_RCC_GetHCLKFreq>
 8006398:	4602      	mov	r2, r0
 800639a:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	0b5b      	lsrs	r3, r3, #13
 80063a0:	f003 0307 	and.w	r3, r3, #7
 80063a4:	4903      	ldr	r1, [pc, #12]	; (80063b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063a6:	5ccb      	ldrb	r3, [r1, r3]
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	40023800 	.word	0x40023800
 80063b4:	0800ec28 	.word	0x0800ec28

080063b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	220f      	movs	r2, #15
 80063c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80063c8:	4b12      	ldr	r3, [pc, #72]	; (8006414 <HAL_RCC_GetClockConfig+0x5c>)
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0203 	and.w	r2, r3, #3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <HAL_RCC_GetClockConfig+0x5c>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80063e0:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <HAL_RCC_GetClockConfig+0x5c>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80063ec:	4b09      	ldr	r3, [pc, #36]	; (8006414 <HAL_RCC_GetClockConfig+0x5c>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	08db      	lsrs	r3, r3, #3
 80063f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <HAL_RCC_GetClockConfig+0x60>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0207 	and.w	r2, r3, #7
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	601a      	str	r2, [r3, #0]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	40023c00 	.word	0x40023c00

0800641c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b00      	cmp	r3, #0
 8006436:	d105      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006440:	2b00      	cmp	r3, #0
 8006442:	d035      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006444:	4b67      	ldr	r3, [pc, #412]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800644a:	f7fe f815 	bl	8004478 <HAL_GetTick>
 800644e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006450:	e008      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006452:	f7fe f811 	bl	8004478 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	2b02      	cmp	r3, #2
 800645e:	d901      	bls.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e0ba      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006464:	4b60      	ldr	r3, [pc, #384]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f0      	bne.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	019a      	lsls	r2, r3, #6
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	071b      	lsls	r3, r3, #28
 800647c:	495a      	ldr	r1, [pc, #360]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800647e:	4313      	orrs	r3, r2
 8006480:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006484:	4b57      	ldr	r3, [pc, #348]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8006486:	2201      	movs	r2, #1
 8006488:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800648a:	f7fd fff5 	bl	8004478 <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006490:	e008      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006492:	f7fd fff1 	bl	8004478 <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	2b02      	cmp	r3, #2
 800649e:	d901      	bls.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064a0:	2303      	movs	r3, #3
 80064a2:	e09a      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064a4:	4b50      	ldr	r3, [pc, #320]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d0f0      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0302 	and.w	r3, r3, #2
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 8083 	beq.w	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	4b49      	ldr	r3, [pc, #292]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c6:	4a48      	ldr	r2, [pc, #288]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064cc:	6413      	str	r3, [r2, #64]	; 0x40
 80064ce:	4b46      	ldr	r3, [pc, #280]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80064da:	4b44      	ldr	r3, [pc, #272]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a43      	ldr	r2, [pc, #268]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064e6:	f7fd ffc7 	bl	8004478 <HAL_GetTick>
 80064ea:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80064ec:	e008      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80064ee:	f7fd ffc3 	bl	8004478 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e06c      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006500:	4b3a      	ldr	r3, [pc, #232]	; (80065ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800650c:	4b36      	ldr	r3, [pc, #216]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006514:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d02f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	429a      	cmp	r2, r3
 8006528:	d028      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800652a:	4b2f      	ldr	r3, [pc, #188]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006532:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006534:	4b2e      	ldr	r3, [pc, #184]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006536:	2201      	movs	r2, #1
 8006538:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800653a:	4b2d      	ldr	r3, [pc, #180]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006540:	4a29      	ldr	r2, [pc, #164]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006546:	4b28      	ldr	r3, [pc, #160]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b01      	cmp	r3, #1
 8006550:	d114      	bne.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006552:	f7fd ff91 	bl	8004478 <HAL_GetTick>
 8006556:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006558:	e00a      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800655a:	f7fd ff8d 	bl	8004478 <HAL_GetTick>
 800655e:	4602      	mov	r2, r0
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	1ad3      	subs	r3, r2, r3
 8006564:	f241 3288 	movw	r2, #5000	; 0x1388
 8006568:	4293      	cmp	r3, r2
 800656a:	d901      	bls.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e034      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0ee      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006584:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006588:	d10d      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800658a:	4b17      	ldr	r3, [pc, #92]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800659a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800659e:	4912      	ldr	r1, [pc, #72]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	608b      	str	r3, [r1, #8]
 80065a4:	e005      	b.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80065a6:	4b10      	ldr	r3, [pc, #64]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	4a0f      	ldr	r2, [pc, #60]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065b0:	6093      	str	r3, [r2, #8]
 80065b2:	4b0d      	ldr	r3, [pc, #52]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065be:	490a      	ldr	r1, [pc, #40]	; (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065c0:	4313      	orrs	r3, r2
 80065c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0308 	and.w	r3, r3, #8
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d003      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	7c1a      	ldrb	r2, [r3, #16]
 80065d4:	4b07      	ldr	r3, [pc, #28]	; (80065f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80065d6:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	42470068 	.word	0x42470068
 80065e8:	40023800 	.word	0x40023800
 80065ec:	40007000 	.word	0x40007000
 80065f0:	42470e40 	.word	0x42470e40
 80065f4:	424711e0 	.word	0x424711e0

080065f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b084      	sub	sp, #16
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e066      	b.n	80066dc <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	7f5b      	ldrb	r3, [r3, #29]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2200      	movs	r2, #0
 800661c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fd f864 	bl	80036ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2202      	movs	r2, #2
 8006628:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	22ca      	movs	r2, #202	; 0xca
 8006630:	625a      	str	r2, [r3, #36]	; 0x24
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2253      	movs	r2, #83	; 0x53
 8006638:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 fa45 	bl	8006aca <RTC_EnterInitMode>
 8006640:	4603      	mov	r3, r0
 8006642:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d12c      	bne.n	80066a4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	6812      	ldr	r2, [r2, #0]
 8006654:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006658:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800665c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6899      	ldr	r1, [r3, #8]
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685a      	ldr	r2, [r3, #4]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68d2      	ldr	r2, [r2, #12]
 8006684:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6919      	ldr	r1, [r3, #16]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	041a      	lsls	r2, r3, #16
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fa4c 	bl	8006b38 <RTC_ExitInitMode>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d113      	bne.n	80066d2 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066b8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	699a      	ldr	r2, [r3, #24]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	430a      	orrs	r2, r1
 80066ca:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	22ff      	movs	r2, #255	; 0xff
 80066d8:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80066da:	7bfb      	ldrb	r3, [r7, #15]
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80066e4:	b590      	push	{r4, r7, lr}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	7f1b      	ldrb	r3, [r3, #28]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_RTC_SetTime+0x1c>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e087      	b.n	8006810 <HAL_RTC_SetTime+0x12c>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2201      	movs	r2, #1
 8006704:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2202      	movs	r2, #2
 800670a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d126      	bne.n	8006760 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fa29 	bl	8006b82 <RTC_ByteToBcd2>
 8006730:	4603      	mov	r3, r0
 8006732:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	785b      	ldrb	r3, [r3, #1]
 8006738:	4618      	mov	r0, r3
 800673a:	f000 fa22 	bl	8006b82 <RTC_ByteToBcd2>
 800673e:	4603      	mov	r3, r0
 8006740:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006742:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	789b      	ldrb	r3, [r3, #2]
 8006748:	4618      	mov	r0, r3
 800674a:	f000 fa1a 	bl	8006b82 <RTC_ByteToBcd2>
 800674e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006750:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	78db      	ldrb	r3, [r3, #3]
 8006758:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]
 800675e:	e018      	b.n	8006792 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	785b      	ldrb	r3, [r3, #1]
 800677e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006780:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006786:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	78db      	ldrb	r3, [r3, #3]
 800678c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800678e:	4313      	orrs	r3, r2
 8006790:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	22ca      	movs	r2, #202	; 0xca
 8006798:	625a      	str	r2, [r3, #36]	; 0x24
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2253      	movs	r2, #83	; 0x53
 80067a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f991 	bl	8006aca <RTC_EnterInitMode>
 80067a8:	4603      	mov	r3, r0
 80067aa:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80067ac:	7cfb      	ldrb	r3, [r7, #19]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d120      	bne.n	80067f4 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80067bc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80067c0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80067d0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	6899      	ldr	r1, [r3, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	691b      	ldr	r3, [r3, #16]
 80067e0:	431a      	orrs	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	430a      	orrs	r2, r1
 80067e8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	f000 f9a4 	bl	8006b38 <RTC_ExitInitMode>
 80067f0:	4603      	mov	r3, r0
 80067f2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80067f4:	7cfb      	ldrb	r3, [r7, #19]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d102      	bne.n	8006800 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2201      	movs	r2, #1
 80067fe:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	22ff      	movs	r2, #255	; 0xff
 8006806:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2200      	movs	r2, #0
 800680c:	771a      	strb	r2, [r3, #28]

  return status;
 800680e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006810:	4618      	mov	r0, r3
 8006812:	371c      	adds	r7, #28
 8006814:	46bd      	mov	sp, r7
 8006816:	bd90      	pop	{r4, r7, pc}

08006818 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	691b      	ldr	r3, [r3, #16]
 8006838:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800684a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800684e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	0c1b      	lsrs	r3, r3, #16
 8006854:	b2db      	uxtb	r3, r3
 8006856:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800685a:	b2da      	uxtb	r2, r3
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	0a1b      	lsrs	r3, r3, #8
 8006864:	b2db      	uxtb	r3, r3
 8006866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800686a:	b2da      	uxtb	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	b2db      	uxtb	r3, r3
 8006874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006878:	b2da      	uxtb	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	0d9b      	lsrs	r3, r3, #22
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	b2da      	uxtb	r2, r3
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d11a      	bne.n	80068ca <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f000 f98f 	bl	8006bbc <RTC_Bcd2ToByte>
 800689e:	4603      	mov	r3, r0
 80068a0:	461a      	mov	r2, r3
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	785b      	ldrb	r3, [r3, #1]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 f986 	bl	8006bbc <RTC_Bcd2ToByte>
 80068b0:	4603      	mov	r3, r0
 80068b2:	461a      	mov	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	789b      	ldrb	r3, [r3, #2]
 80068bc:	4618      	mov	r0, r3
 80068be:	f000 f97d 	bl	8006bbc <RTC_Bcd2ToByte>
 80068c2:	4603      	mov	r3, r0
 80068c4:	461a      	mov	r2, r3
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3718      	adds	r7, #24
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068d4:	b590      	push	{r4, r7, lr}
 80068d6:	b087      	sub	sp, #28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	7f1b      	ldrb	r3, [r3, #28]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_RTC_SetDate+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e071      	b.n	80069d4 <HAL_RTC_SetDate+0x100>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2202      	movs	r2, #2
 80068fa:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10e      	bne.n	8006920 <HAL_RTC_SetDate+0x4c>
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	f003 0310 	and.w	r3, r3, #16
 800690a:	2b00      	cmp	r3, #0
 800690c:	d008      	beq.n	8006920 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	f023 0310 	bic.w	r3, r3, #16
 8006916:	b2db      	uxtb	r3, r3
 8006918:	330a      	adds	r3, #10
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d11c      	bne.n	8006960 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	78db      	ldrb	r3, [r3, #3]
 800692a:	4618      	mov	r0, r3
 800692c:	f000 f929 	bl	8006b82 <RTC_ByteToBcd2>
 8006930:	4603      	mov	r3, r0
 8006932:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f922 	bl	8006b82 <RTC_ByteToBcd2>
 800693e:	4603      	mov	r3, r0
 8006940:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006942:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	789b      	ldrb	r3, [r3, #2]
 8006948:	4618      	mov	r0, r3
 800694a:	f000 f91a 	bl	8006b82 <RTC_ByteToBcd2>
 800694e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006950:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800695a:	4313      	orrs	r3, r2
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	e00e      	b.n	800697e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	78db      	ldrb	r3, [r3, #3]
 8006964:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	785b      	ldrb	r3, [r3, #1]
 800696a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800696c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800696e:	68ba      	ldr	r2, [r7, #8]
 8006970:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8006972:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800697a:	4313      	orrs	r3, r2
 800697c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	22ca      	movs	r2, #202	; 0xca
 8006984:	625a      	str	r2, [r3, #36]	; 0x24
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2253      	movs	r2, #83	; 0x53
 800698c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 f89b 	bl	8006aca <RTC_EnterInitMode>
 8006994:	4603      	mov	r3, r0
 8006996:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006998:	7cfb      	ldrb	r3, [r7, #19]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10c      	bne.n	80069b8 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069a8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 f8c2 	bl	8006b38 <RTC_ExitInitMode>
 80069b4:	4603      	mov	r3, r0
 80069b6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2201      	movs	r2, #1
 80069c2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	22ff      	movs	r2, #255	; 0xff
 80069ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	771a      	strb	r2, [r3, #28]

  return status;
 80069d2:	7cfb      	ldrb	r3, [r7, #19]
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	371c      	adds	r7, #28
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd90      	pop	{r4, r7, pc}

080069dc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80069e8:	2300      	movs	r3, #0
 80069ea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80069f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	0c1b      	lsrs	r3, r3, #16
 8006a00:	b2da      	uxtb	r2, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	0a1b      	lsrs	r3, r3, #8
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	f003 031f 	and.w	r3, r3, #31
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	0b5b      	lsrs	r3, r3, #13
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	f003 0307 	and.w	r3, r3, #7
 8006a2e:	b2da      	uxtb	r2, r3
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d11a      	bne.n	8006a70 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	78db      	ldrb	r3, [r3, #3]
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 f8bc 	bl	8006bbc <RTC_Bcd2ToByte>
 8006a44:	4603      	mov	r3, r0
 8006a46:	461a      	mov	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	785b      	ldrb	r3, [r3, #1]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 f8b3 	bl	8006bbc <RTC_Bcd2ToByte>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	789b      	ldrb	r3, [r3, #2]
 8006a62:	4618      	mov	r0, r3
 8006a64:	f000 f8aa 	bl	8006bbc <RTC_Bcd2ToByte>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a94:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a96:	f7fd fcef 	bl	8004478 <HAL_GetTick>
 8006a9a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a9c:	e009      	b.n	8006ab2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a9e:	f7fd fceb 	bl	8004478 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aac:	d901      	bls.n	8006ab2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006aae:	2303      	movs	r3, #3
 8006ab0:	e007      	b.n	8006ac2 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	f003 0320 	and.w	r3, r3, #32
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d0ee      	beq.n	8006a9e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d122      	bne.n	8006b2e <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	68da      	ldr	r2, [r3, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006af6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006af8:	f7fd fcbe 	bl	8004478 <HAL_GetTick>
 8006afc:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006afe:	e00c      	b.n	8006b1a <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006b00:	f7fd fcba 	bl	8004478 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b0e:	d904      	bls.n	8006b1a <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2204      	movs	r2, #4
 8006b14:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <RTC_EnterInitMode+0x64>
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d1e8      	bne.n	8006b00 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b52:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	f003 0320 	and.w	r3, r3, #32
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7ff ff89 	bl	8006a7a <HAL_RTC_WaitForSynchro>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d004      	beq.n	8006b78 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2204      	movs	r2, #4
 8006b72:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b085      	sub	sp, #20
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	4603      	mov	r3, r0
 8006b8a:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006b90:	e005      	b.n	8006b9e <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	3301      	adds	r3, #1
 8006b96:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	3b0a      	subs	r3, #10
 8006b9c:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
 8006ba0:	2b09      	cmp	r3, #9
 8006ba2:	d8f6      	bhi.n	8006b92 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006ba4:	7bfb      	ldrb	r3, [r7, #15]
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	b2da      	uxtb	r2, r3
 8006baa:	79fb      	ldrb	r3, [r7, #7]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	b2db      	uxtb	r3, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	091b      	lsrs	r3, r3, #4
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	0092      	lsls	r2, r2, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	005b      	lsls	r3, r3, #1
 8006bd8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	f003 030f 	and.w	r3, r3, #15
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	7bfb      	ldrb	r3, [r7, #15]
 8006be4:	4413      	add	r3, r2
 8006be6:	b2db      	uxtb	r3, r3
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b087      	sub	sp, #28
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3350      	adds	r3, #80	; 0x50
 8006c0a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	4413      	add	r3, r2
 8006c14:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	601a      	str	r2, [r3, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	371c      	adds	r7, #28
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr

08006c28 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8006c32:	2300      	movs	r3, #0
 8006c34:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	3350      	adds	r3, #80	; 0x50
 8006c3c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4413      	add	r3, r2
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr

08006c58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e07b      	b.n	8006d62 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d108      	bne.n	8006c84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c7a:	d009      	beq.n	8006c90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	61da      	str	r2, [r3, #28]
 8006c82:	e005      	b.n	8006c90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d106      	bne.n	8006cb0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f7fc fd4a 	bl	8003744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cd8:	431a      	orrs	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f003 0302 	and.w	r3, r3, #2
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69db      	ldr	r3, [r3, #28]
 8006d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6a1b      	ldr	r3, [r3, #32]
 8006d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d14:	ea42 0103 	orr.w	r1, r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d1c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	0c1b      	lsrs	r3, r3, #16
 8006d2e:	f003 0104 	and.w	r1, r3, #4
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d36:	f003 0210 	and.w	r2, r3, #16
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	430a      	orrs	r2, r1
 8006d40:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d50:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3708      	adds	r7, #8
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	603b      	str	r3, [r7, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_SPI_Transmit+0x22>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e126      	b.n	8006fda <HAL_SPI_Transmit+0x270>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d94:	f7fd fb70 	bl	8004478 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d002      	beq.n	8006db0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006daa:	2302      	movs	r3, #2
 8006dac:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dae:	e10b      	b.n	8006fc8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_SPI_Transmit+0x52>
 8006db6:	88fb      	ldrh	r3, [r7, #6]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d102      	bne.n	8006dc2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dc0:	e102      	b.n	8006fc8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2203      	movs	r2, #3
 8006dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	88fa      	ldrh	r2, [r7, #6]
 8006dda:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	88fa      	ldrh	r2, [r7, #6]
 8006de0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e08:	d10f      	bne.n	8006e2a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e34:	2b40      	cmp	r3, #64	; 0x40
 8006e36:	d007      	beq.n	8006e48 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e50:	d14b      	bne.n	8006eea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d002      	beq.n	8006e60 <HAL_SPI_Transmit+0xf6>
 8006e5a:	8afb      	ldrh	r3, [r7, #22]
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d13e      	bne.n	8006ede <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e64:	881a      	ldrh	r2, [r3, #0]
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e70:	1c9a      	adds	r2, r3, #2
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	3b01      	subs	r3, #1
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e84:	e02b      	b.n	8006ede <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d112      	bne.n	8006eba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	881a      	ldrh	r2, [r3, #0]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	1c9a      	adds	r2, r3, #2
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006eb8:	e011      	b.n	8006ede <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eba:	f7fd fadd 	bl	8004478 <HAL_GetTick>
 8006ebe:	4602      	mov	r2, r0
 8006ec0:	69bb      	ldr	r3, [r7, #24]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d803      	bhi.n	8006ed2 <HAL_SPI_Transmit+0x168>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed0:	d102      	bne.n	8006ed8 <HAL_SPI_Transmit+0x16e>
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006edc:	e074      	b.n	8006fc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1ce      	bne.n	8006e86 <HAL_SPI_Transmit+0x11c>
 8006ee8:	e04c      	b.n	8006f84 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d002      	beq.n	8006ef8 <HAL_SPI_Transmit+0x18e>
 8006ef2:	8afb      	ldrh	r3, [r7, #22]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d140      	bne.n	8006f7a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	330c      	adds	r3, #12
 8006f02:	7812      	ldrb	r2, [r2, #0]
 8006f04:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	3b01      	subs	r3, #1
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f1e:	e02c      	b.n	8006f7a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d113      	bne.n	8006f56 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	330c      	adds	r3, #12
 8006f38:	7812      	ldrb	r2, [r2, #0]
 8006f3a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f40:	1c5a      	adds	r2, r3, #1
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f54:	e011      	b.n	8006f7a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f56:	f7fd fa8f 	bl	8004478 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d803      	bhi.n	8006f6e <HAL_SPI_Transmit+0x204>
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6c:	d102      	bne.n	8006f74 <HAL_SPI_Transmit+0x20a>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f78:	e026      	b.n	8006fc8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1cd      	bne.n	8006f20 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	6839      	ldr	r1, [r7, #0]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 fa63 	bl	8007454 <SPI_EndRxTxTransaction>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d002      	beq.n	8006f9a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2220      	movs	r2, #32
 8006f98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10a      	bne.n	8006fb8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	613b      	str	r3, [r7, #16]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	613b      	str	r3, [r7, #16]
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	613b      	str	r3, [r7, #16]
 8006fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d002      	beq.n	8006fc6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	77fb      	strb	r3, [r7, #31]
 8006fc4:	e000      	b.n	8006fc8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fc6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fd8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3720      	adds	r7, #32
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b08c      	sub	sp, #48	; 0x30
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	60b9      	str	r1, [r7, #8]
 8006fec:	607a      	str	r2, [r7, #4]
 8006fee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <HAL_SPI_TransmitReceive+0x26>
 8007004:	2302      	movs	r3, #2
 8007006:	e18a      	b.n	800731e <HAL_SPI_TransmitReceive+0x33c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007010:	f7fd fa32 	bl	8004478 <HAL_GetTick>
 8007014:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800701c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007026:	887b      	ldrh	r3, [r7, #2]
 8007028:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800702a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800702e:	2b01      	cmp	r3, #1
 8007030:	d00f      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x70>
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007038:	d107      	bne.n	800704a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <HAL_SPI_TransmitReceive+0x68>
 8007042:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007046:	2b04      	cmp	r3, #4
 8007048:	d003      	beq.n	8007052 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800704a:	2302      	movs	r3, #2
 800704c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007050:	e15b      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x82>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_TransmitReceive+0x82>
 800705e:	887b      	ldrh	r3, [r7, #2]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800706a:	e14e      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b04      	cmp	r3, #4
 8007076:	d003      	beq.n	8007080 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2205      	movs	r2, #5
 800707c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2200      	movs	r2, #0
 8007084:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	887a      	ldrh	r2, [r7, #2]
 8007090:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	887a      	ldrh	r2, [r7, #2]
 8007096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	887a      	ldrh	r2, [r7, #2]
 80070a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	887a      	ldrh	r2, [r7, #2]
 80070a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c0:	2b40      	cmp	r3, #64	; 0x40
 80070c2:	d007      	beq.n	80070d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070dc:	d178      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d002      	beq.n	80070ec <HAL_SPI_TransmitReceive+0x10a>
 80070e6:	8b7b      	ldrh	r3, [r7, #26]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d166      	bne.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f0:	881a      	ldrh	r2, [r3, #0]
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fc:	1c9a      	adds	r2, r3, #2
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007106:	b29b      	uxth	r3, r3
 8007108:	3b01      	subs	r3, #1
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007110:	e053      	b.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b02      	cmp	r3, #2
 800711e:	d11b      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x176>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007124:	b29b      	uxth	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d016      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x176>
 800712a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800712c:	2b01      	cmp	r3, #1
 800712e:	d113      	bne.n	8007158 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	1c9a      	adds	r2, r3, #2
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007154:	2300      	movs	r3, #0
 8007156:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b01      	cmp	r3, #1
 8007164:	d119      	bne.n	800719a <HAL_SPI_TransmitReceive+0x1b8>
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800716a:	b29b      	uxth	r3, r3
 800716c:	2b00      	cmp	r3, #0
 800716e:	d014      	beq.n	800719a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717a:	b292      	uxth	r2, r2
 800717c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	1c9a      	adds	r2, r3, #2
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800718c:	b29b      	uxth	r3, r3
 800718e:	3b01      	subs	r3, #1
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007196:	2301      	movs	r3, #1
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800719a:	f7fd f96d 	bl	8004478 <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d807      	bhi.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d003      	beq.n	80071ba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071b2:	2303      	movs	r3, #3
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071b8:	e0a7      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071be:	b29b      	uxth	r3, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1a6      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x130>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1a1      	bne.n	8007112 <HAL_SPI_TransmitReceive+0x130>
 80071ce:	e07c      	b.n	80072ca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_SPI_TransmitReceive+0x1fc>
 80071d8:	8b7b      	ldrh	r3, [r7, #26]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d16b      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	330c      	adds	r3, #12
 80071e8:	7812      	ldrb	r2, [r2, #0]
 80071ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29a      	uxth	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007204:	e057      	b.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	689b      	ldr	r3, [r3, #8]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b02      	cmp	r3, #2
 8007212:	d11c      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26c>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	d017      	beq.n	800724e <HAL_SPI_TransmitReceive+0x26c>
 800721e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007220:	2b01      	cmp	r3, #1
 8007222:	d114      	bne.n	800724e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	330c      	adds	r3, #12
 800722e:	7812      	ldrb	r2, [r2, #0]
 8007230:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007236:	1c5a      	adds	r2, r3, #1
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007240:	b29b      	uxth	r3, r3
 8007242:	3b01      	subs	r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b01      	cmp	r3, #1
 800725a:	d119      	bne.n	8007290 <HAL_SPI_TransmitReceive+0x2ae>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007260:	b29b      	uxth	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d014      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68da      	ldr	r2, [r3, #12]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	b2d2      	uxtb	r2, r2
 8007272:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007282:	b29b      	uxth	r3, r3
 8007284:	3b01      	subs	r3, #1
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800728c:	2301      	movs	r3, #1
 800728e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007290:	f7fd f8f2 	bl	8004478 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800729c:	429a      	cmp	r2, r3
 800729e:	d803      	bhi.n	80072a8 <HAL_SPI_TransmitReceive+0x2c6>
 80072a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a6:	d102      	bne.n	80072ae <HAL_SPI_TransmitReceive+0x2cc>
 80072a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072b4:	e029      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1a2      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x224>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d19d      	bne.n	8007206 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80072ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f8c0 	bl	8007454 <SPI_EndRxTxTransaction>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d006      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2220      	movs	r2, #32
 80072e4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80072e6:	e010      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d10b      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80072f0:	2300      	movs	r3, #0
 80072f2:	617b      	str	r3, [r7, #20]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
 80072fa:	617b      	str	r3, [r7, #20]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	617b      	str	r3, [r7, #20]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	e000      	b.n	800730a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007308:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800731a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800731e:	4618      	mov	r0, r3
 8007320:	3730      	adds	r7, #48	; 0x30
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007334:	b2db      	uxtb	r3, r3
}
 8007336:	4618      	mov	r0, r3
 8007338:	370c      	adds	r7, #12
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr
	...

08007344 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b088      	sub	sp, #32
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	4613      	mov	r3, r2
 8007352:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007354:	f7fd f890 	bl	8004478 <HAL_GetTick>
 8007358:	4602      	mov	r2, r0
 800735a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800735c:	1a9b      	subs	r3, r3, r2
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	4413      	add	r3, r2
 8007362:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007364:	f7fd f888 	bl	8004478 <HAL_GetTick>
 8007368:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800736a:	4b39      	ldr	r3, [pc, #228]	; (8007450 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	015b      	lsls	r3, r3, #5
 8007370:	0d1b      	lsrs	r3, r3, #20
 8007372:	69fa      	ldr	r2, [r7, #28]
 8007374:	fb02 f303 	mul.w	r3, r2, r3
 8007378:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800737a:	e054      	b.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d050      	beq.n	8007426 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007384:	f7fd f878 	bl	8004478 <HAL_GetTick>
 8007388:	4602      	mov	r2, r0
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	429a      	cmp	r2, r3
 8007392:	d902      	bls.n	800739a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d13d      	bne.n	8007416 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b2:	d111      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073bc:	d004      	beq.n	80073c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073c6:	d107      	bne.n	80073d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073e0:	d10f      	bne.n	8007402 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073f0:	601a      	str	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007400:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007412:	2303      	movs	r3, #3
 8007414:	e017      	b.n	8007446 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	3b01      	subs	r3, #1
 8007424:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	4013      	ands	r3, r2
 8007430:	68ba      	ldr	r2, [r7, #8]
 8007432:	429a      	cmp	r2, r3
 8007434:	bf0c      	ite	eq
 8007436:	2301      	moveq	r3, #1
 8007438:	2300      	movne	r3, #0
 800743a:	b2db      	uxtb	r3, r3
 800743c:	461a      	mov	r2, r3
 800743e:	79fb      	ldrb	r3, [r7, #7]
 8007440:	429a      	cmp	r2, r3
 8007442:	d19b      	bne.n	800737c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3720      	adds	r7, #32
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000208 	.word	0x20000208

08007454 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af02      	add	r7, sp, #8
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007460:	4b1b      	ldr	r3, [pc, #108]	; (80074d0 <SPI_EndRxTxTransaction+0x7c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <SPI_EndRxTxTransaction+0x80>)
 8007466:	fba2 2303 	umull	r2, r3, r2, r3
 800746a:	0d5b      	lsrs	r3, r3, #21
 800746c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800747e:	d112      	bne.n	80074a6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	9300      	str	r3, [sp, #0]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2200      	movs	r2, #0
 8007488:	2180      	movs	r1, #128	; 0x80
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f7ff ff5a 	bl	8007344 <SPI_WaitFlagStateUntilTimeout>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d016      	beq.n	80074c4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800749a:	f043 0220 	orr.w	r2, r3, #32
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e00f      	b.n	80074c6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074bc:	2b80      	cmp	r3, #128	; 0x80
 80074be:	d0f2      	beq.n	80074a6 <SPI_EndRxTxTransaction+0x52>
 80074c0:	e000      	b.n	80074c4 <SPI_EndRxTxTransaction+0x70>
        break;
 80074c2:	bf00      	nop
  }

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3718      	adds	r7, #24
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	20000208 	.word	0x20000208
 80074d4:	165e9f81 	.word	0x165e9f81

080074d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d101      	bne.n	80074ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e041      	b.n	800756e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d106      	bne.n	8007504 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fc f99e 	bl	8003840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	3304      	adds	r3, #4
 8007514:	4619      	mov	r1, r3
 8007516:	4610      	mov	r0, r2
 8007518:	f000 fae2 	bl	8007ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3708      	adds	r7, #8
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
	...

08007578 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007586:	b2db      	uxtb	r3, r3
 8007588:	2b01      	cmp	r3, #1
 800758a:	d001      	beq.n	8007590 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e03c      	b.n	800760a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2202      	movs	r2, #2
 8007594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a1e      	ldr	r2, [pc, #120]	; (8007618 <HAL_TIM_Base_Start+0xa0>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d018      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075aa:	d013      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a1a      	ldr	r2, [pc, #104]	; (800761c <HAL_TIM_Base_Start+0xa4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d00e      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a19      	ldr	r2, [pc, #100]	; (8007620 <HAL_TIM_Base_Start+0xa8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d009      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a17      	ldr	r2, [pc, #92]	; (8007624 <HAL_TIM_Base_Start+0xac>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d004      	beq.n	80075d4 <HAL_TIM_Base_Start+0x5c>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a16      	ldr	r2, [pc, #88]	; (8007628 <HAL_TIM_Base_Start+0xb0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d111      	bne.n	80075f8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0307 	and.w	r3, r3, #7
 80075de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2b06      	cmp	r3, #6
 80075e4:	d010      	beq.n	8007608 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f042 0201 	orr.w	r2, r2, #1
 80075f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f6:	e007      	b.n	8007608 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f042 0201 	orr.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000
 800761c:	40000400 	.word	0x40000400
 8007620:	40000800 	.word	0x40000800
 8007624:	40000c00 	.word	0x40000c00
 8007628:	40014000 	.word	0x40014000

0800762c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b01      	cmp	r3, #1
 800763e:	d001      	beq.n	8007644 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e044      	b.n	80076ce <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2202      	movs	r2, #2
 8007648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1e      	ldr	r2, [pc, #120]	; (80076dc <HAL_TIM_Base_Start_IT+0xb0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d018      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x6c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766e:	d013      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x6c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1a      	ldr	r2, [pc, #104]	; (80076e0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d00e      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x6c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a19      	ldr	r2, [pc, #100]	; (80076e4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d009      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x6c>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a17      	ldr	r2, [pc, #92]	; (80076e8 <HAL_TIM_Base_Start_IT+0xbc>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d004      	beq.n	8007698 <HAL_TIM_Base_Start_IT+0x6c>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a16      	ldr	r2, [pc, #88]	; (80076ec <HAL_TIM_Base_Start_IT+0xc0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d111      	bne.n	80076bc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b06      	cmp	r3, #6
 80076a8:	d010      	beq.n	80076cc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f042 0201 	orr.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ba:	e007      	b.n	80076cc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f042 0201 	orr.w	r2, r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40010000 	.word	0x40010000
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800
 80076e8:	40000c00 	.word	0x40000c00
 80076ec:	40014000 	.word	0x40014000

080076f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0302 	and.w	r3, r3, #2
 8007702:	2b02      	cmp	r3, #2
 8007704:	d122      	bne.n	800774c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	f003 0302 	and.w	r3, r3, #2
 8007710:	2b02      	cmp	r3, #2
 8007712:	d11b      	bne.n	800774c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f06f 0202 	mvn.w	r2, #2
 800771c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	f003 0303 	and.w	r3, r3, #3
 800772e:	2b00      	cmp	r3, #0
 8007730:	d003      	beq.n	800773a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f9b5 	bl	8007aa2 <HAL_TIM_IC_CaptureCallback>
 8007738:	e005      	b.n	8007746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f9a7 	bl	8007a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f9b8 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f003 0304 	and.w	r3, r3, #4
 8007756:	2b04      	cmp	r3, #4
 8007758:	d122      	bne.n	80077a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b04      	cmp	r3, #4
 8007766:	d11b      	bne.n	80077a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f06f 0204 	mvn.w	r2, #4
 8007770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2202      	movs	r2, #2
 8007776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f98b 	bl	8007aa2 <HAL_TIM_IC_CaptureCallback>
 800778c:	e005      	b.n	800779a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 f97d 	bl	8007a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 f98e 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b08      	cmp	r3, #8
 80077ac:	d122      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b08      	cmp	r3, #8
 80077ba:	d11b      	bne.n	80077f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f06f 0208 	mvn.w	r2, #8
 80077c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2204      	movs	r2, #4
 80077ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	69db      	ldr	r3, [r3, #28]
 80077d2:	f003 0303 	and.w	r3, r3, #3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f961 	bl	8007aa2 <HAL_TIM_IC_CaptureCallback>
 80077e0:	e005      	b.n	80077ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 f953 	bl	8007a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 f964 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b10      	cmp	r3, #16
 8007800:	d122      	bne.n	8007848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	f003 0310 	and.w	r3, r3, #16
 800780c:	2b10      	cmp	r3, #16
 800780e:	d11b      	bne.n	8007848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f06f 0210 	mvn.w	r2, #16
 8007818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2208      	movs	r2, #8
 800781e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f937 	bl	8007aa2 <HAL_TIM_IC_CaptureCallback>
 8007834:	e005      	b.n	8007842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f929 	bl	8007a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 f93a 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	f003 0301 	and.w	r3, r3, #1
 8007852:	2b01      	cmp	r3, #1
 8007854:	d10e      	bne.n	8007874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	f003 0301 	and.w	r3, r3, #1
 8007860:	2b01      	cmp	r3, #1
 8007862:	d107      	bne.n	8007874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f06f 0201 	mvn.w	r2, #1
 800786c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f7fb fea6 	bl	80035c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800787e:	2b80      	cmp	r3, #128	; 0x80
 8007880:	d10e      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788c:	2b80      	cmp	r3, #128	; 0x80
 800788e:	d107      	bne.n	80078a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fab2 	bl	8007e04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b40      	cmp	r3, #64	; 0x40
 80078ac:	d10e      	bne.n	80078cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078b8:	2b40      	cmp	r3, #64	; 0x40
 80078ba:	d107      	bne.n	80078cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f8ff 	bl	8007aca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	f003 0320 	and.w	r3, r3, #32
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d10e      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b20      	cmp	r3, #32
 80078e6:	d107      	bne.n	80078f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f06f 0220 	mvn.w	r2, #32
 80078f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa7c 	bl	8007df0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078f8:	bf00      	nop
 80078fa:	3708      	adds	r7, #8
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_TIM_ConfigClockSource+0x1c>
 8007918:	2302      	movs	r3, #2
 800791a:	e0b4      	b.n	8007a86 <HAL_TIM_ConfigClockSource+0x186>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2202      	movs	r2, #2
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	689b      	ldr	r3, [r3, #8]
 8007932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800793a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	68ba      	ldr	r2, [r7, #8]
 800794a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007954:	d03e      	beq.n	80079d4 <HAL_TIM_ConfigClockSource+0xd4>
 8007956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800795a:	f200 8087 	bhi.w	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 800795e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007962:	f000 8086 	beq.w	8007a72 <HAL_TIM_ConfigClockSource+0x172>
 8007966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800796a:	d87f      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 800796c:	2b70      	cmp	r3, #112	; 0x70
 800796e:	d01a      	beq.n	80079a6 <HAL_TIM_ConfigClockSource+0xa6>
 8007970:	2b70      	cmp	r3, #112	; 0x70
 8007972:	d87b      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 8007974:	2b60      	cmp	r3, #96	; 0x60
 8007976:	d050      	beq.n	8007a1a <HAL_TIM_ConfigClockSource+0x11a>
 8007978:	2b60      	cmp	r3, #96	; 0x60
 800797a:	d877      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 800797c:	2b50      	cmp	r3, #80	; 0x50
 800797e:	d03c      	beq.n	80079fa <HAL_TIM_ConfigClockSource+0xfa>
 8007980:	2b50      	cmp	r3, #80	; 0x50
 8007982:	d873      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 8007984:	2b40      	cmp	r3, #64	; 0x40
 8007986:	d058      	beq.n	8007a3a <HAL_TIM_ConfigClockSource+0x13a>
 8007988:	2b40      	cmp	r3, #64	; 0x40
 800798a:	d86f      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 800798c:	2b30      	cmp	r3, #48	; 0x30
 800798e:	d064      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x15a>
 8007990:	2b30      	cmp	r3, #48	; 0x30
 8007992:	d86b      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 8007994:	2b20      	cmp	r3, #32
 8007996:	d060      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x15a>
 8007998:	2b20      	cmp	r3, #32
 800799a:	d867      	bhi.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
 800799c:	2b00      	cmp	r3, #0
 800799e:	d05c      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x15a>
 80079a0:	2b10      	cmp	r3, #16
 80079a2:	d05a      	beq.n	8007a5a <HAL_TIM_ConfigClockSource+0x15a>
 80079a4:	e062      	b.n	8007a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6818      	ldr	r0, [r3, #0]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	6899      	ldr	r1, [r3, #8]
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	68db      	ldr	r3, [r3, #12]
 80079b6:	f000 f98d 	bl	8007cd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	609a      	str	r2, [r3, #8]
      break;
 80079d2:	e04f      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6818      	ldr	r0, [r3, #0]
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	6899      	ldr	r1, [r3, #8]
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	f000 f976 	bl	8007cd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079f6:	609a      	str	r2, [r3, #8]
      break;
 80079f8:	e03c      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	6859      	ldr	r1, [r3, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	461a      	mov	r2, r3
 8007a08:	f000 f8ea 	bl	8007be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2150      	movs	r1, #80	; 0x50
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 f943 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 8007a18:	e02c      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	6859      	ldr	r1, [r3, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	461a      	mov	r2, r3
 8007a28:	f000 f909 	bl	8007c3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2160      	movs	r1, #96	; 0x60
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 f933 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 8007a38:	e01c      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6818      	ldr	r0, [r3, #0]
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	6859      	ldr	r1, [r3, #4]
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f000 f8ca 	bl	8007be0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2140      	movs	r1, #64	; 0x40
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 f923 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 8007a58:	e00c      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4619      	mov	r1, r3
 8007a64:	4610      	mov	r0, r2
 8007a66:	f000 f91a 	bl	8007c9e <TIM_ITRx_SetConfig>
      break;
 8007a6a:	e003      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8007a70:	e000      	b.n	8007a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr

08007aa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aa2:	b480      	push	{r7}
 8007aa4:	b083      	sub	sp, #12
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b083      	sub	sp, #12
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007abe:	bf00      	nop
 8007ac0:	370c      	adds	r7, #12
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b083      	sub	sp, #12
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4a34      	ldr	r2, [pc, #208]	; (8007bc4 <TIM_Base_SetConfig+0xe4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d00f      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afe:	d00b      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	4a31      	ldr	r2, [pc, #196]	; (8007bc8 <TIM_Base_SetConfig+0xe8>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d007      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a30      	ldr	r2, [pc, #192]	; (8007bcc <TIM_Base_SetConfig+0xec>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_Base_SetConfig+0x38>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a2f      	ldr	r2, [pc, #188]	; (8007bd0 <TIM_Base_SetConfig+0xf0>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d108      	bne.n	8007b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a25      	ldr	r2, [pc, #148]	; (8007bc4 <TIM_Base_SetConfig+0xe4>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d01b      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b38:	d017      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a22      	ldr	r2, [pc, #136]	; (8007bc8 <TIM_Base_SetConfig+0xe8>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d013      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a21      	ldr	r2, [pc, #132]	; (8007bcc <TIM_Base_SetConfig+0xec>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d00f      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a20      	ldr	r2, [pc, #128]	; (8007bd0 <TIM_Base_SetConfig+0xf0>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d00b      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <TIM_Base_SetConfig+0xf4>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d007      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1e      	ldr	r2, [pc, #120]	; (8007bd8 <TIM_Base_SetConfig+0xf8>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d003      	beq.n	8007b6a <TIM_Base_SetConfig+0x8a>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <TIM_Base_SetConfig+0xfc>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d108      	bne.n	8007b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	689a      	ldr	r2, [r3, #8]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681a      	ldr	r2, [r3, #0]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a08      	ldr	r2, [pc, #32]	; (8007bc4 <TIM_Base_SetConfig+0xe4>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d103      	bne.n	8007bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	615a      	str	r2, [r3, #20]
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	40010000 	.word	0x40010000
 8007bc8:	40000400 	.word	0x40000400
 8007bcc:	40000800 	.word	0x40000800
 8007bd0:	40000c00 	.word	0x40000c00
 8007bd4:	40014000 	.word	0x40014000
 8007bd8:	40014400 	.word	0x40014400
 8007bdc:	40014800 	.word	0x40014800

08007be0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	f023 0201 	bic.w	r2, r3, #1
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f023 030a 	bic.w	r3, r3, #10
 8007c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	621a      	str	r2, [r3, #32]
}
 8007c32:	bf00      	nop
 8007c34:	371c      	adds	r7, #28
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b087      	sub	sp, #28
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	60f8      	str	r0, [r7, #12]
 8007c46:	60b9      	str	r1, [r7, #8]
 8007c48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6a1b      	ldr	r3, [r3, #32]
 8007c4e:	f023 0210 	bic.w	r2, r3, #16
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	031b      	lsls	r3, r3, #12
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007c7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	011b      	lsls	r3, r3, #4
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	621a      	str	r2, [r3, #32]
}
 8007c92:	bf00      	nop
 8007c94:	371c      	adds	r7, #28
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b085      	sub	sp, #20
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007cb6:	683a      	ldr	r2, [r7, #0]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	f043 0307 	orr.w	r3, r3, #7
 8007cc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	68fa      	ldr	r2, [r7, #12]
 8007cc6:	609a      	str	r2, [r3, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	021a      	lsls	r2, r3, #8
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	431a      	orrs	r2, r3
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	609a      	str	r2, [r3, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	371c      	adds	r7, #28
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d101      	bne.n	8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d28:	2302      	movs	r3, #2
 8007d2a:	e050      	b.n	8007dce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2202      	movs	r2, #2
 8007d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68fa      	ldr	r2, [r7, #12]
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a1c      	ldr	r2, [pc, #112]	; (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d018      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d78:	d013      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a18      	ldr	r2, [pc, #96]	; (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d00e      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a16      	ldr	r2, [pc, #88]	; (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d009      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a15      	ldr	r2, [pc, #84]	; (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d004      	beq.n	8007da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a13      	ldr	r2, [pc, #76]	; (8007dec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d10c      	bne.n	8007dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	4313      	orrs	r3, r2
 8007db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3714      	adds	r7, #20
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40010000 	.word	0x40010000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b083      	sub	sp, #12
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007df8:	bf00      	nop
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	e03f      	b.n	8007eaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fb fd58 	bl	80038f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2224      	movs	r2, #36	; 0x24
 8007e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	68da      	ldr	r2, [r3, #12]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fe11 	bl	8008a84 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691a      	ldr	r2, [r3, #16]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	695a      	ldr	r2, [r3, #20]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2220      	movs	r2, #32
 8007e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b08a      	sub	sp, #40	; 0x28
 8007eb6:	af02      	add	r7, sp, #8
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	603b      	str	r3, [r7, #0]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d17c      	bne.n	8007fcc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <HAL_UART_Transmit+0x2c>
 8007ed8:	88fb      	ldrh	r3, [r7, #6]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d101      	bne.n	8007ee2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	e075      	b.n	8007fce <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <HAL_UART_Transmit+0x3e>
 8007eec:	2302      	movs	r3, #2
 8007eee:	e06e      	b.n	8007fce <HAL_UART_Transmit+0x11c>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2201      	movs	r2, #1
 8007ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2221      	movs	r2, #33	; 0x21
 8007f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f06:	f7fc fab7 	bl	8004478 <HAL_GetTick>
 8007f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	88fa      	ldrh	r2, [r7, #6]
 8007f10:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	88fa      	ldrh	r2, [r7, #6]
 8007f16:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f20:	d108      	bne.n	8007f34 <HAL_UART_Transmit+0x82>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d104      	bne.n	8007f34 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	61bb      	str	r3, [r7, #24]
 8007f32:	e003      	b.n	8007f3c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007f44:	e02a      	b.n	8007f9c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	9300      	str	r3, [sp, #0]
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2180      	movs	r1, #128	; 0x80
 8007f50:	68f8      	ldr	r0, [r7, #12]
 8007f52:	f000 fb51 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d001      	beq.n	8007f60 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e036      	b.n	8007fce <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	881b      	ldrh	r3, [r3, #0]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f74:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f76:	69bb      	ldr	r3, [r7, #24]
 8007f78:	3302      	adds	r3, #2
 8007f7a:	61bb      	str	r3, [r7, #24]
 8007f7c:	e007      	b.n	8007f8e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	781a      	ldrb	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	3b01      	subs	r3, #1
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1cf      	bne.n	8007f46 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2200      	movs	r2, #0
 8007fae:	2140      	movs	r1, #64	; 0x40
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f000 fb21 	bl	80085f8 <UART_WaitOnFlagUntilTimeout>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d001      	beq.n	8007fc0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e006      	b.n	8007fce <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e000      	b.n	8007fce <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007fcc:	2302      	movs	r3, #2
  }
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3720      	adds	r7, #32
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}

08007fd6 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fd6:	b580      	push	{r7, lr}
 8007fd8:	b08c      	sub	sp, #48	; 0x30
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d152      	bne.n	8008096 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d002      	beq.n	8007ffc <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8007ff6:	88fb      	ldrh	r3, [r7, #6]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e04b      	b.n	8008098 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
    }

    __HAL_LOCK(huart);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008006:	2b01      	cmp	r3, #1
 8008008:	d101      	bne.n	800800e <HAL_UARTEx_ReceiveToIdle_IT+0x38>
 800800a:	2302      	movs	r3, #2
 800800c:	e044      	b.n	8008098 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2201      	movs	r2, #1
 800801a:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_IT(huart, pData, Size);
 800801c:	88fb      	ldrh	r3, [r7, #6]
 800801e:	461a      	mov	r2, r3
 8008020:	68b9      	ldr	r1, [r7, #8]
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fb56 	bl	80086d4 <UART_Start_Receive_IT>
 8008028:	4603      	mov	r3, r0
 800802a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800802e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008032:	2b00      	cmp	r3, #0
 8008034:	d12c      	bne.n	8008090 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	2b01      	cmp	r3, #1
 800803c:	d125      	bne.n	800808a <HAL_UARTEx_ReceiveToIdle_IT+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	613b      	str	r3, [r7, #16]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	330c      	adds	r3, #12
 800805a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	e853 3f00 	ldrex	r3, [r3]
 8008062:	617b      	str	r3, [r7, #20]
   return(result);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	f043 0310 	orr.w	r3, r3, #16
 800806a:	62bb      	str	r3, [r7, #40]	; 0x28
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	330c      	adds	r3, #12
 8008072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008074:	627a      	str	r2, [r7, #36]	; 0x24
 8008076:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008078:	6a39      	ldr	r1, [r7, #32]
 800807a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807c:	e841 2300 	strex	r3, r2, [r1]
 8008080:	61fb      	str	r3, [r7, #28]
   return(result);
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d1e5      	bne.n	8008054 <HAL_UARTEx_ReceiveToIdle_IT+0x7e>
 8008088:	e002      	b.n	8008090 <HAL_UARTEx_ReceiveToIdle_IT+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008094:	e000      	b.n	8008098 <HAL_UARTEx_ReceiveToIdle_IT+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008096:	2302      	movs	r3, #2
  }
}
 8008098:	4618      	mov	r0, r3
 800809a:	3730      	adds	r7, #48	; 0x30
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b0ba      	sub	sp, #232	; 0xe8
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80080c6:	2300      	movs	r3, #0
 80080c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80080de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10f      	bne.n	8008106 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80080e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080ea:	f003 0320 	and.w	r3, r3, #32
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d009      	beq.n	8008106 <HAL_UART_IRQHandler+0x66>
 80080f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080f6:	f003 0320 	and.w	r3, r3, #32
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d003      	beq.n	8008106 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 fc05 	bl	800890e <UART_Receive_IT>
      return;
 8008104:	e256      	b.n	80085b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800810a:	2b00      	cmp	r3, #0
 800810c:	f000 80de 	beq.w	80082cc <HAL_UART_IRQHandler+0x22c>
 8008110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b00      	cmp	r3, #0
 800811a:	d106      	bne.n	800812a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800811c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008120:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008124:	2b00      	cmp	r3, #0
 8008126:	f000 80d1 	beq.w	80082cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800812a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800812e:	f003 0301 	and.w	r3, r3, #1
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <HAL_UART_IRQHandler+0xae>
 8008136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800813a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800813e:	2b00      	cmp	r3, #0
 8008140:	d005      	beq.n	800814e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008146:	f043 0201 	orr.w	r2, r3, #1
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800814e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008152:	f003 0304 	and.w	r3, r3, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	d00b      	beq.n	8008172 <HAL_UART_IRQHandler+0xd2>
 800815a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f043 0202 	orr.w	r2, r3, #2
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d00b      	beq.n	8008196 <HAL_UART_IRQHandler+0xf6>
 800817e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	f043 0204 	orr.w	r2, r3, #4
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 0308 	and.w	r3, r3, #8
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d011      	beq.n	80081c6 <HAL_UART_IRQHandler+0x126>
 80081a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d105      	bne.n	80081ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80081ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d005      	beq.n	80081c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	f043 0208 	orr.w	r2, r3, #8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 81ed 	beq.w	80085aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d4:	f003 0320 	and.w	r3, r3, #32
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d008      	beq.n	80081ee <HAL_UART_IRQHandler+0x14e>
 80081dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e0:	f003 0320 	and.w	r3, r3, #32
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 fb90 	bl	800890e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	695b      	ldr	r3, [r3, #20]
 80081f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f8:	2b40      	cmp	r3, #64	; 0x40
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f003 0308 	and.w	r3, r3, #8
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <HAL_UART_IRQHandler+0x17a>
 8008212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008216:	2b00      	cmp	r3, #0
 8008218:	d04f      	beq.n	80082ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fa98 	bl	8008750 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d141      	bne.n	80082b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	3314      	adds	r3, #20
 8008234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800823c:	e853 3f00 	ldrex	r3, [r3]
 8008240:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008244:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800824c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3314      	adds	r3, #20
 8008256:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800825a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800825e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008262:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008266:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008272:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1d9      	bne.n	800822e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	2b00      	cmp	r3, #0
 8008280:	d013      	beq.n	80082aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	4a7d      	ldr	r2, [pc, #500]	; (800847c <HAL_UART_IRQHandler+0x3dc>)
 8008288:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	4618      	mov	r0, r3
 8008290:	f7fc fa74 	bl	800477c <HAL_DMA_Abort_IT>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d016      	beq.n	80082c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082a0:	687a      	ldr	r2, [r7, #4]
 80082a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80082a4:	4610      	mov	r0, r2
 80082a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082a8:	e00e      	b.n	80082c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 f99a 	bl	80085e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b0:	e00a      	b.n	80082c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 f996 	bl	80085e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082b8:	e006      	b.n	80082c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 f992 	bl	80085e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2200      	movs	r2, #0
 80082c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80082c6:	e170      	b.n	80085aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082c8:	bf00      	nop
    return;
 80082ca:	e16e      	b.n	80085aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	f040 814a 	bne.w	800856a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80082d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082da:	f003 0310 	and.w	r3, r3, #16
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f000 8143 	beq.w	800856a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80082e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082e8:	f003 0310 	and.w	r3, r3, #16
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 813c 	beq.w	800856a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80082f2:	2300      	movs	r3, #0
 80082f4:	60bb      	str	r3, [r7, #8]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	60bb      	str	r3, [r7, #8]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	60bb      	str	r3, [r7, #8]
 8008306:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	f040 80b4 	bne.w	8008480 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008324:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 8140 	beq.w	80085ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008336:	429a      	cmp	r2, r3
 8008338:	f080 8139 	bcs.w	80085ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008342:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	69db      	ldr	r3, [r3, #28]
 800834a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800834e:	f000 8088 	beq.w	8008462 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	330c      	adds	r3, #12
 8008358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800835c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008360:	e853 3f00 	ldrex	r3, [r3]
 8008364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800836c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	330c      	adds	r3, #12
 800837a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800837e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800838a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800838e:	e841 2300 	strex	r3, r2, [r1]
 8008392:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d1d9      	bne.n	8008352 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	3314      	adds	r3, #20
 80083a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a8:	e853 3f00 	ldrex	r3, [r3]
 80083ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80083ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b0:	f023 0301 	bic.w	r3, r3, #1
 80083b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3314      	adds	r3, #20
 80083be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80083c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80083c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80083ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80083d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e1      	bne.n	800839e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3314      	adds	r3, #20
 80083e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083e4:	e853 3f00 	ldrex	r3, [r3]
 80083e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80083ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80083ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3314      	adds	r3, #20
 80083fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80083fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008400:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008402:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008404:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008406:	e841 2300 	strex	r3, r2, [r1]
 800840a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800840c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1e3      	bne.n	80083da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2220      	movs	r2, #32
 8008416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	330c      	adds	r3, #12
 8008440:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008444:	65ba      	str	r2, [r7, #88]	; 0x58
 8008446:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800844a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008452:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e3      	bne.n	8008420 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	4618      	mov	r0, r3
 800845e:	f7fc f91d 	bl	800469c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800846a:	b29b      	uxth	r3, r3
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	b29b      	uxth	r3, r3
 8008470:	4619      	mov	r1, r3
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f7f8 fe5c 	bl	8001130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008478:	e099      	b.n	80085ae <HAL_UART_IRQHandler+0x50e>
 800847a:	bf00      	nop
 800847c:	08008817 	.word	0x08008817
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008488:	b29b      	uxth	r3, r3
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008494:	b29b      	uxth	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 808b 	beq.w	80085b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800849c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 8086 	beq.w	80085b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	330c      	adds	r3, #12
 80084ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b0:	e853 3f00 	ldrex	r3, [r3]
 80084b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	330c      	adds	r3, #12
 80084c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80084ca:	647a      	str	r2, [r7, #68]	; 0x44
 80084cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e3      	bne.n	80084a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	3314      	adds	r3, #20
 80084e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	e853 3f00 	ldrex	r3, [r3]
 80084ec:	623b      	str	r3, [r7, #32]
   return(result);
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	f023 0301 	bic.w	r3, r3, #1
 80084f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	3314      	adds	r3, #20
 80084fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008502:	633a      	str	r2, [r7, #48]	; 0x30
 8008504:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008506:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008508:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850a:	e841 2300 	strex	r3, r2, [r1]
 800850e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008512:	2b00      	cmp	r3, #0
 8008514:	d1e3      	bne.n	80084de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2220      	movs	r2, #32
 800851a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	330c      	adds	r3, #12
 800852a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	e853 3f00 	ldrex	r3, [r3]
 8008532:	60fb      	str	r3, [r7, #12]
   return(result);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f023 0310 	bic.w	r3, r3, #16
 800853a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	330c      	adds	r3, #12
 8008544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008548:	61fa      	str	r2, [r7, #28]
 800854a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800854c:	69b9      	ldr	r1, [r7, #24]
 800854e:	69fa      	ldr	r2, [r7, #28]
 8008550:	e841 2300 	strex	r3, r2, [r1]
 8008554:	617b      	str	r3, [r7, #20]
   return(result);
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d1e3      	bne.n	8008524 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800855c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7f8 fde4 	bl	8001130 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008568:	e023      	b.n	80085b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800856a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800856e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d009      	beq.n	800858a <HAL_UART_IRQHandler+0x4ea>
 8008576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800857a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f95b 	bl	800883e <UART_Transmit_IT>
    return;
 8008588:	e014      	b.n	80085b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800858a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00e      	beq.n	80085b4 <HAL_UART_IRQHandler+0x514>
 8008596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800859a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d008      	beq.n	80085b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f99b 	bl	80088de <UART_EndTransmit_IT>
    return;
 80085a8:	e004      	b.n	80085b4 <HAL_UART_IRQHandler+0x514>
    return;
 80085aa:	bf00      	nop
 80085ac:	e002      	b.n	80085b4 <HAL_UART_IRQHandler+0x514>
      return;
 80085ae:	bf00      	nop
 80085b0:	e000      	b.n	80085b4 <HAL_UART_IRQHandler+0x514>
      return;
 80085b2:	bf00      	nop
  }
}
 80085b4:	37e8      	adds	r7, #232	; 0xe8
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop

080085bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80085c4:	bf00      	nop
 80085c6:	370c      	adds	r7, #12
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80085ec:	bf00      	nop
 80085ee:	370c      	adds	r7, #12
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b090      	sub	sp, #64	; 0x40
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	603b      	str	r3, [r7, #0]
 8008604:	4613      	mov	r3, r2
 8008606:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008608:	e050      	b.n	80086ac <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800860c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008610:	d04c      	beq.n	80086ac <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008612:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <UART_WaitOnFlagUntilTimeout+0x30>
 8008618:	f7fb ff2e 	bl	8004478 <HAL_GetTick>
 800861c:	4602      	mov	r2, r0
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	1ad3      	subs	r3, r2, r3
 8008622:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008624:	429a      	cmp	r2, r3
 8008626:	d241      	bcs.n	80086ac <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	330c      	adds	r3, #12
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	e853 3f00 	ldrex	r3, [r3]
 8008636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800863e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008648:	637a      	str	r2, [r7, #52]	; 0x34
 800864a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800864e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008650:	e841 2300 	strex	r3, r2, [r1]
 8008654:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1e5      	bne.n	8008628 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	3314      	adds	r3, #20
 8008662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	613b      	str	r3, [r7, #16]
   return(result);
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	f023 0301 	bic.w	r3, r3, #1
 8008672:	63bb      	str	r3, [r7, #56]	; 0x38
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	3314      	adds	r3, #20
 800867a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800867c:	623a      	str	r2, [r7, #32]
 800867e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	69f9      	ldr	r1, [r7, #28]
 8008682:	6a3a      	ldr	r2, [r7, #32]
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	61bb      	str	r3, [r7, #24]
   return(result);
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e5      	bne.n	800865c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2220      	movs	r2, #32
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2220      	movs	r2, #32
 800869c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e00f      	b.n	80086cc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	4013      	ands	r3, r2
 80086b6:	68ba      	ldr	r2, [r7, #8]
 80086b8:	429a      	cmp	r2, r3
 80086ba:	bf0c      	ite	eq
 80086bc:	2301      	moveq	r3, #1
 80086be:	2300      	movne	r3, #0
 80086c0:	b2db      	uxtb	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	79fb      	ldrb	r3, [r7, #7]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d09f      	beq.n	800860a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3740      	adds	r7, #64	; 0x40
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	68ba      	ldr	r2, [r7, #8]
 80086e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	88fa      	ldrh	r2, [r7, #6]
 80086ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	88fa      	ldrh	r2, [r7, #6]
 80086f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2222      	movs	r2, #34	; 0x22
 80086fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68da      	ldr	r2, [r3, #12]
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008720:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	695a      	ldr	r2, [r3, #20]
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f042 0201 	orr.w	r2, r2, #1
 8008730:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68da      	ldr	r2, [r3, #12]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f042 0220 	orr.w	r2, r2, #32
 8008740:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008750:	b480      	push	{r7}
 8008752:	b095      	sub	sp, #84	; 0x54
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	330c      	adds	r3, #12
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	330c      	adds	r3, #12
 8008776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008778:	643a      	str	r2, [r7, #64]	; 0x40
 800877a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800877e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e5      	bne.n	8008758 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3314      	adds	r3, #20
 8008792:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	61fb      	str	r3, [r7, #28]
   return(result);
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3314      	adds	r3, #20
 80087aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80087ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e5      	bne.n	800878c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d119      	bne.n	80087fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	330c      	adds	r3, #12
 80087ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	f023 0310 	bic.w	r3, r3, #16
 80087de:	647b      	str	r3, [r7, #68]	; 0x44
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	330c      	adds	r3, #12
 80087e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087e8:	61ba      	str	r2, [r7, #24]
 80087ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6979      	ldr	r1, [r7, #20]
 80087ee:	69ba      	ldr	r2, [r7, #24]
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	613b      	str	r3, [r7, #16]
   return(result);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e5      	bne.n	80087c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2220      	movs	r2, #32
 8008800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2200      	movs	r2, #0
 8008808:	631a      	str	r2, [r3, #48]	; 0x30
}
 800880a:	bf00      	nop
 800880c:	3754      	adds	r7, #84	; 0x54
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b084      	sub	sp, #16
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008822:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff fed7 	bl	80085e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800883e:	b480      	push	{r7}
 8008840:	b085      	sub	sp, #20
 8008842:	af00      	add	r7, sp, #0
 8008844:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b21      	cmp	r3, #33	; 0x21
 8008850:	d13e      	bne.n	80088d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800885a:	d114      	bne.n	8008886 <UART_Transmit_IT+0x48>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d110      	bne.n	8008886 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6a1b      	ldr	r3, [r3, #32]
 8008868:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	881b      	ldrh	r3, [r3, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008878:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a1b      	ldr	r3, [r3, #32]
 800887e:	1c9a      	adds	r2, r3, #2
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	621a      	str	r2, [r3, #32]
 8008884:	e008      	b.n	8008898 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	1c59      	adds	r1, r3, #1
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	6211      	str	r1, [r2, #32]
 8008890:	781a      	ldrb	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800889c:	b29b      	uxth	r3, r3
 800889e:	3b01      	subs	r3, #1
 80088a0:	b29b      	uxth	r3, r3
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	4619      	mov	r1, r3
 80088a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10f      	bne.n	80088cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68da      	ldr	r2, [r3, #12]
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	e000      	b.n	80088d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80088d0:	2302      	movs	r3, #2
  }
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b082      	sub	sp, #8
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff fe5c 	bl	80085bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3708      	adds	r7, #8
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}

0800890e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b08c      	sub	sp, #48	; 0x30
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b22      	cmp	r3, #34	; 0x22
 8008920:	f040 80ab 	bne.w	8008a7a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800892c:	d117      	bne.n	800895e <UART_Receive_IT+0x50>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d113      	bne.n	800895e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	b29b      	uxth	r3, r3
 8008948:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800894c:	b29a      	uxth	r2, r3
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	1c9a      	adds	r2, r3, #2
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	629a      	str	r2, [r3, #40]	; 0x28
 800895c:	e026      	b.n	80089ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008964:	2300      	movs	r3, #0
 8008966:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008970:	d007      	beq.n	8008982 <UART_Receive_IT+0x74>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	689b      	ldr	r3, [r3, #8]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10a      	bne.n	8008990 <UART_Receive_IT+0x82>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d106      	bne.n	8008990 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	b2da      	uxtb	r2, r3
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	701a      	strb	r2, [r3, #0]
 800898e:	e008      	b.n	80089a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800899c:	b2da      	uxtb	r2, r3
 800899e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	3b01      	subs	r3, #1
 80089b4:	b29b      	uxth	r3, r3
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	4619      	mov	r1, r3
 80089ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d15a      	bne.n	8008a76 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68da      	ldr	r2, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f022 0220 	bic.w	r2, r2, #32
 80089ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695a      	ldr	r2, [r3, #20]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0201 	bic.w	r2, r2, #1
 80089ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d135      	bne.n	8008a6c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	330c      	adds	r3, #12
 8008a0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	e853 3f00 	ldrex	r3, [r3]
 8008a14:	613b      	str	r3, [r7, #16]
   return(result);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f023 0310 	bic.w	r3, r3, #16
 8008a1c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	330c      	adds	r3, #12
 8008a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a26:	623a      	str	r2, [r7, #32]
 8008a28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2a:	69f9      	ldr	r1, [r7, #28]
 8008a2c:	6a3a      	ldr	r2, [r7, #32]
 8008a2e:	e841 2300 	strex	r3, r2, [r1]
 8008a32:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d1e5      	bne.n	8008a06 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f003 0310 	and.w	r3, r3, #16
 8008a44:	2b10      	cmp	r3, #16
 8008a46:	d10a      	bne.n	8008a5e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a62:	4619      	mov	r1, r3
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f7f8 fb63 	bl	8001130 <HAL_UARTEx_RxEventCallback>
 8008a6a:	e002      	b.n	8008a72 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7ff fdaf 	bl	80085d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	e002      	b.n	8008a7c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e000      	b.n	8008a7c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008a7a:	2302      	movs	r3, #2
  }
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3730      	adds	r7, #48	; 0x30
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a88:	b0c0      	sub	sp, #256	; 0x100
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa0:	68d9      	ldr	r1, [r3, #12]
 8008aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	ea40 0301 	orr.w	r3, r0, r1
 8008aac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab2:	689a      	ldr	r2, [r3, #8]
 8008ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	695b      	ldr	r3, [r3, #20]
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008adc:	f021 010c 	bic.w	r1, r1, #12
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008aea:	430b      	orrs	r3, r1
 8008aec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
 8008af6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008afe:	6999      	ldr	r1, [r3, #24]
 8008b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	ea40 0301 	orr.w	r3, r0, r1
 8008b0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b8f      	ldr	r3, [pc, #572]	; (8008d50 <UART_SetConfig+0x2cc>)
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d005      	beq.n	8008b24 <UART_SetConfig+0xa0>
 8008b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	4b8d      	ldr	r3, [pc, #564]	; (8008d54 <UART_SetConfig+0x2d0>)
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d104      	bne.n	8008b2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b24:	f7fd fc34 	bl	8006390 <HAL_RCC_GetPCLK2Freq>
 8008b28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b2c:	e003      	b.n	8008b36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b2e:	f7fd fc1b 	bl	8006368 <HAL_RCC_GetPCLK1Freq>
 8008b32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b40:	f040 810c 	bne.w	8008d5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b48:	2200      	movs	r2, #0
 8008b4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b56:	4622      	mov	r2, r4
 8008b58:	462b      	mov	r3, r5
 8008b5a:	1891      	adds	r1, r2, r2
 8008b5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b5e:	415b      	adcs	r3, r3
 8008b60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b66:	4621      	mov	r1, r4
 8008b68:	eb12 0801 	adds.w	r8, r2, r1
 8008b6c:	4629      	mov	r1, r5
 8008b6e:	eb43 0901 	adc.w	r9, r3, r1
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b86:	4690      	mov	r8, r2
 8008b88:	4699      	mov	r9, r3
 8008b8a:	4623      	mov	r3, r4
 8008b8c:	eb18 0303 	adds.w	r3, r8, r3
 8008b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008b94:	462b      	mov	r3, r5
 8008b96:	eb49 0303 	adc.w	r3, r9, r3
 8008b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008baa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	18db      	adds	r3, r3, r3
 8008bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8008bb8:	4613      	mov	r3, r2
 8008bba:	eb42 0303 	adc.w	r3, r2, r3
 8008bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8008bc0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bc4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bc8:	f7f7 ff60 	bl	8000a8c <__aeabi_uldivmod>
 8008bcc:	4602      	mov	r2, r0
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4b61      	ldr	r3, [pc, #388]	; (8008d58 <UART_SetConfig+0x2d4>)
 8008bd2:	fba3 2302 	umull	r2, r3, r3, r2
 8008bd6:	095b      	lsrs	r3, r3, #5
 8008bd8:	011c      	lsls	r4, r3, #4
 8008bda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008be4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008be8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008bec:	4642      	mov	r2, r8
 8008bee:	464b      	mov	r3, r9
 8008bf0:	1891      	adds	r1, r2, r2
 8008bf2:	64b9      	str	r1, [r7, #72]	; 0x48
 8008bf4:	415b      	adcs	r3, r3
 8008bf6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bf8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008bfc:	4641      	mov	r1, r8
 8008bfe:	eb12 0a01 	adds.w	sl, r2, r1
 8008c02:	4649      	mov	r1, r9
 8008c04:	eb43 0b01 	adc.w	fp, r3, r1
 8008c08:	f04f 0200 	mov.w	r2, #0
 8008c0c:	f04f 0300 	mov.w	r3, #0
 8008c10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c1c:	4692      	mov	sl, r2
 8008c1e:	469b      	mov	fp, r3
 8008c20:	4643      	mov	r3, r8
 8008c22:	eb1a 0303 	adds.w	r3, sl, r3
 8008c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c2a:	464b      	mov	r3, r9
 8008c2c:	eb4b 0303 	adc.w	r3, fp, r3
 8008c30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c48:	460b      	mov	r3, r1
 8008c4a:	18db      	adds	r3, r3, r3
 8008c4c:	643b      	str	r3, [r7, #64]	; 0x40
 8008c4e:	4613      	mov	r3, r2
 8008c50:	eb42 0303 	adc.w	r3, r2, r3
 8008c54:	647b      	str	r3, [r7, #68]	; 0x44
 8008c56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c5e:	f7f7 ff15 	bl	8000a8c <__aeabi_uldivmod>
 8008c62:	4602      	mov	r2, r0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	4b3b      	ldr	r3, [pc, #236]	; (8008d58 <UART_SetConfig+0x2d4>)
 8008c6a:	fba3 2301 	umull	r2, r3, r3, r1
 8008c6e:	095b      	lsrs	r3, r3, #5
 8008c70:	2264      	movs	r2, #100	; 0x64
 8008c72:	fb02 f303 	mul.w	r3, r2, r3
 8008c76:	1acb      	subs	r3, r1, r3
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008c7e:	4b36      	ldr	r3, [pc, #216]	; (8008d58 <UART_SetConfig+0x2d4>)
 8008c80:	fba3 2302 	umull	r2, r3, r3, r2
 8008c84:	095b      	lsrs	r3, r3, #5
 8008c86:	005b      	lsls	r3, r3, #1
 8008c88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008c8c:	441c      	add	r4, r3
 8008c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c92:	2200      	movs	r2, #0
 8008c94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008c98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008c9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ca0:	4642      	mov	r2, r8
 8008ca2:	464b      	mov	r3, r9
 8008ca4:	1891      	adds	r1, r2, r2
 8008ca6:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ca8:	415b      	adcs	r3, r3
 8008caa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cb0:	4641      	mov	r1, r8
 8008cb2:	1851      	adds	r1, r2, r1
 8008cb4:	6339      	str	r1, [r7, #48]	; 0x30
 8008cb6:	4649      	mov	r1, r9
 8008cb8:	414b      	adcs	r3, r1
 8008cba:	637b      	str	r3, [r7, #52]	; 0x34
 8008cbc:	f04f 0200 	mov.w	r2, #0
 8008cc0:	f04f 0300 	mov.w	r3, #0
 8008cc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cc8:	4659      	mov	r1, fp
 8008cca:	00cb      	lsls	r3, r1, #3
 8008ccc:	4651      	mov	r1, sl
 8008cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cd2:	4651      	mov	r1, sl
 8008cd4:	00ca      	lsls	r2, r1, #3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	4619      	mov	r1, r3
 8008cda:	4603      	mov	r3, r0
 8008cdc:	4642      	mov	r2, r8
 8008cde:	189b      	adds	r3, r3, r2
 8008ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ce4:	464b      	mov	r3, r9
 8008ce6:	460a      	mov	r2, r1
 8008ce8:	eb42 0303 	adc.w	r3, r2, r3
 8008cec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008cf4:	685b      	ldr	r3, [r3, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008cfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d04:	460b      	mov	r3, r1
 8008d06:	18db      	adds	r3, r3, r3
 8008d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d0a:	4613      	mov	r3, r2
 8008d0c:	eb42 0303 	adc.w	r3, r2, r3
 8008d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d1a:	f7f7 feb7 	bl	8000a8c <__aeabi_uldivmod>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4b0d      	ldr	r3, [pc, #52]	; (8008d58 <UART_SetConfig+0x2d4>)
 8008d24:	fba3 1302 	umull	r1, r3, r3, r2
 8008d28:	095b      	lsrs	r3, r3, #5
 8008d2a:	2164      	movs	r1, #100	; 0x64
 8008d2c:	fb01 f303 	mul.w	r3, r1, r3
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	00db      	lsls	r3, r3, #3
 8008d34:	3332      	adds	r3, #50	; 0x32
 8008d36:	4a08      	ldr	r2, [pc, #32]	; (8008d58 <UART_SetConfig+0x2d4>)
 8008d38:	fba2 2303 	umull	r2, r3, r2, r3
 8008d3c:	095b      	lsrs	r3, r3, #5
 8008d3e:	f003 0207 	and.w	r2, r3, #7
 8008d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4422      	add	r2, r4
 8008d4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d4c:	e105      	b.n	8008f5a <UART_SetConfig+0x4d6>
 8008d4e:	bf00      	nop
 8008d50:	40011000 	.word	0x40011000
 8008d54:	40011400 	.word	0x40011400
 8008d58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d60:	2200      	movs	r2, #0
 8008d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d6e:	4642      	mov	r2, r8
 8008d70:	464b      	mov	r3, r9
 8008d72:	1891      	adds	r1, r2, r2
 8008d74:	6239      	str	r1, [r7, #32]
 8008d76:	415b      	adcs	r3, r3
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008d7e:	4641      	mov	r1, r8
 8008d80:	1854      	adds	r4, r2, r1
 8008d82:	4649      	mov	r1, r9
 8008d84:	eb43 0501 	adc.w	r5, r3, r1
 8008d88:	f04f 0200 	mov.w	r2, #0
 8008d8c:	f04f 0300 	mov.w	r3, #0
 8008d90:	00eb      	lsls	r3, r5, #3
 8008d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d96:	00e2      	lsls	r2, r4, #3
 8008d98:	4614      	mov	r4, r2
 8008d9a:	461d      	mov	r5, r3
 8008d9c:	4643      	mov	r3, r8
 8008d9e:	18e3      	adds	r3, r4, r3
 8008da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008da4:	464b      	mov	r3, r9
 8008da6:	eb45 0303 	adc.w	r3, r5, r3
 8008daa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008dba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dbe:	f04f 0200 	mov.w	r2, #0
 8008dc2:	f04f 0300 	mov.w	r3, #0
 8008dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008dca:	4629      	mov	r1, r5
 8008dcc:	008b      	lsls	r3, r1, #2
 8008dce:	4621      	mov	r1, r4
 8008dd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dd4:	4621      	mov	r1, r4
 8008dd6:	008a      	lsls	r2, r1, #2
 8008dd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008ddc:	f7f7 fe56 	bl	8000a8c <__aeabi_uldivmod>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	4b60      	ldr	r3, [pc, #384]	; (8008f68 <UART_SetConfig+0x4e4>)
 8008de6:	fba3 2302 	umull	r2, r3, r3, r2
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	011c      	lsls	r4, r3, #4
 8008dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008df2:	2200      	movs	r2, #0
 8008df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008df8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008dfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e00:	4642      	mov	r2, r8
 8008e02:	464b      	mov	r3, r9
 8008e04:	1891      	adds	r1, r2, r2
 8008e06:	61b9      	str	r1, [r7, #24]
 8008e08:	415b      	adcs	r3, r3
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e10:	4641      	mov	r1, r8
 8008e12:	1851      	adds	r1, r2, r1
 8008e14:	6139      	str	r1, [r7, #16]
 8008e16:	4649      	mov	r1, r9
 8008e18:	414b      	adcs	r3, r1
 8008e1a:	617b      	str	r3, [r7, #20]
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f04f 0300 	mov.w	r3, #0
 8008e24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e28:	4659      	mov	r1, fp
 8008e2a:	00cb      	lsls	r3, r1, #3
 8008e2c:	4651      	mov	r1, sl
 8008e2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e32:	4651      	mov	r1, sl
 8008e34:	00ca      	lsls	r2, r1, #3
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	4642      	mov	r2, r8
 8008e3e:	189b      	adds	r3, r3, r2
 8008e40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e44:	464b      	mov	r3, r9
 8008e46:	460a      	mov	r2, r1
 8008e48:	eb42 0303 	adc.w	r3, r2, r3
 8008e4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e5c:	f04f 0200 	mov.w	r2, #0
 8008e60:	f04f 0300 	mov.w	r3, #0
 8008e64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e68:	4649      	mov	r1, r9
 8008e6a:	008b      	lsls	r3, r1, #2
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e72:	4641      	mov	r1, r8
 8008e74:	008a      	lsls	r2, r1, #2
 8008e76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008e7a:	f7f7 fe07 	bl	8000a8c <__aeabi_uldivmod>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	460b      	mov	r3, r1
 8008e82:	4b39      	ldr	r3, [pc, #228]	; (8008f68 <UART_SetConfig+0x4e4>)
 8008e84:	fba3 1302 	umull	r1, r3, r3, r2
 8008e88:	095b      	lsrs	r3, r3, #5
 8008e8a:	2164      	movs	r1, #100	; 0x64
 8008e8c:	fb01 f303 	mul.w	r3, r1, r3
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	011b      	lsls	r3, r3, #4
 8008e94:	3332      	adds	r3, #50	; 0x32
 8008e96:	4a34      	ldr	r2, [pc, #208]	; (8008f68 <UART_SetConfig+0x4e4>)
 8008e98:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ea2:	441c      	add	r4, r3
 8008ea4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	673b      	str	r3, [r7, #112]	; 0x70
 8008eac:	677a      	str	r2, [r7, #116]	; 0x74
 8008eae:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008eb2:	4642      	mov	r2, r8
 8008eb4:	464b      	mov	r3, r9
 8008eb6:	1891      	adds	r1, r2, r2
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	415b      	adcs	r3, r3
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ec2:	4641      	mov	r1, r8
 8008ec4:	1851      	adds	r1, r2, r1
 8008ec6:	6039      	str	r1, [r7, #0]
 8008ec8:	4649      	mov	r1, r9
 8008eca:	414b      	adcs	r3, r1
 8008ecc:	607b      	str	r3, [r7, #4]
 8008ece:	f04f 0200 	mov.w	r2, #0
 8008ed2:	f04f 0300 	mov.w	r3, #0
 8008ed6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008eda:	4659      	mov	r1, fp
 8008edc:	00cb      	lsls	r3, r1, #3
 8008ede:	4651      	mov	r1, sl
 8008ee0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ee4:	4651      	mov	r1, sl
 8008ee6:	00ca      	lsls	r2, r1, #3
 8008ee8:	4610      	mov	r0, r2
 8008eea:	4619      	mov	r1, r3
 8008eec:	4603      	mov	r3, r0
 8008eee:	4642      	mov	r2, r8
 8008ef0:	189b      	adds	r3, r3, r2
 8008ef2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ef4:	464b      	mov	r3, r9
 8008ef6:	460a      	mov	r2, r1
 8008ef8:	eb42 0303 	adc.w	r3, r2, r3
 8008efc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	663b      	str	r3, [r7, #96]	; 0x60
 8008f08:	667a      	str	r2, [r7, #100]	; 0x64
 8008f0a:	f04f 0200 	mov.w	r2, #0
 8008f0e:	f04f 0300 	mov.w	r3, #0
 8008f12:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f16:	4649      	mov	r1, r9
 8008f18:	008b      	lsls	r3, r1, #2
 8008f1a:	4641      	mov	r1, r8
 8008f1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f20:	4641      	mov	r1, r8
 8008f22:	008a      	lsls	r2, r1, #2
 8008f24:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f28:	f7f7 fdb0 	bl	8000a8c <__aeabi_uldivmod>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <UART_SetConfig+0x4e4>)
 8008f32:	fba3 1302 	umull	r1, r3, r3, r2
 8008f36:	095b      	lsrs	r3, r3, #5
 8008f38:	2164      	movs	r1, #100	; 0x64
 8008f3a:	fb01 f303 	mul.w	r3, r1, r3
 8008f3e:	1ad3      	subs	r3, r2, r3
 8008f40:	011b      	lsls	r3, r3, #4
 8008f42:	3332      	adds	r3, #50	; 0x32
 8008f44:	4a08      	ldr	r2, [pc, #32]	; (8008f68 <UART_SetConfig+0x4e4>)
 8008f46:	fba2 2303 	umull	r2, r3, r2, r3
 8008f4a:	095b      	lsrs	r3, r3, #5
 8008f4c:	f003 020f 	and.w	r2, r3, #15
 8008f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4422      	add	r2, r4
 8008f58:	609a      	str	r2, [r3, #8]
}
 8008f5a:	bf00      	nop
 8008f5c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f60:	46bd      	mov	sp, r7
 8008f62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f66:	bf00      	nop
 8008f68:	51eb851f 	.word	0x51eb851f

08008f6c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008f70:	4904      	ldr	r1, [pc, #16]	; (8008f84 <MX_FATFS_Init+0x18>)
 8008f72:	4805      	ldr	r0, [pc, #20]	; (8008f88 <MX_FATFS_Init+0x1c>)
 8008f74:	f002 facc 	bl	800b510 <FATFS_LinkDriver>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	4b03      	ldr	r3, [pc, #12]	; (8008f8c <MX_FATFS_Init+0x20>)
 8008f7e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008f80:	bf00      	nop
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	20000b40 	.word	0x20000b40
 8008f88:	20000218 	.word	0x20000218
 8008f8c:	20000b3c 	.word	0x20000b3c

08008f90 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008f94:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9e:	4770      	bx	lr

08008fa0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize (pdrv);
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	4618      	mov	r0, r3
 8008fae:	f7f9 fa7f 	bl	80024b0 <SD_disk_initialize>
 8008fb2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3708      	adds	r7, #8
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}

08008fbc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status (pdrv);
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7f9 fb5b 	bl	8002684 <SD_disk_status>
 8008fce:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3708      	adds	r7, #8
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}

08008fd8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60b9      	str	r1, [r7, #8]
 8008fe0:	607a      	str	r2, [r7, #4]
 8008fe2:	603b      	str	r3, [r7, #0]
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read (pdrv,buff,sector,count);
 8008fe8:	7bf8      	ldrb	r0, [r7, #15]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	687a      	ldr	r2, [r7, #4]
 8008fee:	68b9      	ldr	r1, [r7, #8]
 8008ff0:	f7f9 fb5e 	bl	80026b0 <SD_disk_read>
 8008ff4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}

08008ffe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008ffe:	b580      	push	{r7, lr}
 8009000:	b084      	sub	sp, #16
 8009002:	af00      	add	r7, sp, #0
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write (pdrv, buff, sector,count);;
 800900e:	7bf8      	ldrb	r0, [r7, #15]
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	68b9      	ldr	r1, [r7, #8]
 8009016:	f7f9 fbb5 	bl	8002784 <SD_disk_write>
 800901a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b082      	sub	sp, #8
 8009028:	af00      	add	r7, sp, #0
 800902a:	4603      	mov	r3, r0
 800902c:	603a      	str	r2, [r7, #0]
 800902e:	71fb      	strb	r3, [r7, #7]
 8009030:	460b      	mov	r3, r1
 8009032:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl ( pdrv, cmd, buff);
 8009034:	79b9      	ldrb	r1, [r7, #6]
 8009036:	79fb      	ldrb	r3, [r7, #7]
 8009038:	683a      	ldr	r2, [r7, #0]
 800903a:	4618      	mov	r0, r3
 800903c:	f7f9 fc26 	bl	800288c <SD_disk_ioctl>
 8009040:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8009042:	4618      	mov	r0, r3
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
	...

0800904c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	4603      	mov	r3, r0
 8009054:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009056:	79fb      	ldrb	r3, [r7, #7]
 8009058:	4a08      	ldr	r2, [pc, #32]	; (800907c <disk_status+0x30>)
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	4413      	add	r3, r2
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	79fa      	ldrb	r2, [r7, #7]
 8009064:	4905      	ldr	r1, [pc, #20]	; (800907c <disk_status+0x30>)
 8009066:	440a      	add	r2, r1
 8009068:	7a12      	ldrb	r2, [r2, #8]
 800906a:	4610      	mov	r0, r2
 800906c:	4798      	blx	r3
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009072:	7bfb      	ldrb	r3, [r7, #15]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	20000da0 	.word	0x20000da0

08009080 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800908a:	2300      	movs	r3, #0
 800908c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800908e:	79fb      	ldrb	r3, [r7, #7]
 8009090:	4a0d      	ldr	r2, [pc, #52]	; (80090c8 <disk_initialize+0x48>)
 8009092:	5cd3      	ldrb	r3, [r2, r3]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d111      	bne.n	80090bc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009098:	79fb      	ldrb	r3, [r7, #7]
 800909a:	4a0b      	ldr	r2, [pc, #44]	; (80090c8 <disk_initialize+0x48>)
 800909c:	2101      	movs	r1, #1
 800909e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80090a0:	79fb      	ldrb	r3, [r7, #7]
 80090a2:	4a09      	ldr	r2, [pc, #36]	; (80090c8 <disk_initialize+0x48>)
 80090a4:	009b      	lsls	r3, r3, #2
 80090a6:	4413      	add	r3, r2
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	79fa      	ldrb	r2, [r7, #7]
 80090ae:	4906      	ldr	r1, [pc, #24]	; (80090c8 <disk_initialize+0x48>)
 80090b0:	440a      	add	r2, r1
 80090b2:	7a12      	ldrb	r2, [r2, #8]
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	4603      	mov	r3, r0
 80090ba:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	20000da0 	.word	0x20000da0

080090cc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80090cc:	b590      	push	{r4, r7, lr}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60b9      	str	r1, [r7, #8]
 80090d4:	607a      	str	r2, [r7, #4]
 80090d6:	603b      	str	r3, [r7, #0]
 80090d8:	4603      	mov	r3, r0
 80090da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	4a0a      	ldr	r2, [pc, #40]	; (8009108 <disk_read+0x3c>)
 80090e0:	009b      	lsls	r3, r3, #2
 80090e2:	4413      	add	r3, r2
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	689c      	ldr	r4, [r3, #8]
 80090e8:	7bfb      	ldrb	r3, [r7, #15]
 80090ea:	4a07      	ldr	r2, [pc, #28]	; (8009108 <disk_read+0x3c>)
 80090ec:	4413      	add	r3, r2
 80090ee:	7a18      	ldrb	r0, [r3, #8]
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	68b9      	ldr	r1, [r7, #8]
 80090f6:	47a0      	blx	r4
 80090f8:	4603      	mov	r3, r0
 80090fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80090fe:	4618      	mov	r0, r3
 8009100:	371c      	adds	r7, #28
 8009102:	46bd      	mov	sp, r7
 8009104:	bd90      	pop	{r4, r7, pc}
 8009106:	bf00      	nop
 8009108:	20000da0 	.word	0x20000da0

0800910c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800910c:	b590      	push	{r4, r7, lr}
 800910e:	b087      	sub	sp, #28
 8009110:	af00      	add	r7, sp, #0
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	607a      	str	r2, [r7, #4]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4603      	mov	r3, r0
 800911a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800911c:	7bfb      	ldrb	r3, [r7, #15]
 800911e:	4a0a      	ldr	r2, [pc, #40]	; (8009148 <disk_write+0x3c>)
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	68dc      	ldr	r4, [r3, #12]
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	4a07      	ldr	r2, [pc, #28]	; (8009148 <disk_write+0x3c>)
 800912c:	4413      	add	r3, r2
 800912e:	7a18      	ldrb	r0, [r3, #8]
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68b9      	ldr	r1, [r7, #8]
 8009136:	47a0      	blx	r4
 8009138:	4603      	mov	r3, r0
 800913a:	75fb      	strb	r3, [r7, #23]
  return res;
 800913c:	7dfb      	ldrb	r3, [r7, #23]
}
 800913e:	4618      	mov	r0, r3
 8009140:	371c      	adds	r7, #28
 8009142:	46bd      	mov	sp, r7
 8009144:	bd90      	pop	{r4, r7, pc}
 8009146:	bf00      	nop
 8009148:	20000da0 	.word	0x20000da0

0800914c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	603a      	str	r2, [r7, #0]
 8009156:	71fb      	strb	r3, [r7, #7]
 8009158:	460b      	mov	r3, r1
 800915a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	4a09      	ldr	r2, [pc, #36]	; (8009184 <disk_ioctl+0x38>)
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	4413      	add	r3, r2
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	691b      	ldr	r3, [r3, #16]
 8009168:	79fa      	ldrb	r2, [r7, #7]
 800916a:	4906      	ldr	r1, [pc, #24]	; (8009184 <disk_ioctl+0x38>)
 800916c:	440a      	add	r2, r1
 800916e:	7a10      	ldrb	r0, [r2, #8]
 8009170:	79b9      	ldrb	r1, [r7, #6]
 8009172:	683a      	ldr	r2, [r7, #0]
 8009174:	4798      	blx	r3
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
  return res;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	20000da0 	.word	0x20000da0

08009188 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	3301      	adds	r3, #1
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009198:	89fb      	ldrh	r3, [r7, #14]
 800919a:	021b      	lsls	r3, r3, #8
 800919c:	b21a      	sxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	b21b      	sxth	r3, r3
 80091a4:	4313      	orrs	r3, r2
 80091a6:	b21b      	sxth	r3, r3
 80091a8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80091aa:	89fb      	ldrh	r3, [r7, #14]
}
 80091ac:	4618      	mov	r0, r3
 80091ae:	3714      	adds	r7, #20
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	3303      	adds	r3, #3
 80091c4:	781b      	ldrb	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	021b      	lsls	r3, r3, #8
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	3202      	adds	r2, #2
 80091d0:	7812      	ldrb	r2, [r2, #0]
 80091d2:	4313      	orrs	r3, r2
 80091d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	021b      	lsls	r3, r3, #8
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	3201      	adds	r2, #1
 80091de:	7812      	ldrb	r2, [r2, #0]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	021b      	lsls	r3, r3, #8
 80091e8:	687a      	ldr	r2, [r7, #4]
 80091ea:	7812      	ldrb	r2, [r2, #0]
 80091ec:	4313      	orrs	r3, r2
 80091ee:	60fb      	str	r3, [r7, #12]
	return rv;
 80091f0:	68fb      	ldr	r3, [r7, #12]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3714      	adds	r7, #20
 80091f6:	46bd      	mov	sp, r7
 80091f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fc:	4770      	bx	lr

080091fe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80091fe:	b480      	push	{r7}
 8009200:	b083      	sub	sp, #12
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	460b      	mov	r3, r1
 8009208:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	887a      	ldrh	r2, [r7, #2]
 8009212:	b2d2      	uxtb	r2, r2
 8009214:	701a      	strb	r2, [r3, #0]
 8009216:	887b      	ldrh	r3, [r7, #2]
 8009218:	0a1b      	lsrs	r3, r3, #8
 800921a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	1c5a      	adds	r2, r3, #1
 8009220:	607a      	str	r2, [r7, #4]
 8009222:	887a      	ldrh	r2, [r7, #2]
 8009224:	b2d2      	uxtb	r2, r2
 8009226:	701a      	strb	r2, [r3, #0]
}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	1c5a      	adds	r2, r3, #1
 8009242:	607a      	str	r2, [r7, #4]
 8009244:	683a      	ldr	r2, [r7, #0]
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	0a1b      	lsrs	r3, r3, #8
 800924e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	1c5a      	adds	r2, r3, #1
 8009254:	607a      	str	r2, [r7, #4]
 8009256:	683a      	ldr	r2, [r7, #0]
 8009258:	b2d2      	uxtb	r2, r2
 800925a:	701a      	strb	r2, [r3, #0]
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	0a1b      	lsrs	r3, r3, #8
 8009260:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	683a      	ldr	r2, [r7, #0]
 800926a:	b2d2      	uxtb	r2, r2
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	0a1b      	lsrs	r3, r3, #8
 8009272:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	1c5a      	adds	r2, r3, #1
 8009278:	607a      	str	r2, [r7, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	b2d2      	uxtb	r2, r2
 800927e:	701a      	strb	r2, [r3, #0]
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	60f8      	str	r0, [r7, #12]
 8009294:	60b9      	str	r1, [r7, #8]
 8009296:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00d      	beq.n	80092c2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	1c53      	adds	r3, r2, #1
 80092aa:	613b      	str	r3, [r7, #16]
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	1c59      	adds	r1, r3, #1
 80092b0:	6179      	str	r1, [r7, #20]
 80092b2:	7812      	ldrb	r2, [r2, #0]
 80092b4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3b01      	subs	r3, #1
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1f1      	bne.n	80092a6 <mem_cpy+0x1a>
	}
}
 80092c2:	bf00      	nop
 80092c4:	371c      	adds	r7, #28
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr

080092ce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80092ce:	b480      	push	{r7}
 80092d0:	b087      	sub	sp, #28
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	1c5a      	adds	r2, r3, #1
 80092e2:	617a      	str	r2, [r7, #20]
 80092e4:	68ba      	ldr	r2, [r7, #8]
 80092e6:	b2d2      	uxtb	r2, r2
 80092e8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	3b01      	subs	r3, #1
 80092ee:	607b      	str	r3, [r7, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1f3      	bne.n	80092de <mem_set+0x10>
}
 80092f6:	bf00      	nop
 80092f8:	bf00      	nop
 80092fa:	371c      	adds	r7, #28
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009304:	b480      	push	{r7}
 8009306:	b089      	sub	sp, #36	; 0x24
 8009308:	af00      	add	r7, sp, #0
 800930a:	60f8      	str	r0, [r7, #12]
 800930c:	60b9      	str	r1, [r7, #8]
 800930e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	61fb      	str	r3, [r7, #28]
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009318:	2300      	movs	r3, #0
 800931a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	1c5a      	adds	r2, r3, #1
 8009320:	61fa      	str	r2, [r7, #28]
 8009322:	781b      	ldrb	r3, [r3, #0]
 8009324:	4619      	mov	r1, r3
 8009326:	69bb      	ldr	r3, [r7, #24]
 8009328:	1c5a      	adds	r2, r3, #1
 800932a:	61ba      	str	r2, [r7, #24]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	1acb      	subs	r3, r1, r3
 8009330:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	3b01      	subs	r3, #1
 8009336:	607b      	str	r3, [r7, #4]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d002      	beq.n	8009344 <mem_cmp+0x40>
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d0eb      	beq.n	800931c <mem_cmp+0x18>

	return r;
 8009344:	697b      	ldr	r3, [r7, #20]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3724      	adds	r7, #36	; 0x24
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009352:	b480      	push	{r7}
 8009354:	b083      	sub	sp, #12
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
 800935a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800935c:	e002      	b.n	8009364 <chk_chr+0x12>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	3301      	adds	r3, #1
 8009362:	607b      	str	r3, [r7, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <chk_chr+0x26>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	4293      	cmp	r3, r2
 8009376:	d1f2      	bne.n	800935e <chk_chr+0xc>
	return *str;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	781b      	ldrb	r3, [r3, #0]
}
 800937c:	4618      	mov	r0, r3
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d009      	beq.n	80093aa <lock_fs+0x22>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	4618      	mov	r0, r3
 800939c:	f002 f8f3 	bl	800b586 <ff_req_grant>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <lock_fs+0x22>
 80093a6:	2301      	movs	r3, #1
 80093a8:	e000      	b.n	80093ac <lock_fs+0x24>
 80093aa:	2300      	movs	r3, #0
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b082      	sub	sp, #8
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	460b      	mov	r3, r1
 80093be:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00d      	beq.n	80093e2 <unlock_fs+0x2e>
 80093c6:	78fb      	ldrb	r3, [r7, #3]
 80093c8:	2b0c      	cmp	r3, #12
 80093ca:	d00a      	beq.n	80093e2 <unlock_fs+0x2e>
 80093cc:	78fb      	ldrb	r3, [r7, #3]
 80093ce:	2b0b      	cmp	r3, #11
 80093d0:	d007      	beq.n	80093e2 <unlock_fs+0x2e>
 80093d2:	78fb      	ldrb	r3, [r7, #3]
 80093d4:	2b0f      	cmp	r3, #15
 80093d6:	d004      	beq.n	80093e2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	4618      	mov	r0, r3
 80093de:	f002 f8e7 	bl	800b5b0 <ff_rel_grant>
	}
}
 80093e2:	bf00      	nop
 80093e4:	3708      	adds	r7, #8
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80093f6:	2300      	movs	r3, #0
 80093f8:	60bb      	str	r3, [r7, #8]
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	e029      	b.n	8009454 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009400:	4a27      	ldr	r2, [pc, #156]	; (80094a0 <chk_lock+0xb4>)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	4413      	add	r3, r2
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d01d      	beq.n	800944a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800940e:	4a24      	ldr	r2, [pc, #144]	; (80094a0 <chk_lock+0xb4>)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	011b      	lsls	r3, r3, #4
 8009414:	4413      	add	r3, r2
 8009416:	681a      	ldr	r2, [r3, #0]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	429a      	cmp	r2, r3
 800941e:	d116      	bne.n	800944e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009420:	4a1f      	ldr	r2, [pc, #124]	; (80094a0 <chk_lock+0xb4>)
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	011b      	lsls	r3, r3, #4
 8009426:	4413      	add	r3, r2
 8009428:	3304      	adds	r3, #4
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009430:	429a      	cmp	r2, r3
 8009432:	d10c      	bne.n	800944e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009434:	4a1a      	ldr	r2, [pc, #104]	; (80094a0 <chk_lock+0xb4>)
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	4413      	add	r3, r2
 800943c:	3308      	adds	r3, #8
 800943e:	681a      	ldr	r2, [r3, #0]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009444:	429a      	cmp	r2, r3
 8009446:	d102      	bne.n	800944e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009448:	e007      	b.n	800945a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800944a:	2301      	movs	r3, #1
 800944c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	3301      	adds	r3, #1
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b01      	cmp	r3, #1
 8009458:	d9d2      	bls.n	8009400 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2b02      	cmp	r3, #2
 800945e:	d109      	bne.n	8009474 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <chk_lock+0x80>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b02      	cmp	r3, #2
 800946a:	d101      	bne.n	8009470 <chk_lock+0x84>
 800946c:	2300      	movs	r3, #0
 800946e:	e010      	b.n	8009492 <chk_lock+0xa6>
 8009470:	2312      	movs	r3, #18
 8009472:	e00e      	b.n	8009492 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d108      	bne.n	800948c <chk_lock+0xa0>
 800947a:	4a09      	ldr	r2, [pc, #36]	; (80094a0 <chk_lock+0xb4>)
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	011b      	lsls	r3, r3, #4
 8009480:	4413      	add	r3, r2
 8009482:	330c      	adds	r3, #12
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948a:	d101      	bne.n	8009490 <chk_lock+0xa4>
 800948c:	2310      	movs	r3, #16
 800948e:	e000      	b.n	8009492 <chk_lock+0xa6>
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3714      	adds	r7, #20
 8009496:	46bd      	mov	sp, r7
 8009498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949c:	4770      	bx	lr
 800949e:	bf00      	nop
 80094a0:	20000d80 	.word	0x20000d80

080094a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80094aa:	2300      	movs	r3, #0
 80094ac:	607b      	str	r3, [r7, #4]
 80094ae:	e002      	b.n	80094b6 <enq_lock+0x12>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	3301      	adds	r3, #1
 80094b4:	607b      	str	r3, [r7, #4]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	d806      	bhi.n	80094ca <enq_lock+0x26>
 80094bc:	4a09      	ldr	r2, [pc, #36]	; (80094e4 <enq_lock+0x40>)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	4413      	add	r3, r2
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d1f2      	bne.n	80094b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	bf14      	ite	ne
 80094d0:	2301      	movne	r3, #1
 80094d2:	2300      	moveq	r3, #0
 80094d4:	b2db      	uxtb	r3, r3
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	370c      	adds	r7, #12
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr
 80094e2:	bf00      	nop
 80094e4:	20000d80 	.word	0x20000d80

080094e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80094f2:	2300      	movs	r3, #0
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e01f      	b.n	8009538 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80094f8:	4a41      	ldr	r2, [pc, #260]	; (8009600 <inc_lock+0x118>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	011b      	lsls	r3, r3, #4
 80094fe:	4413      	add	r3, r2
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	429a      	cmp	r2, r3
 8009508:	d113      	bne.n	8009532 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800950a:	4a3d      	ldr	r2, [pc, #244]	; (8009600 <inc_lock+0x118>)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	011b      	lsls	r3, r3, #4
 8009510:	4413      	add	r3, r2
 8009512:	3304      	adds	r3, #4
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800951a:	429a      	cmp	r2, r3
 800951c:	d109      	bne.n	8009532 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800951e:	4a38      	ldr	r2, [pc, #224]	; (8009600 <inc_lock+0x118>)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	011b      	lsls	r3, r3, #4
 8009524:	4413      	add	r3, r2
 8009526:	3308      	adds	r3, #8
 8009528:	681a      	ldr	r2, [r3, #0]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800952e:	429a      	cmp	r2, r3
 8009530:	d006      	beq.n	8009540 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	3301      	adds	r3, #1
 8009536:	60fb      	str	r3, [r7, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d9dc      	bls.n	80094f8 <inc_lock+0x10>
 800953e:	e000      	b.n	8009542 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009540:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2b02      	cmp	r3, #2
 8009546:	d132      	bne.n	80095ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009548:	2300      	movs	r3, #0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e002      	b.n	8009554 <inc_lock+0x6c>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	3301      	adds	r3, #1
 8009552:	60fb      	str	r3, [r7, #12]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2b01      	cmp	r3, #1
 8009558:	d806      	bhi.n	8009568 <inc_lock+0x80>
 800955a:	4a29      	ldr	r2, [pc, #164]	; (8009600 <inc_lock+0x118>)
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	4413      	add	r3, r2
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1f2      	bne.n	800954e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d101      	bne.n	8009572 <inc_lock+0x8a>
 800956e:	2300      	movs	r3, #0
 8009570:	e040      	b.n	80095f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	4922      	ldr	r1, [pc, #136]	; (8009600 <inc_lock+0x118>)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	011b      	lsls	r3, r3, #4
 800957c:	440b      	add	r3, r1
 800957e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	689a      	ldr	r2, [r3, #8]
 8009584:	491e      	ldr	r1, [pc, #120]	; (8009600 <inc_lock+0x118>)
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	011b      	lsls	r3, r3, #4
 800958a:	440b      	add	r3, r1
 800958c:	3304      	adds	r3, #4
 800958e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	695a      	ldr	r2, [r3, #20]
 8009594:	491a      	ldr	r1, [pc, #104]	; (8009600 <inc_lock+0x118>)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	011b      	lsls	r3, r3, #4
 800959a:	440b      	add	r3, r1
 800959c:	3308      	adds	r3, #8
 800959e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80095a0:	4a17      	ldr	r2, [pc, #92]	; (8009600 <inc_lock+0x118>)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	011b      	lsls	r3, r3, #4
 80095a6:	4413      	add	r3, r2
 80095a8:	330c      	adds	r3, #12
 80095aa:	2200      	movs	r2, #0
 80095ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <inc_lock+0xe0>
 80095b4:	4a12      	ldr	r2, [pc, #72]	; (8009600 <inc_lock+0x118>)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	011b      	lsls	r3, r3, #4
 80095ba:	4413      	add	r3, r2
 80095bc:	330c      	adds	r3, #12
 80095be:	881b      	ldrh	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d001      	beq.n	80095c8 <inc_lock+0xe0>
 80095c4:	2300      	movs	r3, #0
 80095c6:	e015      	b.n	80095f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d108      	bne.n	80095e0 <inc_lock+0xf8>
 80095ce:	4a0c      	ldr	r2, [pc, #48]	; (8009600 <inc_lock+0x118>)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	4413      	add	r3, r2
 80095d6:	330c      	adds	r3, #12
 80095d8:	881b      	ldrh	r3, [r3, #0]
 80095da:	3301      	adds	r3, #1
 80095dc:	b29a      	uxth	r2, r3
 80095de:	e001      	b.n	80095e4 <inc_lock+0xfc>
 80095e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095e4:	4906      	ldr	r1, [pc, #24]	; (8009600 <inc_lock+0x118>)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	011b      	lsls	r3, r3, #4
 80095ea:	440b      	add	r3, r1
 80095ec:	330c      	adds	r3, #12
 80095ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr
 8009600:	20000d80 	.word	0x20000d80

08009604 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3b01      	subs	r3, #1
 8009610:	607b      	str	r3, [r7, #4]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b01      	cmp	r3, #1
 8009616:	d825      	bhi.n	8009664 <dec_lock+0x60>
		n = Files[i].ctr;
 8009618:	4a17      	ldr	r2, [pc, #92]	; (8009678 <dec_lock+0x74>)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	011b      	lsls	r3, r3, #4
 800961e:	4413      	add	r3, r2
 8009620:	330c      	adds	r3, #12
 8009622:	881b      	ldrh	r3, [r3, #0]
 8009624:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009626:	89fb      	ldrh	r3, [r7, #14]
 8009628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800962c:	d101      	bne.n	8009632 <dec_lock+0x2e>
 800962e:	2300      	movs	r3, #0
 8009630:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009632:	89fb      	ldrh	r3, [r7, #14]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d002      	beq.n	800963e <dec_lock+0x3a>
 8009638:	89fb      	ldrh	r3, [r7, #14]
 800963a:	3b01      	subs	r3, #1
 800963c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800963e:	4a0e      	ldr	r2, [pc, #56]	; (8009678 <dec_lock+0x74>)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	011b      	lsls	r3, r3, #4
 8009644:	4413      	add	r3, r2
 8009646:	330c      	adds	r3, #12
 8009648:	89fa      	ldrh	r2, [r7, #14]
 800964a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800964c:	89fb      	ldrh	r3, [r7, #14]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d105      	bne.n	800965e <dec_lock+0x5a>
 8009652:	4a09      	ldr	r2, [pc, #36]	; (8009678 <dec_lock+0x74>)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	011b      	lsls	r3, r3, #4
 8009658:	4413      	add	r3, r2
 800965a:	2200      	movs	r2, #0
 800965c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800965e:	2300      	movs	r3, #0
 8009660:	737b      	strb	r3, [r7, #13]
 8009662:	e001      	b.n	8009668 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009664:	2302      	movs	r3, #2
 8009666:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009668:	7b7b      	ldrb	r3, [r7, #13]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr
 8009676:	bf00      	nop
 8009678:	20000d80 	.word	0x20000d80

0800967c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800967c:	b480      	push	{r7}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009684:	2300      	movs	r3, #0
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	e010      	b.n	80096ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800968a:	4a0d      	ldr	r2, [pc, #52]	; (80096c0 <clear_lock+0x44>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	011b      	lsls	r3, r3, #4
 8009690:	4413      	add	r3, r2
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	687a      	ldr	r2, [r7, #4]
 8009696:	429a      	cmp	r2, r3
 8009698:	d105      	bne.n	80096a6 <clear_lock+0x2a>
 800969a:	4a09      	ldr	r2, [pc, #36]	; (80096c0 <clear_lock+0x44>)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	4413      	add	r3, r2
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	3301      	adds	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2b01      	cmp	r3, #1
 80096b0:	d9eb      	bls.n	800968a <clear_lock+0xe>
	}
}
 80096b2:	bf00      	nop
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	20000d80 	.word	0x20000d80

080096c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80096cc:	2300      	movs	r3, #0
 80096ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	78db      	ldrb	r3, [r3, #3]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d034      	beq.n	8009742 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	7858      	ldrb	r0, [r3, #1]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80096e8:	2301      	movs	r3, #1
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	f7ff fd0e 	bl	800910c <disk_write>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	73fb      	strb	r3, [r7, #15]
 80096fa:	e022      	b.n	8009742 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	697a      	ldr	r2, [r7, #20]
 8009708:	1ad2      	subs	r2, r2, r3
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	69db      	ldr	r3, [r3, #28]
 800970e:	429a      	cmp	r2, r3
 8009710:	d217      	bcs.n	8009742 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	789b      	ldrb	r3, [r3, #2]
 8009716:	613b      	str	r3, [r7, #16]
 8009718:	e010      	b.n	800973c <sync_window+0x78>
					wsect += fs->fsize;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	69db      	ldr	r3, [r3, #28]
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	4413      	add	r3, r2
 8009722:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7858      	ldrb	r0, [r3, #1]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800972e:	2301      	movs	r3, #1
 8009730:	697a      	ldr	r2, [r7, #20]
 8009732:	f7ff fceb 	bl	800910c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	3b01      	subs	r3, #1
 800973a:	613b      	str	r3, [r7, #16]
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d8eb      	bhi.n	800971a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009742:	7bfb      	ldrb	r3, [r7, #15]
}
 8009744:	4618      	mov	r0, r3
 8009746:	3718      	adds	r7, #24
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d01b      	beq.n	800979c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff ffad 	bl	80096c4 <sync_window>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d113      	bne.n	800979c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	7858      	ldrb	r0, [r3, #1]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800977e:	2301      	movs	r3, #1
 8009780:	683a      	ldr	r2, [r7, #0]
 8009782:	f7ff fca3 	bl	80090cc <disk_read>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d004      	beq.n	8009796 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800978c:	f04f 33ff 	mov.w	r3, #4294967295
 8009790:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009792:	2301      	movs	r3, #1
 8009794:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800979c:	7bfb      	ldrb	r3, [r7, #15]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
	...

080097a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7ff ff87 	bl	80096c4 <sync_window>
 80097b6:	4603      	mov	r3, r0
 80097b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d158      	bne.n	8009872 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b03      	cmp	r3, #3
 80097c6:	d148      	bne.n	800985a <sync_fs+0xb2>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	791b      	ldrb	r3, [r3, #4]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d144      	bne.n	800985a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	3334      	adds	r3, #52	; 0x34
 80097d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f7ff fd77 	bl	80092ce <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3334      	adds	r3, #52	; 0x34
 80097e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80097ec:	4618      	mov	r0, r3
 80097ee:	f7ff fd06 	bl	80091fe <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	3334      	adds	r3, #52	; 0x34
 80097f6:	4921      	ldr	r1, [pc, #132]	; (800987c <sync_fs+0xd4>)
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7ff fd1b 	bl	8009234 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	3334      	adds	r3, #52	; 0x34
 8009802:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009806:	491e      	ldr	r1, [pc, #120]	; (8009880 <sync_fs+0xd8>)
 8009808:	4618      	mov	r0, r3
 800980a:	f7ff fd13 	bl	8009234 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	3334      	adds	r3, #52	; 0x34
 8009812:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	695b      	ldr	r3, [r3, #20]
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f7ff fd09 	bl	8009234 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3334      	adds	r3, #52	; 0x34
 8009826:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	4619      	mov	r1, r3
 8009830:	4610      	mov	r0, r2
 8009832:	f7ff fcff 	bl	8009234 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a1b      	ldr	r3, [r3, #32]
 800983a:	1c5a      	adds	r2, r3, #1
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7858      	ldrb	r0, [r3, #1]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800984e:	2301      	movs	r3, #1
 8009850:	f7ff fc5c 	bl	800910c <disk_write>
			fs->fsi_flag = 0;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2200      	movs	r2, #0
 8009858:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	785b      	ldrb	r3, [r3, #1]
 800985e:	2200      	movs	r2, #0
 8009860:	2100      	movs	r1, #0
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff fc72 	bl	800914c <disk_ioctl>
 8009868:	4603      	mov	r3, r0
 800986a:	2b00      	cmp	r3, #0
 800986c:	d001      	beq.n	8009872 <sync_fs+0xca>
 800986e:	2301      	movs	r3, #1
 8009870:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009872:	7bfb      	ldrb	r3, [r7, #15]
}
 8009874:	4618      	mov	r0, r3
 8009876:	3710      	adds	r7, #16
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	41615252 	.word	0x41615252
 8009880:	61417272 	.word	0x61417272

08009884 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	3b02      	subs	r3, #2
 8009892:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	3b02      	subs	r3, #2
 800989a:	683a      	ldr	r2, [r7, #0]
 800989c:	429a      	cmp	r2, r3
 800989e:	d301      	bcc.n	80098a4 <clust2sect+0x20>
 80098a0:	2300      	movs	r3, #0
 80098a2:	e008      	b.n	80098b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	895b      	ldrh	r3, [r3, #10]
 80098a8:	461a      	mov	r2, r3
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	fb03 f202 	mul.w	r2, r3, r2
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b4:	4413      	add	r3, r2
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	370c      	adds	r7, #12
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr

080098c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b086      	sub	sp, #24
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
 80098ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d904      	bls.n	80098e2 <get_fat+0x20>
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	699b      	ldr	r3, [r3, #24]
 80098dc:	683a      	ldr	r2, [r7, #0]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d302      	bcc.n	80098e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80098e2:	2301      	movs	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
 80098e6:	e08f      	b.n	8009a08 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80098e8:	f04f 33ff 	mov.w	r3, #4294967295
 80098ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d062      	beq.n	80099bc <get_fat+0xfa>
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	dc7c      	bgt.n	80099f4 <get_fat+0x132>
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d002      	beq.n	8009904 <get_fat+0x42>
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d042      	beq.n	8009988 <get_fat+0xc6>
 8009902:	e077      	b.n	80099f4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	60fb      	str	r3, [r7, #12]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	085b      	lsrs	r3, r3, #1
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	4413      	add	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	0a5b      	lsrs	r3, r3, #9
 800991a:	4413      	add	r3, r2
 800991c:	4619      	mov	r1, r3
 800991e:	6938      	ldr	r0, [r7, #16]
 8009920:	f7ff ff14 	bl	800974c <move_window>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d167      	bne.n	80099fa <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	60fa      	str	r2, [r7, #12]
 8009930:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4413      	add	r3, r2
 8009938:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800993c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	0a5b      	lsrs	r3, r3, #9
 8009946:	4413      	add	r3, r2
 8009948:	4619      	mov	r1, r3
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f7ff fefe 	bl	800974c <move_window>
 8009950:	4603      	mov	r3, r0
 8009952:	2b00      	cmp	r3, #0
 8009954:	d153      	bne.n	80099fe <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800995c:	693a      	ldr	r2, [r7, #16]
 800995e:	4413      	add	r3, r2
 8009960:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009964:	021b      	lsls	r3, r3, #8
 8009966:	461a      	mov	r2, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4313      	orrs	r3, r2
 800996c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	f003 0301 	and.w	r3, r3, #1
 8009974:	2b00      	cmp	r3, #0
 8009976:	d002      	beq.n	800997e <get_fat+0xbc>
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	091b      	lsrs	r3, r3, #4
 800997c:	e002      	b.n	8009984 <get_fat+0xc2>
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009984:	617b      	str	r3, [r7, #20]
			break;
 8009986:	e03f      	b.n	8009a08 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	0a1b      	lsrs	r3, r3, #8
 8009990:	4413      	add	r3, r2
 8009992:	4619      	mov	r1, r3
 8009994:	6938      	ldr	r0, [r7, #16]
 8009996:	f7ff fed9 	bl	800974c <move_window>
 800999a:	4603      	mov	r3, r0
 800999c:	2b00      	cmp	r3, #0
 800999e:	d130      	bne.n	8009a02 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80099ae:	4413      	add	r3, r2
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff fbe9 	bl	8009188 <ld_word>
 80099b6:	4603      	mov	r3, r0
 80099b8:	617b      	str	r3, [r7, #20]
			break;
 80099ba:	e025      	b.n	8009a08 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	09db      	lsrs	r3, r3, #7
 80099c4:	4413      	add	r3, r2
 80099c6:	4619      	mov	r1, r3
 80099c8:	6938      	ldr	r0, [r7, #16]
 80099ca:	f7ff febf 	bl	800974c <move_window>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d118      	bne.n	8009a06 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80099e2:	4413      	add	r3, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f7ff fbe7 	bl	80091b8 <ld_dword>
 80099ea:	4603      	mov	r3, r0
 80099ec:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099f0:	617b      	str	r3, [r7, #20]
			break;
 80099f2:	e009      	b.n	8009a08 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80099f4:	2301      	movs	r3, #1
 80099f6:	617b      	str	r3, [r7, #20]
 80099f8:	e006      	b.n	8009a08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099fa:	bf00      	nop
 80099fc:	e004      	b.n	8009a08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80099fe:	bf00      	nop
 8009a00:	e002      	b.n	8009a08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009a02:	bf00      	nop
 8009a04:	e000      	b.n	8009a08 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009a06:	bf00      	nop
		}
	}

	return val;
 8009a08:	697b      	ldr	r3, [r7, #20]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3718      	adds	r7, #24
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009a12:	b590      	push	{r4, r7, lr}
 8009a14:	b089      	sub	sp, #36	; 0x24
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	60f8      	str	r0, [r7, #12]
 8009a1a:	60b9      	str	r1, [r7, #8]
 8009a1c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8009a1e:	2302      	movs	r3, #2
 8009a20:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	f240 80d2 	bls.w	8009bce <put_fat+0x1bc>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	68ba      	ldr	r2, [r7, #8]
 8009a30:	429a      	cmp	r2, r3
 8009a32:	f080 80cc 	bcs.w	8009bce <put_fat+0x1bc>
		switch (fs->fs_type) {
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	2b03      	cmp	r3, #3
 8009a3c:	f000 8096 	beq.w	8009b6c <put_fat+0x15a>
 8009a40:	2b03      	cmp	r3, #3
 8009a42:	f300 80cd 	bgt.w	8009be0 <put_fat+0x1ce>
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d002      	beq.n	8009a50 <put_fat+0x3e>
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d06e      	beq.n	8009b2c <put_fat+0x11a>
 8009a4e:	e0c7      	b.n	8009be0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	61bb      	str	r3, [r7, #24]
 8009a54:	69bb      	ldr	r3, [r7, #24]
 8009a56:	085b      	lsrs	r3, r3, #1
 8009a58:	69ba      	ldr	r2, [r7, #24]
 8009a5a:	4413      	add	r3, r2
 8009a5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	4413      	add	r3, r2
 8009a68:	4619      	mov	r1, r3
 8009a6a:	68f8      	ldr	r0, [r7, #12]
 8009a6c:	f7ff fe6e 	bl	800974c <move_window>
 8009a70:	4603      	mov	r3, r0
 8009a72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009a74:	7ffb      	ldrb	r3, [r7, #31]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f040 80ab 	bne.w	8009bd2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009a82:	69bb      	ldr	r3, [r7, #24]
 8009a84:	1c59      	adds	r1, r3, #1
 8009a86:	61b9      	str	r1, [r7, #24]
 8009a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8c:	4413      	add	r3, r2
 8009a8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00d      	beq.n	8009ab6 <put_fat+0xa4>
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b25b      	sxtb	r3, r3
 8009aa0:	f003 030f 	and.w	r3, r3, #15
 8009aa4:	b25a      	sxtb	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	011b      	lsls	r3, r3, #4
 8009aac:	b25b      	sxtb	r3, r3
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	b25b      	sxtb	r3, r3
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	e001      	b.n	8009aba <put_fat+0xa8>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	697a      	ldr	r2, [r7, #20]
 8009abc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ac8:	69bb      	ldr	r3, [r7, #24]
 8009aca:	0a5b      	lsrs	r3, r3, #9
 8009acc:	4413      	add	r3, r2
 8009ace:	4619      	mov	r1, r3
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7ff fe3b 	bl	800974c <move_window>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009ada:	7ffb      	ldrb	r3, [r7, #31]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d17a      	bne.n	8009bd6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009aec:	4413      	add	r3, r2
 8009aee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <put_fat+0xf0>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	091b      	lsrs	r3, r3, #4
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	e00e      	b.n	8009b20 <put_fat+0x10e>
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	b25b      	sxtb	r3, r3
 8009b08:	f023 030f 	bic.w	r3, r3, #15
 8009b0c:	b25a      	sxtb	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	0a1b      	lsrs	r3, r3, #8
 8009b12:	b25b      	sxtb	r3, r3
 8009b14:	f003 030f 	and.w	r3, r3, #15
 8009b18:	b25b      	sxtb	r3, r3
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	b25b      	sxtb	r3, r3
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2201      	movs	r2, #1
 8009b28:	70da      	strb	r2, [r3, #3]
			break;
 8009b2a:	e059      	b.n	8009be0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	4413      	add	r3, r2
 8009b36:	4619      	mov	r1, r3
 8009b38:	68f8      	ldr	r0, [r7, #12]
 8009b3a:	f7ff fe07 	bl	800974c <move_window>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b42:	7ffb      	ldrb	r3, [r7, #31]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d148      	bne.n	8009bda <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	005b      	lsls	r3, r3, #1
 8009b52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009b56:	4413      	add	r3, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	b292      	uxth	r2, r2
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f7ff fb4d 	bl	80091fe <st_word>
			fs->wflag = 1;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	2201      	movs	r2, #1
 8009b68:	70da      	strb	r2, [r3, #3]
			break;
 8009b6a:	e039      	b.n	8009be0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	09db      	lsrs	r3, r3, #7
 8009b74:	4413      	add	r3, r2
 8009b76:	4619      	mov	r1, r3
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f7ff fde7 	bl	800974c <move_window>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009b82:	7ffb      	ldrb	r3, [r7, #31]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d12a      	bne.n	8009bde <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009b9c:	4413      	add	r3, r2
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff fb0a 	bl	80091b8 <ld_dword>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009baa:	4323      	orrs	r3, r4
 8009bac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009bbc:	4413      	add	r3, r2
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7ff fb37 	bl	8009234 <st_dword>
			fs->wflag = 1;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2201      	movs	r2, #1
 8009bca:	70da      	strb	r2, [r3, #3]
			break;
 8009bcc:	e008      	b.n	8009be0 <put_fat+0x1ce>
		}
	}
 8009bce:	bf00      	nop
 8009bd0:	e006      	b.n	8009be0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bd2:	bf00      	nop
 8009bd4:	e004      	b.n	8009be0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bd6:	bf00      	nop
 8009bd8:	e002      	b.n	8009be0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bda:	bf00      	nop
 8009bdc:	e000      	b.n	8009be0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8009bde:	bf00      	nop
	return res;
 8009be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	3724      	adds	r7, #36	; 0x24
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd90      	pop	{r4, r7, pc}

08009bea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b088      	sub	sp, #32
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	60f8      	str	r0, [r7, #12]
 8009bf2:	60b9      	str	r1, [r7, #8]
 8009bf4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d904      	bls.n	8009c10 <remove_chain+0x26>
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	699b      	ldr	r3, [r3, #24]
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d301      	bcc.n	8009c14 <remove_chain+0x2a>
 8009c10:	2302      	movs	r3, #2
 8009c12:	e04b      	b.n	8009cac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00c      	beq.n	8009c34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c1e:	6879      	ldr	r1, [r7, #4]
 8009c20:	69b8      	ldr	r0, [r7, #24]
 8009c22:	f7ff fef6 	bl	8009a12 <put_fat>
 8009c26:	4603      	mov	r3, r0
 8009c28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009c2a:	7ffb      	ldrb	r3, [r7, #31]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <remove_chain+0x4a>
 8009c30:	7ffb      	ldrb	r3, [r7, #31]
 8009c32:	e03b      	b.n	8009cac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8009c34:	68b9      	ldr	r1, [r7, #8]
 8009c36:	68f8      	ldr	r0, [r7, #12]
 8009c38:	f7ff fe43 	bl	80098c2 <get_fat>
 8009c3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d031      	beq.n	8009ca8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d101      	bne.n	8009c4e <remove_chain+0x64>
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	e02e      	b.n	8009cac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c54:	d101      	bne.n	8009c5a <remove_chain+0x70>
 8009c56:	2301      	movs	r3, #1
 8009c58:	e028      	b.n	8009cac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	68b9      	ldr	r1, [r7, #8]
 8009c5e:	69b8      	ldr	r0, [r7, #24]
 8009c60:	f7ff fed7 	bl	8009a12 <put_fat>
 8009c64:	4603      	mov	r3, r0
 8009c66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8009c68:	7ffb      	ldrb	r3, [r7, #31]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <remove_chain+0x88>
 8009c6e:	7ffb      	ldrb	r3, [r7, #31]
 8009c70:	e01c      	b.n	8009cac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	695a      	ldr	r2, [r3, #20]
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	699b      	ldr	r3, [r3, #24]
 8009c7a:	3b02      	subs	r3, #2
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d20b      	bcs.n	8009c98 <remove_chain+0xae>
			fs->free_clst++;
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	1c5a      	adds	r2, r3, #1
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8009c8a:	69bb      	ldr	r3, [r7, #24]
 8009c8c:	791b      	ldrb	r3, [r3, #4]
 8009c8e:	f043 0301 	orr.w	r3, r3, #1
 8009c92:	b2da      	uxtb	r2, r3
 8009c94:	69bb      	ldr	r3, [r7, #24]
 8009c96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8009c98:	697b      	ldr	r3, [r7, #20]
 8009c9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d3c6      	bcc.n	8009c34 <remove_chain+0x4a>
 8009ca6:	e000      	b.n	8009caa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8009ca8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3720      	adds	r7, #32
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10d      	bne.n	8009ce6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d004      	beq.n	8009ce0 <create_chain+0x2c>
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	69ba      	ldr	r2, [r7, #24]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d31b      	bcc.n	8009d18 <create_chain+0x64>
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	61bb      	str	r3, [r7, #24]
 8009ce4:	e018      	b.n	8009d18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8009ce6:	6839      	ldr	r1, [r7, #0]
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff fdea 	bl	80098c2 <get_fat>
 8009cee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d801      	bhi.n	8009cfa <create_chain+0x46>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e070      	b.n	8009ddc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d00:	d101      	bne.n	8009d06 <create_chain+0x52>
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	e06a      	b.n	8009ddc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	429a      	cmp	r2, r3
 8009d0e:	d201      	bcs.n	8009d14 <create_chain+0x60>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	e063      	b.n	8009ddc <create_chain+0x128>
		scl = clst;
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8009d18:	69bb      	ldr	r3, [r7, #24]
 8009d1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	699b      	ldr	r3, [r3, #24]
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d307      	bcc.n	8009d3c <create_chain+0x88>
				ncl = 2;
 8009d2c:	2302      	movs	r3, #2
 8009d2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009d30:	69fa      	ldr	r2, [r7, #28]
 8009d32:	69bb      	ldr	r3, [r7, #24]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d901      	bls.n	8009d3c <create_chain+0x88>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	e04f      	b.n	8009ddc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009d3c:	69f9      	ldr	r1, [r7, #28]
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff fdbf 	bl	80098c2 <get_fat>
 8009d44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00e      	beq.n	8009d6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d003      	beq.n	8009d5a <create_chain+0xa6>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d58:	d101      	bne.n	8009d5e <create_chain+0xaa>
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	e03e      	b.n	8009ddc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009d5e:	69fa      	ldr	r2, [r7, #28]
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d1da      	bne.n	8009d1c <create_chain+0x68>
 8009d66:	2300      	movs	r3, #0
 8009d68:	e038      	b.n	8009ddc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009d6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8009d70:	69f9      	ldr	r1, [r7, #28]
 8009d72:	6938      	ldr	r0, [r7, #16]
 8009d74:	f7ff fe4d 	bl	8009a12 <put_fat>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d109      	bne.n	8009d96 <create_chain+0xe2>
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d006      	beq.n	8009d96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8009d88:	69fa      	ldr	r2, [r7, #28]
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6938      	ldr	r0, [r7, #16]
 8009d8e:	f7ff fe40 	bl	8009a12 <put_fat>
 8009d92:	4603      	mov	r3, r0
 8009d94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8009d96:	7dfb      	ldrb	r3, [r7, #23]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d116      	bne.n	8009dca <create_chain+0x116>
		fs->last_clst = ncl;
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	69fa      	ldr	r2, [r7, #28]
 8009da0:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8009da2:	693b      	ldr	r3, [r7, #16]
 8009da4:	695a      	ldr	r2, [r3, #20]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	699b      	ldr	r3, [r3, #24]
 8009daa:	3b02      	subs	r3, #2
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d804      	bhi.n	8009dba <create_chain+0x106>
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	695b      	ldr	r3, [r3, #20]
 8009db4:	1e5a      	subs	r2, r3, #1
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	791b      	ldrb	r3, [r3, #4]
 8009dbe:	f043 0301 	orr.w	r3, r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	711a      	strb	r2, [r3, #4]
 8009dc8:	e007      	b.n	8009dda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d102      	bne.n	8009dd6 <create_chain+0x122>
 8009dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8009dd4:	e000      	b.n	8009dd8 <create_chain+0x124>
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009dda:	69fb      	ldr	r3, [r7, #28]
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3720      	adds	r7, #32
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b087      	sub	sp, #28
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	3304      	adds	r3, #4
 8009dfa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	0a5b      	lsrs	r3, r3, #9
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	8952      	ldrh	r2, [r2, #10]
 8009e04:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e08:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	1d1a      	adds	r2, r3, #4
 8009e0e:	613a      	str	r2, [r7, #16]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d101      	bne.n	8009e1e <clmt_clust+0x3a>
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e010      	b.n	8009e40 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8009e1e:	697a      	ldr	r2, [r7, #20]
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	d307      	bcc.n	8009e36 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8009e26:	697a      	ldr	r2, [r7, #20]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	3304      	adds	r3, #4
 8009e32:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009e34:	e7e9      	b.n	8009e0a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8009e36:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009e38:	693b      	ldr	r3, [r7, #16]
 8009e3a:	681a      	ldr	r2, [r3, #0]
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	4413      	add	r3, r2
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	371c      	adds	r7, #28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr

08009e4c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b086      	sub	sp, #24
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
 8009e54:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009e62:	d204      	bcs.n	8009e6e <dir_sdi+0x22>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	f003 031f 	and.w	r3, r3, #31
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <dir_sdi+0x26>
		return FR_INT_ERR;
 8009e6e:	2302      	movs	r3, #2
 8009e70:	e063      	b.n	8009f3a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d106      	bne.n	8009e92 <dir_sdi+0x46>
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b02      	cmp	r3, #2
 8009e8a:	d902      	bls.n	8009e92 <dir_sdi+0x46>
		clst = fs->dirbase;
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e90:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d10c      	bne.n	8009eb2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	095b      	lsrs	r3, r3, #5
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	8912      	ldrh	r2, [r2, #8]
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d301      	bcc.n	8009ea8 <dir_sdi+0x5c>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	e048      	b.n	8009f3a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	61da      	str	r2, [r3, #28]
 8009eb0:	e029      	b.n	8009f06 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	895b      	ldrh	r3, [r3, #10]
 8009eb6:	025b      	lsls	r3, r3, #9
 8009eb8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009eba:	e019      	b.n	8009ef0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6979      	ldr	r1, [r7, #20]
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7ff fcfe 	bl	80098c2 <get_fat>
 8009ec6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ece:	d101      	bne.n	8009ed4 <dir_sdi+0x88>
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e032      	b.n	8009f3a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d904      	bls.n	8009ee4 <dir_sdi+0x98>
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d301      	bcc.n	8009ee8 <dir_sdi+0x9c>
 8009ee4:	2302      	movs	r3, #2
 8009ee6:	e028      	b.n	8009f3a <dir_sdi+0xee>
			ofs -= csz;
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	1ad3      	subs	r3, r2, r3
 8009eee:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d2e1      	bcs.n	8009ebc <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8009ef8:	6979      	ldr	r1, [r7, #20]
 8009efa:	6938      	ldr	r0, [r7, #16]
 8009efc:	f7ff fcc2 	bl	8009884 <clust2sect>
 8009f00:	4602      	mov	r2, r0
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	69db      	ldr	r3, [r3, #28]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <dir_sdi+0xcc>
 8009f14:	2302      	movs	r3, #2
 8009f16:	e010      	b.n	8009f3a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	69da      	ldr	r2, [r3, #28]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	0a5b      	lsrs	r3, r3, #9
 8009f20:	441a      	add	r2, r3
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f32:	441a      	add	r2, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3718      	adds	r7, #24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b086      	sub	sp, #24
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	695b      	ldr	r3, [r3, #20]
 8009f56:	3320      	adds	r3, #32
 8009f58:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	69db      	ldr	r3, [r3, #28]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <dir_next+0x28>
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f68:	d301      	bcc.n	8009f6e <dir_next+0x2c>
 8009f6a:	2304      	movs	r3, #4
 8009f6c:	e0aa      	b.n	800a0c4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	f040 8098 	bne.w	800a0aa <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10b      	bne.n	8009fa4 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	095b      	lsrs	r3, r3, #5
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	8912      	ldrh	r2, [r2, #8]
 8009f94:	4293      	cmp	r3, r2
 8009f96:	f0c0 8088 	bcc.w	800a0aa <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	61da      	str	r2, [r3, #28]
 8009fa0:	2304      	movs	r3, #4
 8009fa2:	e08f      	b.n	800a0c4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	0a5b      	lsrs	r3, r3, #9
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	8952      	ldrh	r2, [r2, #10]
 8009fac:	3a01      	subs	r2, #1
 8009fae:	4013      	ands	r3, r2
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d17a      	bne.n	800a0aa <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	4619      	mov	r1, r3
 8009fbc:	4610      	mov	r0, r2
 8009fbe:	f7ff fc80 	bl	80098c2 <get_fat>
 8009fc2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d801      	bhi.n	8009fce <dir_next+0x8c>
 8009fca:	2302      	movs	r3, #2
 8009fcc:	e07a      	b.n	800a0c4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fd4:	d101      	bne.n	8009fda <dir_next+0x98>
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e074      	b.n	800a0c4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	697a      	ldr	r2, [r7, #20]
 8009fe0:	429a      	cmp	r2, r3
 8009fe2:	d358      	bcc.n	800a096 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d104      	bne.n	8009ff4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2200      	movs	r2, #0
 8009fee:	61da      	str	r2, [r3, #28]
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	e067      	b.n	800a0c4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009ff4:	687a      	ldr	r2, [r7, #4]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	4610      	mov	r0, r2
 8009ffe:	f7ff fe59 	bl	8009cb4 <create_chain>
 800a002:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <dir_next+0xcc>
 800a00a:	2307      	movs	r3, #7
 800a00c:	e05a      	b.n	800a0c4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d101      	bne.n	800a018 <dir_next+0xd6>
 800a014:	2302      	movs	r3, #2
 800a016:	e055      	b.n	800a0c4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a01e:	d101      	bne.n	800a024 <dir_next+0xe2>
 800a020:	2301      	movs	r3, #1
 800a022:	e04f      	b.n	800a0c4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f7ff fb4d 	bl	80096c4 <sync_window>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <dir_next+0xf2>
 800a030:	2301      	movs	r3, #1
 800a032:	e047      	b.n	800a0c4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3334      	adds	r3, #52	; 0x34
 800a038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a03c:	2100      	movs	r1, #0
 800a03e:	4618      	mov	r0, r3
 800a040:	f7ff f945 	bl	80092ce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a044:	2300      	movs	r3, #0
 800a046:	613b      	str	r3, [r7, #16]
 800a048:	6979      	ldr	r1, [r7, #20]
 800a04a:	68f8      	ldr	r0, [r7, #12]
 800a04c:	f7ff fc1a 	bl	8009884 <clust2sect>
 800a050:	4602      	mov	r2, r0
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	631a      	str	r2, [r3, #48]	; 0x30
 800a056:	e012      	b.n	800a07e <dir_next+0x13c>
						fs->wflag = 1;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff fb30 	bl	80096c4 <sync_window>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <dir_next+0x12c>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e02a      	b.n	800a0c4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	3301      	adds	r3, #1
 800a072:	613b      	str	r3, [r7, #16]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a078:	1c5a      	adds	r2, r3, #1
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	631a      	str	r2, [r3, #48]	; 0x30
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	895b      	ldrh	r3, [r3, #10]
 800a082:	461a      	mov	r2, r3
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	4293      	cmp	r3, r2
 800a088:	d3e6      	bcc.n	800a058 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	1ad2      	subs	r2, r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	697a      	ldr	r2, [r7, #20]
 800a09a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a09c:	6979      	ldr	r1, [r7, #20]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f7ff fbf0 	bl	8009884 <clust2sect>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68ba      	ldr	r2, [r7, #8]
 800a0ae:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0bc:	441a      	add	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3718      	adds	r7, #24
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a0dc:	2100      	movs	r1, #0
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7ff feb4 	bl	8009e4c <dir_sdi>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d12b      	bne.n	800a146 <dir_alloc+0x7a>
		n = 0;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff fb27 	bl	800974c <move_window>
 800a0fe:	4603      	mov	r3, r0
 800a100:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a102:	7dfb      	ldrb	r3, [r7, #23]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d11d      	bne.n	800a144 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	2be5      	cmp	r3, #229	; 0xe5
 800a110:	d004      	beq.n	800a11c <dir_alloc+0x50>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6a1b      	ldr	r3, [r3, #32]
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d107      	bne.n	800a12c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	3301      	adds	r3, #1
 800a120:	613b      	str	r3, [r7, #16]
 800a122:	693a      	ldr	r2, [r7, #16]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	429a      	cmp	r2, r3
 800a128:	d102      	bne.n	800a130 <dir_alloc+0x64>
 800a12a:	e00c      	b.n	800a146 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a12c:	2300      	movs	r3, #0
 800a12e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a130:	2101      	movs	r1, #1
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7ff ff05 	bl	8009f42 <dir_next>
 800a138:	4603      	mov	r3, r0
 800a13a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a13c:	7dfb      	ldrb	r3, [r7, #23]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d0d7      	beq.n	800a0f2 <dir_alloc+0x26>
 800a142:	e000      	b.n	800a146 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a144:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b04      	cmp	r3, #4
 800a14a:	d101      	bne.n	800a150 <dir_alloc+0x84>
 800a14c:	2307      	movs	r3, #7
 800a14e:	75fb      	strb	r3, [r7, #23]
	return res;
 800a150:	7dfb      	ldrb	r3, [r7, #23]
}
 800a152:	4618      	mov	r0, r3
 800a154:	3718      	adds	r7, #24
 800a156:	46bd      	mov	sp, r7
 800a158:	bd80      	pop	{r7, pc}

0800a15a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a15a:	b580      	push	{r7, lr}
 800a15c:	b084      	sub	sp, #16
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
 800a162:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	331a      	adds	r3, #26
 800a168:	4618      	mov	r0, r3
 800a16a:	f7ff f80d 	bl	8009188 <ld_word>
 800a16e:	4603      	mov	r3, r0
 800a170:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	2b03      	cmp	r3, #3
 800a178:	d109      	bne.n	800a18e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a17a:	683b      	ldr	r3, [r7, #0]
 800a17c:	3314      	adds	r3, #20
 800a17e:	4618      	mov	r0, r3
 800a180:	f7ff f802 	bl	8009188 <ld_word>
 800a184:	4603      	mov	r3, r0
 800a186:	041b      	lsls	r3, r3, #16
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	331a      	adds	r3, #26
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	4611      	mov	r1, r2
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7ff f825 	bl	80091fe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d109      	bne.n	800a1d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	f103 0214 	add.w	r2, r3, #20
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	0c1b      	lsrs	r3, r3, #16
 800a1c6:	b29b      	uxth	r3, r3
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4610      	mov	r0, r2
 800a1cc:	f7ff f817 	bl	80091fe <st_word>
	}
}
 800a1d0:	bf00      	nop
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b086      	sub	sp, #24
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff fe2f 	bl	8009e4c <dir_sdi>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a1f2:	7dfb      	ldrb	r3, [r7, #23]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <dir_find+0x24>
 800a1f8:	7dfb      	ldrb	r3, [r7, #23]
 800a1fa:	e03e      	b.n	800a27a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	69db      	ldr	r3, [r3, #28]
 800a200:	4619      	mov	r1, r3
 800a202:	6938      	ldr	r0, [r7, #16]
 800a204:	f7ff faa2 	bl	800974c <move_window>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d12f      	bne.n	800a272 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a21a:	7bfb      	ldrb	r3, [r7, #15]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d102      	bne.n	800a226 <dir_find+0x4e>
 800a220:	2304      	movs	r3, #4
 800a222:	75fb      	strb	r3, [r7, #23]
 800a224:	e028      	b.n	800a278 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a1b      	ldr	r3, [r3, #32]
 800a22a:	330b      	adds	r3, #11
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a232:	b2da      	uxtb	r2, r3
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	330b      	adds	r3, #11
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	f003 0308 	and.w	r3, r3, #8
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <dir_find+0x86>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a18      	ldr	r0, [r3, #32]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	3324      	adds	r3, #36	; 0x24
 800a250:	220b      	movs	r2, #11
 800a252:	4619      	mov	r1, r3
 800a254:	f7ff f856 	bl	8009304 <mem_cmp>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d00b      	beq.n	800a276 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800a25e:	2100      	movs	r1, #0
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f7ff fe6e 	bl	8009f42 <dir_next>
 800a266:	4603      	mov	r3, r0
 800a268:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a26a:	7dfb      	ldrb	r3, [r7, #23]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d0c5      	beq.n	800a1fc <dir_find+0x24>
 800a270:	e002      	b.n	800a278 <dir_find+0xa0>
		if (res != FR_OK) break;
 800a272:	bf00      	nop
 800a274:	e000      	b.n	800a278 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800a276:	bf00      	nop

	return res;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800a282:	b580      	push	{r7, lr}
 800a284:	b084      	sub	sp, #16
 800a286:	af00      	add	r7, sp, #0
 800a288:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800a290:	2101      	movs	r1, #1
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff ff1a 	bl	800a0cc <dir_alloc>
 800a298:	4603      	mov	r3, r0
 800a29a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d11c      	bne.n	800a2dc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	68b8      	ldr	r0, [r7, #8]
 800a2aa:	f7ff fa4f 	bl	800974c <move_window>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d111      	bne.n	800a2dc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	6a1b      	ldr	r3, [r3, #32]
 800a2bc:	2220      	movs	r2, #32
 800a2be:	2100      	movs	r1, #0
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7ff f804 	bl	80092ce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a18      	ldr	r0, [r3, #32]
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	3324      	adds	r3, #36	; 0x24
 800a2ce:	220b      	movs	r2, #11
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	f7fe ffdb 	bl	800928c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2201      	movs	r2, #1
 800a2da:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800a2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3710      	adds	r7, #16
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
	...

0800a2e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	60fb      	str	r3, [r7, #12]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	3324      	adds	r3, #36	; 0x24
 800a2fc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800a2fe:	220b      	movs	r2, #11
 800a300:	2120      	movs	r1, #32
 800a302:	68b8      	ldr	r0, [r7, #8]
 800a304:	f7fe ffe3 	bl	80092ce <mem_set>
	si = i = 0; ni = 8;
 800a308:	2300      	movs	r3, #0
 800a30a:	613b      	str	r3, [r7, #16]
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	61fb      	str	r3, [r7, #28]
 800a310:	2308      	movs	r3, #8
 800a312:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	1c5a      	adds	r2, r3, #1
 800a318:	61fa      	str	r2, [r7, #28]
 800a31a:	68fa      	ldr	r2, [r7, #12]
 800a31c:	4413      	add	r3, r2
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a322:	7efb      	ldrb	r3, [r7, #27]
 800a324:	2b20      	cmp	r3, #32
 800a326:	d94e      	bls.n	800a3c6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800a328:	7efb      	ldrb	r3, [r7, #27]
 800a32a:	2b2f      	cmp	r3, #47	; 0x2f
 800a32c:	d006      	beq.n	800a33c <create_name+0x54>
 800a32e:	7efb      	ldrb	r3, [r7, #27]
 800a330:	2b5c      	cmp	r3, #92	; 0x5c
 800a332:	d110      	bne.n	800a356 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800a334:	e002      	b.n	800a33c <create_name+0x54>
 800a336:	69fb      	ldr	r3, [r7, #28]
 800a338:	3301      	adds	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	4413      	add	r3, r2
 800a342:	781b      	ldrb	r3, [r3, #0]
 800a344:	2b2f      	cmp	r3, #47	; 0x2f
 800a346:	d0f6      	beq.n	800a336 <create_name+0x4e>
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	4413      	add	r3, r2
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b5c      	cmp	r3, #92	; 0x5c
 800a352:	d0f0      	beq.n	800a336 <create_name+0x4e>
			break;
 800a354:	e038      	b.n	800a3c8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800a356:	7efb      	ldrb	r3, [r7, #27]
 800a358:	2b2e      	cmp	r3, #46	; 0x2e
 800a35a:	d003      	beq.n	800a364 <create_name+0x7c>
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	429a      	cmp	r2, r3
 800a362:	d30c      	bcc.n	800a37e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	2b0b      	cmp	r3, #11
 800a368:	d002      	beq.n	800a370 <create_name+0x88>
 800a36a:	7efb      	ldrb	r3, [r7, #27]
 800a36c:	2b2e      	cmp	r3, #46	; 0x2e
 800a36e:	d001      	beq.n	800a374 <create_name+0x8c>
 800a370:	2306      	movs	r3, #6
 800a372:	e044      	b.n	800a3fe <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800a374:	2308      	movs	r3, #8
 800a376:	613b      	str	r3, [r7, #16]
 800a378:	230b      	movs	r3, #11
 800a37a:	617b      	str	r3, [r7, #20]
			continue;
 800a37c:	e022      	b.n	800a3c4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800a37e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800a382:	2b00      	cmp	r3, #0
 800a384:	da04      	bge.n	800a390 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800a386:	7efb      	ldrb	r3, [r7, #27]
 800a388:	3b80      	subs	r3, #128	; 0x80
 800a38a:	4a1f      	ldr	r2, [pc, #124]	; (800a408 <create_name+0x120>)
 800a38c:	5cd3      	ldrb	r3, [r2, r3]
 800a38e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800a390:	7efb      	ldrb	r3, [r7, #27]
 800a392:	4619      	mov	r1, r3
 800a394:	481d      	ldr	r0, [pc, #116]	; (800a40c <create_name+0x124>)
 800a396:	f7fe ffdc 	bl	8009352 <chk_chr>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d001      	beq.n	800a3a4 <create_name+0xbc>
 800a3a0:	2306      	movs	r3, #6
 800a3a2:	e02c      	b.n	800a3fe <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800a3a4:	7efb      	ldrb	r3, [r7, #27]
 800a3a6:	2b60      	cmp	r3, #96	; 0x60
 800a3a8:	d905      	bls.n	800a3b6 <create_name+0xce>
 800a3aa:	7efb      	ldrb	r3, [r7, #27]
 800a3ac:	2b7a      	cmp	r3, #122	; 0x7a
 800a3ae:	d802      	bhi.n	800a3b6 <create_name+0xce>
 800a3b0:	7efb      	ldrb	r3, [r7, #27]
 800a3b2:	3b20      	subs	r3, #32
 800a3b4:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	613a      	str	r2, [r7, #16]
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	4413      	add	r3, r2
 800a3c0:	7efa      	ldrb	r2, [r7, #27]
 800a3c2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800a3c4:	e7a6      	b.n	800a314 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800a3c6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	69fb      	ldr	r3, [r7, #28]
 800a3cc:	441a      	add	r2, r3
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <create_name+0xf4>
 800a3d8:	2306      	movs	r3, #6
 800a3da:	e010      	b.n	800a3fe <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2be5      	cmp	r3, #229	; 0xe5
 800a3e2:	d102      	bne.n	800a3ea <create_name+0x102>
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	2205      	movs	r2, #5
 800a3e8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800a3ea:	7efb      	ldrb	r3, [r7, #27]
 800a3ec:	2b20      	cmp	r3, #32
 800a3ee:	d801      	bhi.n	800a3f4 <create_name+0x10c>
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	e000      	b.n	800a3f6 <create_name+0x10e>
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	330b      	adds	r3, #11
 800a3fa:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800a3fc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3720      	adds	r7, #32
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	0800ec30 	.word	0x0800ec30
 800a40c:	0800ebc0 	.word	0x0800ebc0

0800a410 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b086      	sub	sp, #24
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800a424:	e002      	b.n	800a42c <follow_path+0x1c>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	3301      	adds	r3, #1
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	2b2f      	cmp	r3, #47	; 0x2f
 800a432:	d0f8      	beq.n	800a426 <follow_path+0x16>
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	2b5c      	cmp	r3, #92	; 0x5c
 800a43a:	d0f4      	beq.n	800a426 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	2200      	movs	r2, #0
 800a440:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	2b1f      	cmp	r3, #31
 800a448:	d80a      	bhi.n	800a460 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	2280      	movs	r2, #128	; 0x80
 800a44e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800a452:	2100      	movs	r1, #0
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f7ff fcf9 	bl	8009e4c <dir_sdi>
 800a45a:	4603      	mov	r3, r0
 800a45c:	75fb      	strb	r3, [r7, #23]
 800a45e:	e043      	b.n	800a4e8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a460:	463b      	mov	r3, r7
 800a462:	4619      	mov	r1, r3
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f7ff ff3f 	bl	800a2e8 <create_name>
 800a46a:	4603      	mov	r3, r0
 800a46c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a46e:	7dfb      	ldrb	r3, [r7, #23]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d134      	bne.n	800a4de <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff feaf 	bl	800a1d8 <dir_find>
 800a47a:	4603      	mov	r3, r0
 800a47c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800a484:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800a486:	7dfb      	ldrb	r3, [r7, #23]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d00a      	beq.n	800a4a2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800a48c:	7dfb      	ldrb	r3, [r7, #23]
 800a48e:	2b04      	cmp	r3, #4
 800a490:	d127      	bne.n	800a4e2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800a492:	7afb      	ldrb	r3, [r7, #11]
 800a494:	f003 0304 	and.w	r3, r3, #4
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d122      	bne.n	800a4e2 <follow_path+0xd2>
 800a49c:	2305      	movs	r3, #5
 800a49e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800a4a0:	e01f      	b.n	800a4e2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4a2:	7afb      	ldrb	r3, [r7, #11]
 800a4a4:	f003 0304 	and.w	r3, r3, #4
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d11c      	bne.n	800a4e6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	799b      	ldrb	r3, [r3, #6]
 800a4b0:	f003 0310 	and.w	r3, r3, #16
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d102      	bne.n	800a4be <follow_path+0xae>
				res = FR_NO_PATH; break;
 800a4b8:	2305      	movs	r3, #5
 800a4ba:	75fb      	strb	r3, [r7, #23]
 800a4bc:	e014      	b.n	800a4e8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4cc:	4413      	add	r3, r2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	68f8      	ldr	r0, [r7, #12]
 800a4d2:	f7ff fe42 	bl	800a15a <ld_clust>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a4dc:	e7c0      	b.n	800a460 <follow_path+0x50>
			if (res != FR_OK) break;
 800a4de:	bf00      	nop
 800a4e0:	e002      	b.n	800a4e8 <follow_path+0xd8>
				break;
 800a4e2:	bf00      	nop
 800a4e4:	e000      	b.n	800a4e8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a4e6:	bf00      	nop
			}
		}
	}

	return res;
 800a4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3718      	adds	r7, #24
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b087      	sub	sp, #28
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d031      	beq.n	800a56c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	617b      	str	r3, [r7, #20]
 800a50e:	e002      	b.n	800a516 <get_ldnumber+0x24>
 800a510:	697b      	ldr	r3, [r7, #20]
 800a512:	3301      	adds	r3, #1
 800a514:	617b      	str	r3, [r7, #20]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	2b20      	cmp	r3, #32
 800a51c:	d903      	bls.n	800a526 <get_ldnumber+0x34>
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	2b3a      	cmp	r3, #58	; 0x3a
 800a524:	d1f4      	bne.n	800a510 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b3a      	cmp	r3, #58	; 0x3a
 800a52c:	d11c      	bne.n	800a568 <get_ldnumber+0x76>
			tp = *path;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	1c5a      	adds	r2, r3, #1
 800a538:	60fa      	str	r2, [r7, #12]
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	3b30      	subs	r3, #48	; 0x30
 800a53e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2b09      	cmp	r3, #9
 800a544:	d80e      	bhi.n	800a564 <get_ldnumber+0x72>
 800a546:	68fa      	ldr	r2, [r7, #12]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	429a      	cmp	r2, r3
 800a54c:	d10a      	bne.n	800a564 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d107      	bne.n	800a564 <get_ldnumber+0x72>
					vol = (int)i;
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	3301      	adds	r3, #1
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	697a      	ldr	r2, [r7, #20]
 800a562:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	e002      	b.n	800a56e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a568:	2300      	movs	r3, #0
 800a56a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a56c:	693b      	ldr	r3, [r7, #16]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr
	...

0800a57c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	70da      	strb	r2, [r3, #3]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f04f 32ff 	mov.w	r2, #4294967295
 800a592:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a594:	6839      	ldr	r1, [r7, #0]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7ff f8d8 	bl	800974c <move_window>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <check_fs+0x2a>
 800a5a2:	2304      	movs	r3, #4
 800a5a4:	e038      	b.n	800a618 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	3334      	adds	r3, #52	; 0x34
 800a5aa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe fdea 	bl	8009188 <ld_word>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d001      	beq.n	800a5c4 <check_fs+0x48>
 800a5c0:	2303      	movs	r3, #3
 800a5c2:	e029      	b.n	800a618 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5ca:	2be9      	cmp	r3, #233	; 0xe9
 800a5cc:	d009      	beq.n	800a5e2 <check_fs+0x66>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a5d4:	2beb      	cmp	r3, #235	; 0xeb
 800a5d6:	d11e      	bne.n	800a616 <check_fs+0x9a>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a5de:	2b90      	cmp	r3, #144	; 0x90
 800a5e0:	d119      	bne.n	800a616 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3334      	adds	r3, #52	; 0x34
 800a5e6:	3336      	adds	r3, #54	; 0x36
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7fe fde5 	bl	80091b8 <ld_dword>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a5f4:	4a0a      	ldr	r2, [pc, #40]	; (800a620 <check_fs+0xa4>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d101      	bne.n	800a5fe <check_fs+0x82>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	e00c      	b.n	800a618 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	3334      	adds	r3, #52	; 0x34
 800a602:	3352      	adds	r3, #82	; 0x52
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fdd7 	bl	80091b8 <ld_dword>
 800a60a:	4603      	mov	r3, r0
 800a60c:	4a05      	ldr	r2, [pc, #20]	; (800a624 <check_fs+0xa8>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d101      	bne.n	800a616 <check_fs+0x9a>
 800a612:	2300      	movs	r3, #0
 800a614:	e000      	b.n	800a618 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a616:	2302      	movs	r3, #2
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}
 800a620:	00544146 	.word	0x00544146
 800a624:	33544146 	.word	0x33544146

0800a628 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b096      	sub	sp, #88	; 0x58
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	4613      	mov	r3, r2
 800a634:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	2200      	movs	r2, #0
 800a63a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f7ff ff58 	bl	800a4f2 <get_ldnumber>
 800a642:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a646:	2b00      	cmp	r3, #0
 800a648:	da01      	bge.n	800a64e <find_volume+0x26>
 800a64a:	230b      	movs	r3, #11
 800a64c:	e235      	b.n	800aaba <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a64e:	4aa5      	ldr	r2, [pc, #660]	; (800a8e4 <find_volume+0x2bc>)
 800a650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a656:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <find_volume+0x3a>
 800a65e:	230c      	movs	r3, #12
 800a660:	e22b      	b.n	800aaba <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800a662:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a664:	f7fe fe90 	bl	8009388 <lock_fs>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d101      	bne.n	800a672 <find_volume+0x4a>
 800a66e:	230f      	movs	r3, #15
 800a670:	e223      	b.n	800aaba <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a676:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	f023 0301 	bic.w	r3, r3, #1
 800a67e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a682:	781b      	ldrb	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d01a      	beq.n	800a6be <find_volume+0x96>
		stat = disk_status(fs->drv);
 800a688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a68a:	785b      	ldrb	r3, [r3, #1]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fcdd 	bl	800904c <disk_status>
 800a692:	4603      	mov	r3, r0
 800a694:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a69c:	f003 0301 	and.w	r3, r3, #1
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10c      	bne.n	800a6be <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d007      	beq.n	800a6ba <find_volume+0x92>
 800a6aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6ae:	f003 0304 	and.w	r3, r3, #4
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d001      	beq.n	800a6ba <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800a6b6:	230a      	movs	r3, #10
 800a6b8:	e1ff      	b.n	800aaba <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e1fd      	b.n	800aaba <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a6c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c6:	b2da      	uxtb	r2, r3
 800a6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	785b      	ldrb	r3, [r3, #1]
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fcd5 	bl	8009080 <disk_initialize>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a6dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6e0:	f003 0301 	and.w	r3, r3, #1
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d001      	beq.n	800a6ec <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a6e8:	2303      	movs	r3, #3
 800a6ea:	e1e6      	b.n	800aaba <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d007      	beq.n	800a702 <find_volume+0xda>
 800a6f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6f6:	f003 0304 	and.w	r3, r3, #4
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d001      	beq.n	800a702 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800a6fe:	230a      	movs	r3, #10
 800a700:	e1db      	b.n	800aaba <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a702:	2300      	movs	r3, #0
 800a704:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a706:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a70a:	f7ff ff37 	bl	800a57c <check_fs>
 800a70e:	4603      	mov	r3, r0
 800a710:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a718:	2b02      	cmp	r3, #2
 800a71a:	d149      	bne.n	800a7b0 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a71c:	2300      	movs	r3, #0
 800a71e:	643b      	str	r3, [r7, #64]	; 0x40
 800a720:	e01e      	b.n	800a760 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a724:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a730:	4413      	add	r3, r2
 800a732:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a736:	3304      	adds	r3, #4
 800a738:	781b      	ldrb	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d006      	beq.n	800a74c <find_volume+0x124>
 800a73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a740:	3308      	adds	r3, #8
 800a742:	4618      	mov	r0, r3
 800a744:	f7fe fd38 	bl	80091b8 <ld_dword>
 800a748:	4602      	mov	r2, r0
 800a74a:	e000      	b.n	800a74e <find_volume+0x126>
 800a74c:	2200      	movs	r2, #0
 800a74e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	3358      	adds	r3, #88	; 0x58
 800a754:	443b      	add	r3, r7
 800a756:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a75a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75c:	3301      	adds	r3, #1
 800a75e:	643b      	str	r3, [r7, #64]	; 0x40
 800a760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a762:	2b03      	cmp	r3, #3
 800a764:	d9dd      	bls.n	800a722 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a766:	2300      	movs	r3, #0
 800a768:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a76a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d002      	beq.n	800a776 <find_volume+0x14e>
 800a770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a772:	3b01      	subs	r3, #1
 800a774:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	3358      	adds	r3, #88	; 0x58
 800a77c:	443b      	add	r3, r7
 800a77e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a782:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a786:	2b00      	cmp	r3, #0
 800a788:	d005      	beq.n	800a796 <find_volume+0x16e>
 800a78a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a78c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a78e:	f7ff fef5 	bl	800a57c <check_fs>
 800a792:	4603      	mov	r3, r0
 800a794:	e000      	b.n	800a798 <find_volume+0x170>
 800a796:	2303      	movs	r3, #3
 800a798:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a79c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d905      	bls.n	800a7b0 <find_volume+0x188>
 800a7a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a6:	3301      	adds	r3, #1
 800a7a8:	643b      	str	r3, [r7, #64]	; 0x40
 800a7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ac:	2b03      	cmp	r3, #3
 800a7ae:	d9e2      	bls.n	800a776 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a7b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7b4:	2b04      	cmp	r3, #4
 800a7b6:	d101      	bne.n	800a7bc <find_volume+0x194>
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e17e      	b.n	800aaba <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a7bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d901      	bls.n	800a7c8 <find_volume+0x1a0>
 800a7c4:	230d      	movs	r3, #13
 800a7c6:	e178      	b.n	800aaba <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ca:	3334      	adds	r3, #52	; 0x34
 800a7cc:	330b      	adds	r3, #11
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fcda 	bl	8009188 <ld_word>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7da:	d001      	beq.n	800a7e0 <find_volume+0x1b8>
 800a7dc:	230d      	movs	r3, #13
 800a7de:	e16c      	b.n	800aaba <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e2:	3334      	adds	r3, #52	; 0x34
 800a7e4:	3316      	adds	r3, #22
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fe fcce 	bl	8009188 <ld_word>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a7f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <find_volume+0x1dc>
 800a7f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f8:	3334      	adds	r3, #52	; 0x34
 800a7fa:	3324      	adds	r3, #36	; 0x24
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	f7fe fcdb 	bl	80091b8 <ld_dword>
 800a802:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a808:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a812:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a816:	789b      	ldrb	r3, [r3, #2]
 800a818:	2b01      	cmp	r3, #1
 800a81a:	d005      	beq.n	800a828 <find_volume+0x200>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a81e:	789b      	ldrb	r3, [r3, #2]
 800a820:	2b02      	cmp	r3, #2
 800a822:	d001      	beq.n	800a828 <find_volume+0x200>
 800a824:	230d      	movs	r3, #13
 800a826:	e148      	b.n	800aaba <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a82a:	789b      	ldrb	r3, [r3, #2]
 800a82c:	461a      	mov	r2, r3
 800a82e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a830:	fb02 f303 	mul.w	r3, r2, r3
 800a834:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a840:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a844:	895b      	ldrh	r3, [r3, #10]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d008      	beq.n	800a85c <find_volume+0x234>
 800a84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a84c:	895b      	ldrh	r3, [r3, #10]
 800a84e:	461a      	mov	r2, r3
 800a850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a852:	895b      	ldrh	r3, [r3, #10]
 800a854:	3b01      	subs	r3, #1
 800a856:	4013      	ands	r3, r2
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d001      	beq.n	800a860 <find_volume+0x238>
 800a85c:	230d      	movs	r3, #13
 800a85e:	e12c      	b.n	800aaba <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a862:	3334      	adds	r3, #52	; 0x34
 800a864:	3311      	adds	r3, #17
 800a866:	4618      	mov	r0, r3
 800a868:	f7fe fc8e 	bl	8009188 <ld_word>
 800a86c:	4603      	mov	r3, r0
 800a86e:	461a      	mov	r2, r3
 800a870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a872:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a876:	891b      	ldrh	r3, [r3, #8]
 800a878:	f003 030f 	and.w	r3, r3, #15
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <find_volume+0x25e>
 800a882:	230d      	movs	r3, #13
 800a884:	e119      	b.n	800aaba <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a888:	3334      	adds	r3, #52	; 0x34
 800a88a:	3313      	adds	r3, #19
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7fe fc7b 	bl	8009188 <ld_word>
 800a892:	4603      	mov	r3, r0
 800a894:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d106      	bne.n	800a8aa <find_volume+0x282>
 800a89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a89e:	3334      	adds	r3, #52	; 0x34
 800a8a0:	3320      	adds	r3, #32
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f7fe fc88 	bl	80091b8 <ld_dword>
 800a8a8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a8aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8ac:	3334      	adds	r3, #52	; 0x34
 800a8ae:	330e      	adds	r3, #14
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f7fe fc69 	bl	8009188 <ld_word>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a8ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <find_volume+0x29c>
 800a8c0:	230d      	movs	r3, #13
 800a8c2:	e0fa      	b.n	800aaba <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a8c4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a8c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8c8:	4413      	add	r3, r2
 800a8ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8cc:	8912      	ldrh	r2, [r2, #8]
 800a8ce:	0912      	lsrs	r2, r2, #4
 800a8d0:	b292      	uxth	r2, r2
 800a8d2:	4413      	add	r3, r2
 800a8d4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a8d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8da:	429a      	cmp	r2, r3
 800a8dc:	d204      	bcs.n	800a8e8 <find_volume+0x2c0>
 800a8de:	230d      	movs	r3, #13
 800a8e0:	e0eb      	b.n	800aaba <find_volume+0x492>
 800a8e2:	bf00      	nop
 800a8e4:	20000d78 	.word	0x20000d78
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a8e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	1ad3      	subs	r3, r2, r3
 800a8ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f0:	8952      	ldrh	r2, [r2, #10]
 800a8f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <find_volume+0x2da>
 800a8fe:	230d      	movs	r3, #13
 800a900:	e0db      	b.n	800aaba <find_volume+0x492>
		fmt = FS_FAT32;
 800a902:	2303      	movs	r3, #3
 800a904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a90e:	4293      	cmp	r3, r2
 800a910:	d802      	bhi.n	800a918 <find_volume+0x2f0>
 800a912:	2302      	movs	r3, #2
 800a914:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a91e:	4293      	cmp	r3, r2
 800a920:	d802      	bhi.n	800a928 <find_volume+0x300>
 800a922:	2301      	movs	r3, #1
 800a924:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	1c9a      	adds	r2, r3, #2
 800a92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a92e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a932:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a934:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a936:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a93a:	441a      	add	r2, r3
 800a93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a93e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a940:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a944:	441a      	add	r2, r3
 800a946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a948:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a94a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d11e      	bne.n	800a990 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a954:	3334      	adds	r3, #52	; 0x34
 800a956:	332a      	adds	r3, #42	; 0x2a
 800a958:	4618      	mov	r0, r3
 800a95a:	f7fe fc15 	bl	8009188 <ld_word>
 800a95e:	4603      	mov	r3, r0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d001      	beq.n	800a968 <find_volume+0x340>
 800a964:	230d      	movs	r3, #13
 800a966:	e0a8      	b.n	800aaba <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96a:	891b      	ldrh	r3, [r3, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <find_volume+0x34c>
 800a970:	230d      	movs	r3, #13
 800a972:	e0a2      	b.n	800aaba <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a976:	3334      	adds	r3, #52	; 0x34
 800a978:	332c      	adds	r3, #44	; 0x2c
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fe fc1c 	bl	80091b8 <ld_dword>
 800a980:	4602      	mov	r2, r0
 800a982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a984:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	647b      	str	r3, [r7, #68]	; 0x44
 800a98e:	e01f      	b.n	800a9d0 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a992:	891b      	ldrh	r3, [r3, #8]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d101      	bne.n	800a99c <find_volume+0x374>
 800a998:	230d      	movs	r3, #13
 800a99a:	e08e      	b.n	800aaba <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a99e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a2:	441a      	add	r2, r3
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a9a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d103      	bne.n	800a9b8 <find_volume+0x390>
 800a9b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b2:	699b      	ldr	r3, [r3, #24]
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	e00a      	b.n	800a9ce <find_volume+0x3a6>
 800a9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ba:	699a      	ldr	r2, [r3, #24]
 800a9bc:	4613      	mov	r3, r2
 800a9be:	005b      	lsls	r3, r3, #1
 800a9c0:	4413      	add	r3, r2
 800a9c2:	085a      	lsrs	r2, r3, #1
 800a9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	f003 0301 	and.w	r3, r3, #1
 800a9cc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a9ce:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	69da      	ldr	r2, [r3, #28]
 800a9d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800a9da:	0a5b      	lsrs	r3, r3, #9
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d201      	bcs.n	800a9e4 <find_volume+0x3bc>
 800a9e0:	230d      	movs	r3, #13
 800a9e2:	e06a      	b.n	800aaba <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a9e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a9ea:	615a      	str	r2, [r3, #20]
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a9f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9f6:	2280      	movs	r2, #128	; 0x80
 800a9f8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a9fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a9fe:	2b03      	cmp	r3, #3
 800aa00:	d149      	bne.n	800aa96 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800aa02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa04:	3334      	adds	r3, #52	; 0x34
 800aa06:	3330      	adds	r3, #48	; 0x30
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f7fe fbbd 	bl	8009188 <ld_word>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d140      	bne.n	800aa96 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800aa14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa16:	3301      	adds	r3, #1
 800aa18:	4619      	mov	r1, r3
 800aa1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aa1c:	f7fe fe96 	bl	800974c <move_window>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d137      	bne.n	800aa96 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800aa26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa28:	2200      	movs	r2, #0
 800aa2a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800aa2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa2e:	3334      	adds	r3, #52	; 0x34
 800aa30:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800aa34:	4618      	mov	r0, r3
 800aa36:	f7fe fba7 	bl	8009188 <ld_word>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d127      	bne.n	800aa96 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800aa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa48:	3334      	adds	r3, #52	; 0x34
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fbb4 	bl	80091b8 <ld_dword>
 800aa50:	4603      	mov	r3, r0
 800aa52:	4a1c      	ldr	r2, [pc, #112]	; (800aac4 <find_volume+0x49c>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d11e      	bne.n	800aa96 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	3334      	adds	r3, #52	; 0x34
 800aa5c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7fe fba9 	bl	80091b8 <ld_dword>
 800aa66:	4603      	mov	r3, r0
 800aa68:	4a17      	ldr	r2, [pc, #92]	; (800aac8 <find_volume+0x4a0>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d113      	bne.n	800aa96 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	3334      	adds	r3, #52	; 0x34
 800aa72:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7fe fb9e 	bl	80091b8 <ld_dword>
 800aa7c:	4602      	mov	r2, r0
 800aa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa80:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800aa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa84:	3334      	adds	r3, #52	; 0x34
 800aa86:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fb94 	bl	80091b8 <ld_dword>
 800aa90:	4602      	mov	r2, r0
 800aa92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa94:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800aa96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa98:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800aa9c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800aa9e:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <find_volume+0x4a4>)
 800aaa0:	881b      	ldrh	r3, [r3, #0]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	4b09      	ldr	r3, [pc, #36]	; (800aacc <find_volume+0x4a4>)
 800aaa8:	801a      	strh	r2, [r3, #0]
 800aaaa:	4b08      	ldr	r3, [pc, #32]	; (800aacc <find_volume+0x4a4>)
 800aaac:	881a      	ldrh	r2, [r3, #0]
 800aaae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aab0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800aab2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aab4:	f7fe fde2 	bl	800967c <clear_lock>
#endif
	return FR_OK;
 800aab8:	2300      	movs	r3, #0
}
 800aaba:	4618      	mov	r0, r3
 800aabc:	3758      	adds	r7, #88	; 0x58
 800aabe:	46bd      	mov	sp, r7
 800aac0:	bd80      	pop	{r7, pc}
 800aac2:	bf00      	nop
 800aac4:	41615252 	.word	0x41615252
 800aac8:	61417272 	.word	0x61417272
 800aacc:	20000d7c 	.word	0x20000d7c

0800aad0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b084      	sub	sp, #16
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800aada:	2309      	movs	r3, #9
 800aadc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d02e      	beq.n	800ab42 <validate+0x72>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d02a      	beq.n	800ab42 <validate+0x72>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	781b      	ldrb	r3, [r3, #0]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d025      	beq.n	800ab42 <validate+0x72>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	889a      	ldrh	r2, [r3, #4]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	88db      	ldrh	r3, [r3, #6]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d11e      	bne.n	800ab42 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7fe fc3d 	bl	8009388 <lock_fs>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d014      	beq.n	800ab3e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	785b      	ldrb	r3, [r3, #1]
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	f7fe fa96 	bl	800904c <disk_status>
 800ab20:	4603      	mov	r3, r0
 800ab22:	f003 0301 	and.w	r3, r3, #1
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d102      	bne.n	800ab30 <validate+0x60>
				res = FR_OK;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	73fb      	strb	r3, [r7, #15]
 800ab2e:	e008      	b.n	800ab42 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2100      	movs	r1, #0
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fc3c 	bl	80093b4 <unlock_fs>
 800ab3c:	e001      	b.n	800ab42 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800ab3e:	230f      	movs	r3, #15
 800ab40:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d102      	bne.n	800ab4e <validate+0x7e>
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	e000      	b.n	800ab50 <validate+0x80>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	683a      	ldr	r2, [r7, #0]
 800ab52:	6013      	str	r3, [r2, #0]
	return res;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
	...

0800ab60 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b088      	sub	sp, #32
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	4613      	mov	r3, r2
 800ab6c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ab72:	f107 0310 	add.w	r3, r7, #16
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7ff fcbb 	bl	800a4f2 <get_ldnumber>
 800ab7c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	da01      	bge.n	800ab88 <f_mount+0x28>
 800ab84:	230b      	movs	r3, #11
 800ab86:	e048      	b.n	800ac1a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ab88:	4a26      	ldr	r2, [pc, #152]	; (800ac24 <f_mount+0xc4>)
 800ab8a:	69fb      	ldr	r3, [r7, #28]
 800ab8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab90:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ab92:	69bb      	ldr	r3, [r7, #24]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d00f      	beq.n	800abb8 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ab98:	69b8      	ldr	r0, [r7, #24]
 800ab9a:	f7fe fd6f 	bl	800967c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800ab9e:	69bb      	ldr	r3, [r7, #24]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 fce3 	bl	800b56e <ff_del_syncobj>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d101      	bne.n	800abb2 <f_mount+0x52>
 800abae:	2302      	movs	r3, #2
 800abb0:	e033      	b.n	800ac1a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800abb2:	69bb      	ldr	r3, [r7, #24]
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00f      	beq.n	800abde <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	330c      	adds	r3, #12
 800abcc:	4619      	mov	r1, r3
 800abce:	4610      	mov	r0, r2
 800abd0:	f000 fcad 	bl	800b52e <ff_cre_syncobj>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <f_mount+0x7e>
 800abda:	2302      	movs	r3, #2
 800abdc:	e01d      	b.n	800ac1a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800abde:	68fa      	ldr	r2, [r7, #12]
 800abe0:	4910      	ldr	r1, [pc, #64]	; (800ac24 <f_mount+0xc4>)
 800abe2:	69fb      	ldr	r3, [r7, #28]
 800abe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d002      	beq.n	800abf4 <f_mount+0x94>
 800abee:	79fb      	ldrb	r3, [r7, #7]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d001      	beq.n	800abf8 <f_mount+0x98>
 800abf4:	2300      	movs	r3, #0
 800abf6:	e010      	b.n	800ac1a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800abf8:	f107 010c 	add.w	r1, r7, #12
 800abfc:	f107 0308 	add.w	r3, r7, #8
 800ac00:	2200      	movs	r2, #0
 800ac02:	4618      	mov	r0, r3
 800ac04:	f7ff fd10 	bl	800a628 <find_volume>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	7dfa      	ldrb	r2, [r7, #23]
 800ac10:	4611      	mov	r1, r2
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fbce 	bl	80093b4 <unlock_fs>
 800ac18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3720      	adds	r7, #32
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	bd80      	pop	{r7, pc}
 800ac22:	bf00      	nop
 800ac24:	20000d78 	.word	0x20000d78

0800ac28 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b098      	sub	sp, #96	; 0x60
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	60f8      	str	r0, [r7, #12]
 800ac30:	60b9      	str	r1, [r7, #8]
 800ac32:	4613      	mov	r3, r2
 800ac34:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <f_open+0x18>
 800ac3c:	2309      	movs	r3, #9
 800ac3e:	e1b4      	b.n	800afaa <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac46:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800ac48:	79fa      	ldrb	r2, [r7, #7]
 800ac4a:	f107 0110 	add.w	r1, r7, #16
 800ac4e:	f107 0308 	add.w	r3, r7, #8
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7ff fce8 	bl	800a628 <find_volume>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800ac5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	f040 8191 	bne.w	800af8a <f_open+0x362>
		dj.obj.fs = fs;
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	f107 0314 	add.w	r3, r7, #20
 800ac72:	4611      	mov	r1, r2
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff fbcb 	bl	800a410 <follow_path>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800ac80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d11a      	bne.n	800acbe <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800ac88:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ac8c:	b25b      	sxtb	r3, r3
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	da03      	bge.n	800ac9a <f_open+0x72>
				res = FR_INVALID_NAME;
 800ac92:	2306      	movs	r3, #6
 800ac94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ac98:	e011      	b.n	800acbe <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ac9a:	79fb      	ldrb	r3, [r7, #7]
 800ac9c:	f023 0301 	bic.w	r3, r3, #1
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	bf14      	ite	ne
 800aca4:	2301      	movne	r3, #1
 800aca6:	2300      	moveq	r3, #0
 800aca8:	b2db      	uxtb	r3, r3
 800acaa:	461a      	mov	r2, r3
 800acac:	f107 0314 	add.w	r3, r7, #20
 800acb0:	4611      	mov	r1, r2
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fe fb9a 	bl	80093ec <chk_lock>
 800acb8:	4603      	mov	r3, r0
 800acba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	f003 031c 	and.w	r3, r3, #28
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d07f      	beq.n	800adc8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800acc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800accc:	2b00      	cmp	r3, #0
 800acce:	d017      	beq.n	800ad00 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800acd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800acd4:	2b04      	cmp	r3, #4
 800acd6:	d10e      	bne.n	800acf6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800acd8:	f7fe fbe4 	bl	80094a4 <enq_lock>
 800acdc:	4603      	mov	r3, r0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d006      	beq.n	800acf0 <f_open+0xc8>
 800ace2:	f107 0314 	add.w	r3, r7, #20
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7ff facb 	bl	800a282 <dir_register>
 800acec:	4603      	mov	r3, r0
 800acee:	e000      	b.n	800acf2 <f_open+0xca>
 800acf0:	2312      	movs	r3, #18
 800acf2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	f043 0308 	orr.w	r3, r3, #8
 800acfc:	71fb      	strb	r3, [r7, #7]
 800acfe:	e010      	b.n	800ad22 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800ad00:	7ebb      	ldrb	r3, [r7, #26]
 800ad02:	f003 0311 	and.w	r3, r3, #17
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <f_open+0xea>
					res = FR_DENIED;
 800ad0a:	2307      	movs	r3, #7
 800ad0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ad10:	e007      	b.n	800ad22 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	f003 0304 	and.w	r3, r3, #4
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <f_open+0xfa>
 800ad1c:	2308      	movs	r3, #8
 800ad1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800ad22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d168      	bne.n	800adfc <f_open+0x1d4>
 800ad2a:	79fb      	ldrb	r3, [r7, #7]
 800ad2c:	f003 0308 	and.w	r3, r3, #8
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d063      	beq.n	800adfc <f_open+0x1d4>
				dw = GET_FATTIME();
 800ad34:	f7fe f92c 	bl	8008f90 <get_fattime>
 800ad38:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3c:	330e      	adds	r3, #14
 800ad3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fe fa77 	bl	8009234 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ad46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad48:	3316      	adds	r3, #22
 800ad4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7fe fa71 	bl	8009234 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ad52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad54:	330b      	adds	r3, #11
 800ad56:	2220      	movs	r2, #32
 800ad58:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad5e:	4611      	mov	r1, r2
 800ad60:	4618      	mov	r0, r3
 800ad62:	f7ff f9fa 	bl	800a15a <ld_clust>
 800ad66:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f7ff fa12 	bl	800a198 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ad74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad76:	331c      	adds	r3, #28
 800ad78:	2100      	movs	r1, #0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fa5a 	bl	8009234 <st_dword>
					fs->wflag = 1;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2201      	movs	r2, #1
 800ad84:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ad86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d037      	beq.n	800adfc <f_open+0x1d4>
						dw = fs->winsect;
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad90:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ad92:	f107 0314 	add.w	r3, r7, #20
 800ad96:	2200      	movs	r2, #0
 800ad98:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7fe ff25 	bl	8009bea <remove_chain>
 800ada0:	4603      	mov	r3, r0
 800ada2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800ada6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d126      	bne.n	800adfc <f_open+0x1d4>
							res = move_window(fs, dw);
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800adb2:	4618      	mov	r0, r3
 800adb4:	f7fe fcca 	bl	800974c <move_window>
 800adb8:	4603      	mov	r3, r0
 800adba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800adbe:	693b      	ldr	r3, [r7, #16]
 800adc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800adc2:	3a01      	subs	r2, #1
 800adc4:	611a      	str	r2, [r3, #16]
 800adc6:	e019      	b.n	800adfc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800adc8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d115      	bne.n	800adfc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800add0:	7ebb      	ldrb	r3, [r7, #26]
 800add2:	f003 0310 	and.w	r3, r3, #16
 800add6:	2b00      	cmp	r3, #0
 800add8:	d003      	beq.n	800ade2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800adda:	2304      	movs	r3, #4
 800addc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800ade0:	e00c      	b.n	800adfc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	f003 0302 	and.w	r3, r3, #2
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d007      	beq.n	800adfc <f_open+0x1d4>
 800adec:	7ebb      	ldrb	r3, [r7, #26]
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d002      	beq.n	800adfc <f_open+0x1d4>
						res = FR_DENIED;
 800adf6:	2307      	movs	r3, #7
 800adf8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800adfc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d128      	bne.n	800ae56 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	f003 0308 	and.w	r3, r3, #8
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d003      	beq.n	800ae16 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800ae0e:	79fb      	ldrb	r3, [r7, #7]
 800ae10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae14:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800ae1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	f023 0301 	bic.w	r3, r3, #1
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	bf14      	ite	ne
 800ae2e:	2301      	movne	r3, #1
 800ae30:	2300      	moveq	r3, #0
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	461a      	mov	r2, r3
 800ae36:	f107 0314 	add.w	r3, r7, #20
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe fb53 	bl	80094e8 <inc_lock>
 800ae42:	4602      	mov	r2, r0
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	691b      	ldr	r3, [r3, #16]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <f_open+0x22e>
 800ae50:	2302      	movs	r3, #2
 800ae52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800ae56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	f040 8095 	bne.w	800af8a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae64:	4611      	mov	r1, r2
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff f977 	bl	800a15a <ld_clust>
 800ae6c:	4602      	mov	r2, r0
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800ae72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae74:	331c      	adds	r3, #28
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7fe f99e 	bl	80091b8 <ld_dword>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	2200      	movs	r2, #0
 800ae86:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ae88:	693a      	ldr	r2, [r7, #16]
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	88da      	ldrh	r2, [r3, #6]
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	79fa      	ldrb	r2, [r7, #7]
 800ae9a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	3330      	adds	r3, #48	; 0x30
 800aeb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f7fe fa08 	bl	80092ce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	f003 0320 	and.w	r3, r3, #32
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d060      	beq.n	800af8a <f_open+0x362>
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d05c      	beq.n	800af8a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	68da      	ldr	r2, [r3, #12]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	895b      	ldrh	r3, [r3, #10]
 800aedc:	025b      	lsls	r3, r3, #9
 800aede:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	657b      	str	r3, [r7, #84]	; 0x54
 800aeec:	e016      	b.n	800af1c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe fce5 	bl	80098c2 <get_fat>
 800aef8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aefa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d802      	bhi.n	800af06 <f_open+0x2de>
 800af00:	2302      	movs	r3, #2
 800af02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800af06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d102      	bne.n	800af14 <f_open+0x2ec>
 800af0e:	2301      	movs	r3, #1
 800af10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800af14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af18:	1ad3      	subs	r3, r2, r3
 800af1a:	657b      	str	r3, [r7, #84]	; 0x54
 800af1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af20:	2b00      	cmp	r3, #0
 800af22:	d103      	bne.n	800af2c <f_open+0x304>
 800af24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af28:	429a      	cmp	r2, r3
 800af2a:	d8e0      	bhi.n	800aeee <f_open+0x2c6>
				}
				fp->clust = clst;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800af30:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800af32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af36:	2b00      	cmp	r3, #0
 800af38:	d127      	bne.n	800af8a <f_open+0x362>
 800af3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af40:	2b00      	cmp	r3, #0
 800af42:	d022      	beq.n	800af8a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800af44:	693b      	ldr	r3, [r7, #16]
 800af46:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe fc9b 	bl	8009884 <clust2sect>
 800af4e:	6478      	str	r0, [r7, #68]	; 0x44
 800af50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af52:	2b00      	cmp	r3, #0
 800af54:	d103      	bne.n	800af5e <f_open+0x336>
						res = FR_INT_ERR;
 800af56:	2302      	movs	r3, #2
 800af58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800af5c:	e015      	b.n	800af8a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800af5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af60:	0a5a      	lsrs	r2, r3, #9
 800af62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af64:	441a      	add	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	7858      	ldrb	r0, [r3, #1]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6a1a      	ldr	r2, [r3, #32]
 800af78:	2301      	movs	r3, #1
 800af7a:	f7fe f8a7 	bl	80090cc <disk_read>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <f_open+0x362>
 800af84:	2301      	movs	r3, #1
 800af86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800af8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <f_open+0x370>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800af9e:	4611      	mov	r1, r2
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fe fa07 	bl	80093b4 <unlock_fs>
 800afa6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3760      	adds	r7, #96	; 0x60
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b08e      	sub	sp, #56	; 0x38
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	60f8      	str	r0, [r7, #12]
 800afba:	60b9      	str	r1, [r7, #8]
 800afbc:	607a      	str	r2, [r7, #4]
 800afbe:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	f107 0214 	add.w	r2, r7, #20
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7ff fd7c 	bl	800aad0 <validate>
 800afd8:	4603      	mov	r3, r0
 800afda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800afde:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d107      	bne.n	800aff6 <f_read+0x44>
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	7d5b      	ldrb	r3, [r3, #21]
 800afea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800afee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d009      	beq.n	800b00a <f_read+0x58>
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800affc:	4611      	mov	r1, r2
 800affe:	4618      	mov	r0, r3
 800b000:	f7fe f9d8 	bl	80093b4 <unlock_fs>
 800b004:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b008:	e13d      	b.n	800b286 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	7d1b      	ldrb	r3, [r3, #20]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <f_read+0x72>
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2107      	movs	r1, #7
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe f9ca 	bl	80093b4 <unlock_fs>
 800b020:	2307      	movs	r3, #7
 800b022:	e130      	b.n	800b286 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	6a3b      	ldr	r3, [r7, #32]
 800b034:	429a      	cmp	r2, r3
 800b036:	f240 811c 	bls.w	800b272 <f_read+0x2c0>
 800b03a:	6a3b      	ldr	r3, [r7, #32]
 800b03c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800b03e:	e118      	b.n	800b272 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b048:	2b00      	cmp	r3, #0
 800b04a:	f040 80e4 	bne.w	800b216 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	699b      	ldr	r3, [r3, #24]
 800b052:	0a5b      	lsrs	r3, r3, #9
 800b054:	697a      	ldr	r2, [r7, #20]
 800b056:	8952      	ldrh	r2, [r2, #10]
 800b058:	3a01      	subs	r2, #1
 800b05a:	4013      	ands	r3, r2
 800b05c:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d139      	bne.n	800b0d8 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d103      	bne.n	800b074 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	689b      	ldr	r3, [r3, #8]
 800b070:	633b      	str	r3, [r7, #48]	; 0x30
 800b072:	e013      	b.n	800b09c <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d007      	beq.n	800b08c <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	699b      	ldr	r3, [r3, #24]
 800b080:	4619      	mov	r1, r3
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f7fe feae 	bl	8009de4 <clmt_clust>
 800b088:	6338      	str	r0, [r7, #48]	; 0x30
 800b08a:	e007      	b.n	800b09c <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800b08c:	68fa      	ldr	r2, [r7, #12]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	69db      	ldr	r3, [r3, #28]
 800b092:	4619      	mov	r1, r3
 800b094:	4610      	mov	r0, r2
 800b096:	f7fe fc14 	bl	80098c2 <get_fat>
 800b09a:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	2b01      	cmp	r3, #1
 800b0a0:	d809      	bhi.n	800b0b6 <f_read+0x104>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2202      	movs	r2, #2
 800b0a6:	755a      	strb	r2, [r3, #21]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	2102      	movs	r1, #2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7fe f981 	bl	80093b4 <unlock_fs>
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	e0e7      	b.n	800b286 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800b0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0bc:	d109      	bne.n	800b0d2 <f_read+0x120>
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	755a      	strb	r2, [r3, #21]
 800b0c4:	697b      	ldr	r3, [r7, #20]
 800b0c6:	2101      	movs	r1, #1
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f7fe f973 	bl	80093b4 <unlock_fs>
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e0d9      	b.n	800b286 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0d6:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800b0d8:	697a      	ldr	r2, [r7, #20]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	4619      	mov	r1, r3
 800b0e0:	4610      	mov	r0, r2
 800b0e2:	f7fe fbcf 	bl	8009884 <clust2sect>
 800b0e6:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d109      	bne.n	800b102 <f_read+0x150>
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	755a      	strb	r2, [r3, #21]
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	2102      	movs	r1, #2
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f7fe f95b 	bl	80093b4 <unlock_fs>
 800b0fe:	2302      	movs	r3, #2
 800b100:	e0c1      	b.n	800b286 <f_read+0x2d4>
			sect += csect;
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	69fb      	ldr	r3, [r7, #28]
 800b106:	4413      	add	r3, r2
 800b108:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	0a5b      	lsrs	r3, r3, #9
 800b10e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800b110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b112:	2b00      	cmp	r3, #0
 800b114:	d03e      	beq.n	800b194 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800b116:	69fa      	ldr	r2, [r7, #28]
 800b118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b11a:	4413      	add	r3, r2
 800b11c:	697a      	ldr	r2, [r7, #20]
 800b11e:	8952      	ldrh	r2, [r2, #10]
 800b120:	4293      	cmp	r3, r2
 800b122:	d905      	bls.n	800b130 <f_read+0x17e>
					cc = fs->csize - csect;
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	895b      	ldrh	r3, [r3, #10]
 800b128:	461a      	mov	r2, r3
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	7858      	ldrb	r0, [r3, #1]
 800b134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b136:	69ba      	ldr	r2, [r7, #24]
 800b138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b13a:	f7fd ffc7 	bl	80090cc <disk_read>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d009      	beq.n	800b158 <f_read+0x1a6>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2201      	movs	r2, #1
 800b148:	755a      	strb	r2, [r3, #21]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	2101      	movs	r1, #1
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe f930 	bl	80093b4 <unlock_fs>
 800b154:	2301      	movs	r3, #1
 800b156:	e096      	b.n	800b286 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	7d1b      	ldrb	r3, [r3, #20]
 800b15c:	b25b      	sxtb	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	da14      	bge.n	800b18c <f_read+0x1da>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6a1a      	ldr	r2, [r3, #32]
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d90d      	bls.n	800b18c <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6a1a      	ldr	r2, [r3, #32]
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	025b      	lsls	r3, r3, #9
 800b17a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b17c:	18d0      	adds	r0, r2, r3
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	3330      	adds	r3, #48	; 0x30
 800b182:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b186:	4619      	mov	r1, r3
 800b188:	f7fe f880 	bl	800928c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800b18c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b18e:	025b      	lsls	r3, r3, #9
 800b190:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800b192:	e05a      	b.n	800b24a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6a1b      	ldr	r3, [r3, #32]
 800b198:	69ba      	ldr	r2, [r7, #24]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d038      	beq.n	800b210 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	7d1b      	ldrb	r3, [r3, #20]
 800b1a2:	b25b      	sxtb	r3, r3
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	da1d      	bge.n	800b1e4 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	7858      	ldrb	r0, [r3, #1]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6a1a      	ldr	r2, [r3, #32]
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f7fd ffa8 	bl	800910c <disk_write>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <f_read+0x224>
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2201      	movs	r2, #1
 800b1c6:	755a      	strb	r2, [r3, #21]
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	2101      	movs	r1, #1
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fe f8f1 	bl	80093b4 <unlock_fs>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e057      	b.n	800b286 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	7d1b      	ldrb	r3, [r3, #20]
 800b1da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800b1e4:	697b      	ldr	r3, [r7, #20]
 800b1e6:	7858      	ldrb	r0, [r3, #1]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1ee:	2301      	movs	r3, #1
 800b1f0:	69ba      	ldr	r2, [r7, #24]
 800b1f2:	f7fd ff6b 	bl	80090cc <disk_read>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d009      	beq.n	800b210 <f_read+0x25e>
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2201      	movs	r2, #1
 800b200:	755a      	strb	r2, [r3, #21]
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2101      	movs	r1, #1
 800b206:	4618      	mov	r0, r3
 800b208:	f7fe f8d4 	bl	80093b4 <unlock_fs>
 800b20c:	2301      	movs	r3, #1
 800b20e:	e03a      	b.n	800b286 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	69ba      	ldr	r2, [r7, #24]
 800b214:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	699b      	ldr	r3, [r3, #24]
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b222:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800b224:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	429a      	cmp	r2, r3
 800b22a:	d901      	bls.n	800b230 <f_read+0x27e>
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	699b      	ldr	r3, [r3, #24]
 800b23a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b23e:	4413      	add	r3, r2
 800b240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b242:	4619      	mov	r1, r3
 800b244:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b246:	f7fe f821 	bl	800928c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800b24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24e:	4413      	add	r3, r2
 800b250:	627b      	str	r3, [r7, #36]	; 0x24
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	441a      	add	r2, r3
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	619a      	str	r2, [r3, #24]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b264:	441a      	add	r2, r3
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	1ad3      	subs	r3, r2, r3
 800b270:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f47f aee3 	bne.w	800b040 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2100      	movs	r1, #0
 800b27e:	4618      	mov	r0, r3
 800b280:	f7fe f898 	bl	80093b4 <unlock_fs>
 800b284:	2300      	movs	r3, #0
}
 800b286:	4618      	mov	r0, r3
 800b288:	3738      	adds	r7, #56	; 0x38
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800b28e:	b580      	push	{r7, lr}
 800b290:	b086      	sub	sp, #24
 800b292:	af00      	add	r7, sp, #0
 800b294:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f107 0208 	add.w	r2, r7, #8
 800b29c:	4611      	mov	r1, r2
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff fc16 	bl	800aad0 <validate>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d16d      	bne.n	800b38a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	7d1b      	ldrb	r3, [r3, #20]
 800b2b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d067      	beq.n	800b38a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	7d1b      	ldrb	r3, [r3, #20]
 800b2be:	b25b      	sxtb	r3, r3
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	da1a      	bge.n	800b2fa <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	7858      	ldrb	r0, [r3, #1]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6a1a      	ldr	r2, [r3, #32]
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	f7fd ff1a 	bl	800910c <disk_write>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d006      	beq.n	800b2ec <f_sync+0x5e>
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2101      	movs	r1, #1
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7fe f866 	bl	80093b4 <unlock_fs>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	e055      	b.n	800b398 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	7d1b      	ldrb	r3, [r3, #20]
 800b2f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800b2fa:	f7fd fe49 	bl	8008f90 <get_fattime>
 800b2fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800b300:	68ba      	ldr	r2, [r7, #8]
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b306:	4619      	mov	r1, r3
 800b308:	4610      	mov	r0, r2
 800b30a:	f7fe fa1f 	bl	800974c <move_window>
 800b30e:	4603      	mov	r3, r0
 800b310:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800b312:	7dfb      	ldrb	r3, [r7, #23]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d138      	bne.n	800b38a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b31c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	330b      	adds	r3, #11
 800b322:	781a      	ldrb	r2, [r3, #0]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	330b      	adds	r3, #11
 800b328:	f042 0220 	orr.w	r2, r2, #32
 800b32c:	b2d2      	uxtb	r2, r2
 800b32e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	6818      	ldr	r0, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	461a      	mov	r2, r3
 800b33a:	68f9      	ldr	r1, [r7, #12]
 800b33c:	f7fe ff2c 	bl	800a198 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f103 021c 	add.w	r2, r3, #28
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	4619      	mov	r1, r3
 800b34c:	4610      	mov	r0, r2
 800b34e:	f7fd ff71 	bl	8009234 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	3316      	adds	r3, #22
 800b356:	6939      	ldr	r1, [r7, #16]
 800b358:	4618      	mov	r0, r3
 800b35a:	f7fd ff6b 	bl	8009234 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	3312      	adds	r3, #18
 800b362:	2100      	movs	r1, #0
 800b364:	4618      	mov	r0, r3
 800b366:	f7fd ff4a 	bl	80091fe <st_word>
					fs->wflag = 1;
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	2201      	movs	r2, #1
 800b36e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	4618      	mov	r0, r3
 800b374:	f7fe fa18 	bl	80097a8 <sync_fs>
 800b378:	4603      	mov	r3, r0
 800b37a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	7d1b      	ldrb	r3, [r3, #20]
 800b380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b384:	b2da      	uxtb	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	7dfa      	ldrb	r2, [r7, #23]
 800b38e:	4611      	mov	r1, r2
 800b390:	4618      	mov	r0, r3
 800b392:	f7fe f80f 	bl	80093b4 <unlock_fs>
 800b396:	7dfb      	ldrb	r3, [r7, #23]
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3718      	adds	r7, #24
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b084      	sub	sp, #16
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f7ff ff70 	bl	800b28e <f_sync>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d11d      	bne.n	800b3f4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f107 0208 	add.w	r2, r7, #8
 800b3be:	4611      	mov	r1, r2
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff fb85 	bl	800aad0 <validate>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d111      	bne.n	800b3f4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f7fe f915 	bl	8009604 <dec_lock>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d102      	bne.n	800b3ea <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f7fd ffe0 	bl	80093b4 <unlock_fs>
#endif
		}
	}
	return res;
 800b3f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b088      	sub	sp, #32
 800b402:	af00      	add	r7, sp, #0
 800b404:	60f8      	str	r0, [r7, #12]
 800b406:	60b9      	str	r1, [r7, #8]
 800b408:	607a      	str	r2, [r7, #4]
	int n = 0;
 800b40a:	2300      	movs	r3, #0
 800b40c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b412:	e01b      	b.n	800b44c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800b414:	f107 0310 	add.w	r3, r7, #16
 800b418:	f107 0114 	add.w	r1, r7, #20
 800b41c:	2201      	movs	r2, #1
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f7ff fdc7 	bl	800afb2 <f_read>
		if (rc != 1) break;
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	2b01      	cmp	r3, #1
 800b428:	d116      	bne.n	800b458 <f_gets+0x5a>
		c = s[0];
 800b42a:	7d3b      	ldrb	r3, [r7, #20]
 800b42c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 800b42e:	7dfb      	ldrb	r3, [r7, #23]
 800b430:	2b0d      	cmp	r3, #13
 800b432:	d100      	bne.n	800b436 <f_gets+0x38>
 800b434:	e00a      	b.n	800b44c <f_gets+0x4e>
		*p++ = c;
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	61ba      	str	r2, [r7, #24]
 800b43c:	7dfa      	ldrb	r2, [r7, #23]
 800b43e:	701a      	strb	r2, [r3, #0]
		n++;
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	3301      	adds	r3, #1
 800b444:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800b446:	7dfb      	ldrb	r3, [r7, #23]
 800b448:	2b0a      	cmp	r3, #10
 800b44a:	d007      	beq.n	800b45c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	3b01      	subs	r3, #1
 800b450:	69fa      	ldr	r2, [r7, #28]
 800b452:	429a      	cmp	r2, r3
 800b454:	dbde      	blt.n	800b414 <f_gets+0x16>
 800b456:	e002      	b.n	800b45e <f_gets+0x60>
		if (rc != 1) break;
 800b458:	bf00      	nop
 800b45a:	e000      	b.n	800b45e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 800b45c:	bf00      	nop
	}
	*p = 0;
 800b45e:	69bb      	ldr	r3, [r7, #24]
 800b460:	2200      	movs	r2, #0
 800b462:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d001      	beq.n	800b46e <f_gets+0x70>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	e000      	b.n	800b470 <f_gets+0x72>
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3720      	adds	r7, #32
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b478:	b480      	push	{r7}
 800b47a:	b087      	sub	sp, #28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	4613      	mov	r3, r2
 800b484:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b486:	2301      	movs	r3, #1
 800b488:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b48a:	2300      	movs	r3, #0
 800b48c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b48e:	4b1f      	ldr	r3, [pc, #124]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b490:	7a5b      	ldrb	r3, [r3, #9]
 800b492:	b2db      	uxtb	r3, r3
 800b494:	2b00      	cmp	r3, #0
 800b496:	d131      	bne.n	800b4fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b498:	4b1c      	ldr	r3, [pc, #112]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b49a:	7a5b      	ldrb	r3, [r3, #9]
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	461a      	mov	r2, r3
 800b4a0:	4b1a      	ldr	r3, [pc, #104]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4a2:	2100      	movs	r1, #0
 800b4a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b4a6:	4b19      	ldr	r3, [pc, #100]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4a8:	7a5b      	ldrb	r3, [r3, #9]
 800b4aa:	b2db      	uxtb	r3, r3
 800b4ac:	4a17      	ldr	r2, [pc, #92]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b4b6:	4b15      	ldr	r3, [pc, #84]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4b8:	7a5b      	ldrb	r3, [r3, #9]
 800b4ba:	b2db      	uxtb	r3, r3
 800b4bc:	461a      	mov	r2, r3
 800b4be:	4b13      	ldr	r3, [pc, #76]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4c0:	4413      	add	r3, r2
 800b4c2:	79fa      	ldrb	r2, [r7, #7]
 800b4c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b4c6:	4b11      	ldr	r3, [pc, #68]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4c8:	7a5b      	ldrb	r3, [r3, #9]
 800b4ca:	b2db      	uxtb	r3, r3
 800b4cc:	1c5a      	adds	r2, r3, #1
 800b4ce:	b2d1      	uxtb	r1, r2
 800b4d0:	4a0e      	ldr	r2, [pc, #56]	; (800b50c <FATFS_LinkDriverEx+0x94>)
 800b4d2:	7251      	strb	r1, [r2, #9]
 800b4d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b4d6:	7dbb      	ldrb	r3, [r7, #22]
 800b4d8:	3330      	adds	r3, #48	; 0x30
 800b4da:	b2da      	uxtb	r2, r3
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	3301      	adds	r3, #1
 800b4e4:	223a      	movs	r2, #58	; 0x3a
 800b4e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	3302      	adds	r3, #2
 800b4ec:	222f      	movs	r2, #47	; 0x2f
 800b4ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	3303      	adds	r3, #3
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b4fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	371c      	adds	r7, #28
 800b502:	46bd      	mov	sp, r7
 800b504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop
 800b50c:	20000da0 	.word	0x20000da0

0800b510 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b082      	sub	sp, #8
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b51a:	2200      	movs	r2, #0
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f7ff ffaa 	bl	800b478 <FATFS_LinkDriverEx>
 800b524:	4603      	mov	r3, r0
}
 800b526:	4618      	mov	r0, r3
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b086      	sub	sp, #24
 800b532:	af00      	add	r7, sp, #0
 800b534:	4603      	mov	r3, r0
 800b536:	6039      	str	r1, [r7, #0]
 800b538:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800b53a:	2300      	movs	r3, #0
 800b53c:	60fb      	str	r3, [r7, #12]
 800b53e:	2300      	movs	r3, #0
 800b540:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800b542:	f107 030c 	add.w	r3, r7, #12
 800b546:	2101      	movs	r1, #1
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 f8cd 	bl	800b6e8 <osSemaphoreCreate>
 800b54e:	4602      	mov	r2, r0
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bf14      	ite	ne
 800b55c:	2301      	movne	r3, #1
 800b55e:	2300      	moveq	r3, #0
 800b560:	b2db      	uxtb	r3, r3
 800b562:	617b      	str	r3, [r7, #20]

    return ret;
 800b564:	697b      	ldr	r3, [r7, #20]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3718      	adds	r7, #24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f96c 	bl	800b854 <osSemaphoreDelete>
#endif
    return 1;
 800b57c:	2301      	movs	r3, #1
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3708      	adds	r7, #8
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800b586:	b580      	push	{r7, lr}
 800b588:	b084      	sub	sp, #16
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800b58e:	2300      	movs	r3, #0
 800b590:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800b592:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f000 f8d8 	bl	800b74c <osSemaphoreWait>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3710      	adds	r7, #16
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	bd80      	pop	{r7, pc}

0800b5b0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f915 	bl	800b7e8 <osSemaphoreRelease>
#endif
}
 800b5be:	bf00      	nop
 800b5c0:	3708      	adds	r7, #8
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b085      	sub	sp, #20
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5d8:	2b84      	cmp	r3, #132	; 0x84
 800b5da:	d005      	beq.n	800b5e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	3303      	adds	r3, #3
 800b5e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3714      	adds	r7, #20
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5fc:	f3ef 8305 	mrs	r3, IPSR
 800b600:	607b      	str	r3, [r7, #4]
  return(result);
 800b602:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b604:	2b00      	cmp	r3, #0
 800b606:	bf14      	ite	ne
 800b608:	2301      	movne	r3, #1
 800b60a:	2300      	moveq	r3, #0
 800b60c:	b2db      	uxtb	r3, r3
}
 800b60e:	4618      	mov	r0, r3
 800b610:	370c      	adds	r7, #12
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b61e:	f001 f987 	bl	800c930 <vTaskStartScheduler>
  
  return osOK;
 800b622:	2300      	movs	r3, #0
}
 800b624:	4618      	mov	r0, r3
 800b626:	bd80      	pop	{r7, pc}

0800b628 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62a:	b089      	sub	sp, #36	; 0x24
 800b62c:	af04      	add	r7, sp, #16
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	695b      	ldr	r3, [r3, #20]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d020      	beq.n	800b67c <osThreadCreate+0x54>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d01c      	beq.n	800b67c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	685c      	ldr	r4, [r3, #4]
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681d      	ldr	r5, [r3, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	691e      	ldr	r6, [r3, #16]
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff ffb6 	bl	800b5c6 <makeFreeRtosPriority>
 800b65a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b664:	9202      	str	r2, [sp, #8]
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	9100      	str	r1, [sp, #0]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	4632      	mov	r2, r6
 800b66e:	4629      	mov	r1, r5
 800b670:	4620      	mov	r0, r4
 800b672:	f000 ff7f 	bl	800c574 <xTaskCreateStatic>
 800b676:	4603      	mov	r3, r0
 800b678:	60fb      	str	r3, [r7, #12]
 800b67a:	e01c      	b.n	800b6b6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	685c      	ldr	r4, [r3, #4]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b688:	b29e      	uxth	r6, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b690:	4618      	mov	r0, r3
 800b692:	f7ff ff98 	bl	800b5c6 <makeFreeRtosPriority>
 800b696:	4602      	mov	r2, r0
 800b698:	f107 030c 	add.w	r3, r7, #12
 800b69c:	9301      	str	r3, [sp, #4]
 800b69e:	9200      	str	r2, [sp, #0]
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	4632      	mov	r2, r6
 800b6a4:	4629      	mov	r1, r5
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f000 ffc1 	bl	800c62e <xTaskCreate>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	d001      	beq.n	800b6b6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e000      	b.n	800b6b8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <osDelay+0x16>
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	e000      	b.n	800b6d8 <osDelay+0x18>
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f001 f8f5 	bl	800c8c8 <vTaskDelay>
  
  return osOK;
 800b6de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af02      	add	r7, sp, #8
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d00f      	beq.n	800b71a <osSemaphoreCreate+0x32>
    if (count == 1) {
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	d10a      	bne.n	800b716 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	2203      	movs	r2, #3
 800b706:	9200      	str	r2, [sp, #0]
 800b708:	2200      	movs	r2, #0
 800b70a:	2100      	movs	r1, #0
 800b70c:	2001      	movs	r0, #1
 800b70e:	f000 f9d1 	bl	800bab4 <xQueueGenericCreateStatic>
 800b712:	4603      	mov	r3, r0
 800b714:	e016      	b.n	800b744 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	e014      	b.n	800b744 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d110      	bne.n	800b742 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800b720:	2203      	movs	r2, #3
 800b722:	2100      	movs	r1, #0
 800b724:	2001      	movs	r0, #1
 800b726:	f000 fa3d 	bl	800bba4 <xQueueGenericCreate>
 800b72a:	60f8      	str	r0, [r7, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d005      	beq.n	800b73e <osSemaphoreCreate+0x56>
 800b732:	2300      	movs	r3, #0
 800b734:	2200      	movs	r2, #0
 800b736:	2100      	movs	r1, #0
 800b738:	68f8      	ldr	r0, [r7, #12]
 800b73a:	f000 fa8d 	bl	800bc58 <xQueueGenericSend>
      return sema;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	e000      	b.n	800b744 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b742:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b744:	4618      	mov	r0, r3
 800b746:	3710      	adds	r7, #16
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}

0800b74c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b756:	2300      	movs	r3, #0
 800b758:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d101      	bne.n	800b764 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b760:	2380      	movs	r3, #128	; 0x80
 800b762:	e03a      	b.n	800b7da <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b76e:	d103      	bne.n	800b778 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b770:	f04f 33ff 	mov.w	r3, #4294967295
 800b774:	60fb      	str	r3, [r7, #12]
 800b776:	e009      	b.n	800b78c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d006      	beq.n	800b78c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d101      	bne.n	800b78c <osSemaphoreWait+0x40>
      ticks = 1;
 800b788:	2301      	movs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b78c:	f7ff ff33 	bl	800b5f6 <inHandlerMode>
 800b790:	4603      	mov	r3, r0
 800b792:	2b00      	cmp	r3, #0
 800b794:	d017      	beq.n	800b7c6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b796:	f107 0308 	add.w	r3, r7, #8
 800b79a:	461a      	mov	r2, r3
 800b79c:	2100      	movs	r1, #0
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 fcf2 	bl	800c188 <xQueueReceiveFromISR>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	2b01      	cmp	r3, #1
 800b7a8:	d001      	beq.n	800b7ae <osSemaphoreWait+0x62>
      return osErrorOS;
 800b7aa:	23ff      	movs	r3, #255	; 0xff
 800b7ac:	e015      	b.n	800b7da <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d011      	beq.n	800b7d8 <osSemaphoreWait+0x8c>
 800b7b4:	4b0b      	ldr	r3, [pc, #44]	; (800b7e4 <osSemaphoreWait+0x98>)
 800b7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7ba:	601a      	str	r2, [r3, #0]
 800b7bc:	f3bf 8f4f 	dsb	sy
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	e008      	b.n	800b7d8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b7c6:	68f9      	ldr	r1, [r7, #12]
 800b7c8:	6878      	ldr	r0, [r7, #4]
 800b7ca:	f000 fbd1 	bl	800bf70 <xQueueSemaphoreTake>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b01      	cmp	r3, #1
 800b7d2:	d001      	beq.n	800b7d8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b7d4:	23ff      	movs	r3, #255	; 0xff
 800b7d6:	e000      	b.n	800b7da <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	e000ed04 	.word	0xe000ed04

0800b7e8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b7f8:	f7ff fefd 	bl	800b5f6 <inHandlerMode>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d016      	beq.n	800b830 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b802:	f107 0308 	add.w	r3, r7, #8
 800b806:	4619      	mov	r1, r3
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fb23 	bl	800be54 <xQueueGiveFromISR>
 800b80e:	4603      	mov	r3, r0
 800b810:	2b01      	cmp	r3, #1
 800b812:	d001      	beq.n	800b818 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b814:	23ff      	movs	r3, #255	; 0xff
 800b816:	e017      	b.n	800b848 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d013      	beq.n	800b846 <osSemaphoreRelease+0x5e>
 800b81e:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <osSemaphoreRelease+0x68>)
 800b820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b824:	601a      	str	r2, [r3, #0]
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	f3bf 8f6f 	isb	sy
 800b82e:	e00a      	b.n	800b846 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b830:	2300      	movs	r3, #0
 800b832:	2200      	movs	r2, #0
 800b834:	2100      	movs	r1, #0
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fa0e 	bl	800bc58 <xQueueGenericSend>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b01      	cmp	r3, #1
 800b840:	d001      	beq.n	800b846 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b842:	23ff      	movs	r3, #255	; 0xff
 800b844:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b846:	68fb      	ldr	r3, [r7, #12]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3710      	adds	r7, #16
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b082      	sub	sp, #8
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b85c:	f7ff fecb 	bl	800b5f6 <inHandlerMode>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b866:	2382      	movs	r3, #130	; 0x82
 800b868:	e003      	b.n	800b872 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fd0c 	bl	800c288 <vQueueDelete>

  return osOK; 
 800b870:	2300      	movs	r3, #0
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b87a:	b480      	push	{r7}
 800b87c:	b083      	sub	sp, #12
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f103 0208 	add.w	r2, r3, #8
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f04f 32ff 	mov.w	r2, #4294967295
 800b892:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f103 0208 	add.w	r2, r3, #8
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	f103 0208 	add.w	r2, r3, #8
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b8ae:	bf00      	nop
 800b8b0:	370c      	adds	r7, #12
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b8:	4770      	bx	lr

0800b8ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b8ba:	b480      	push	{r7}
 800b8bc:	b083      	sub	sp, #12
 800b8be:	af00      	add	r7, sp, #0
 800b8c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	689b      	ldr	r3, [r3, #8]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	683a      	ldr	r2, [r7, #0]
 800b8fe:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b900:	683b      	ldr	r3, [r7, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	1c5a      	adds	r2, r3, #1
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	601a      	str	r2, [r3, #0]
}
 800b910:	bf00      	nop
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b932:	d103      	bne.n	800b93c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	60fb      	str	r3, [r7, #12]
 800b93a:	e00c      	b.n	800b956 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	3308      	adds	r3, #8
 800b940:	60fb      	str	r3, [r7, #12]
 800b942:	e002      	b.n	800b94a <vListInsert+0x2e>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	60fb      	str	r3, [r7, #12]
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	68ba      	ldr	r2, [r7, #8]
 800b952:	429a      	cmp	r2, r3
 800b954:	d2f6      	bcs.n	800b944 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	685a      	ldr	r2, [r3, #4]
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	683a      	ldr	r2, [r7, #0]
 800b964:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	683a      	ldr	r2, [r7, #0]
 800b970:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	1c5a      	adds	r2, r3, #1
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	601a      	str	r2, [r3, #0]
}
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr

0800b98e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b98e:	b480      	push	{r7}
 800b990:	b085      	sub	sp, #20
 800b992:	af00      	add	r7, sp, #0
 800b994:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6892      	ldr	r2, [r2, #8]
 800b9a4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	687a      	ldr	r2, [r7, #4]
 800b9ac:	6852      	ldr	r2, [r2, #4]
 800b9ae:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	687a      	ldr	r2, [r7, #4]
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d103      	bne.n	800b9c2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	689a      	ldr	r2, [r3, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	1e5a      	subs	r2, r3, #1
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	681b      	ldr	r3, [r3, #0]
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3714      	adds	r7, #20
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10a      	bne.n	800ba0e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba0a:	bf00      	nop
 800ba0c:	e7fe      	b.n	800ba0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ba0e:	f001 fef1 	bl	800d7f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681a      	ldr	r2, [r3, #0]
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1a:	68f9      	ldr	r1, [r7, #12]
 800ba1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba1e:	fb01 f303 	mul.w	r3, r1, r3
 800ba22:	441a      	add	r2, r3
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	681a      	ldr	r2, [r3, #0]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba3e:	3b01      	subs	r3, #1
 800ba40:	68f9      	ldr	r1, [r7, #12]
 800ba42:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ba44:	fb01 f303 	mul.w	r3, r1, r3
 800ba48:	441a      	add	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	22ff      	movs	r2, #255	; 0xff
 800ba52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	22ff      	movs	r2, #255	; 0xff
 800ba5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d114      	bne.n	800ba8e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d01a      	beq.n	800baa2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	3310      	adds	r3, #16
 800ba70:	4618      	mov	r0, r3
 800ba72:	f001 f9af 	bl	800cdd4 <xTaskRemoveFromEventList>
 800ba76:	4603      	mov	r3, r0
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d012      	beq.n	800baa2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ba7c:	4b0c      	ldr	r3, [pc, #48]	; (800bab0 <xQueueGenericReset+0xcc>)
 800ba7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba82:	601a      	str	r2, [r3, #0]
 800ba84:	f3bf 8f4f 	dsb	sy
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	e009      	b.n	800baa2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	3310      	adds	r3, #16
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7ff fef1 	bl	800b87a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	3324      	adds	r3, #36	; 0x24
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff feec 	bl	800b87a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800baa2:	f001 fed7 	bl	800d854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800baa6:	2301      	movs	r3, #1
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	e000ed04 	.word	0xe000ed04

0800bab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b08e      	sub	sp, #56	; 0x38
 800bab8:	af02      	add	r7, sp, #8
 800baba:	60f8      	str	r0, [r7, #12]
 800babc:	60b9      	str	r1, [r7, #8]
 800babe:	607a      	str	r2, [r7, #4]
 800bac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d10a      	bne.n	800bade <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bada:	bf00      	nop
 800badc:	e7fe      	b.n	800badc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d10a      	bne.n	800bafa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800baf6:	bf00      	nop
 800baf8:	e7fe      	b.n	800baf8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d002      	beq.n	800bb06 <xQueueGenericCreateStatic+0x52>
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <xQueueGenericCreateStatic+0x56>
 800bb06:	2301      	movs	r3, #1
 800bb08:	e000      	b.n	800bb0c <xQueueGenericCreateStatic+0x58>
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10a      	bne.n	800bb26 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	f383 8811 	msr	BASEPRI, r3
 800bb18:	f3bf 8f6f 	isb	sy
 800bb1c:	f3bf 8f4f 	dsb	sy
 800bb20:	623b      	str	r3, [r7, #32]
}
 800bb22:	bf00      	nop
 800bb24:	e7fe      	b.n	800bb24 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d102      	bne.n	800bb32 <xQueueGenericCreateStatic+0x7e>
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d101      	bne.n	800bb36 <xQueueGenericCreateStatic+0x82>
 800bb32:	2301      	movs	r3, #1
 800bb34:	e000      	b.n	800bb38 <xQueueGenericCreateStatic+0x84>
 800bb36:	2300      	movs	r3, #0
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb40:	f383 8811 	msr	BASEPRI, r3
 800bb44:	f3bf 8f6f 	isb	sy
 800bb48:	f3bf 8f4f 	dsb	sy
 800bb4c:	61fb      	str	r3, [r7, #28]
}
 800bb4e:	bf00      	nop
 800bb50:	e7fe      	b.n	800bb50 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bb52:	2348      	movs	r3, #72	; 0x48
 800bb54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bb56:	697b      	ldr	r3, [r7, #20]
 800bb58:	2b48      	cmp	r3, #72	; 0x48
 800bb5a:	d00a      	beq.n	800bb72 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bb5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb60:	f383 8811 	msr	BASEPRI, r3
 800bb64:	f3bf 8f6f 	isb	sy
 800bb68:	f3bf 8f4f 	dsb	sy
 800bb6c:	61bb      	str	r3, [r7, #24]
}
 800bb6e:	bf00      	nop
 800bb70:	e7fe      	b.n	800bb70 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bb72:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00d      	beq.n	800bb9a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bb7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb80:	2201      	movs	r2, #1
 800bb82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb86:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	9300      	str	r3, [sp, #0]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	687a      	ldr	r2, [r7, #4]
 800bb92:	68b9      	ldr	r1, [r7, #8]
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 f83f 	bl	800bc18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3730      	adds	r7, #48	; 0x30
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b08a      	sub	sp, #40	; 0x28
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <xQueueGenericCreate+0x2a>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	613b      	str	r3, [r7, #16]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	fb02 f303 	mul.w	r3, r2, r3
 800bbd6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	3348      	adds	r3, #72	; 0x48
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f001 ff2b 	bl	800da38 <pvPortMalloc>
 800bbe2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d011      	beq.n	800bc0e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	3348      	adds	r3, #72	; 0x48
 800bbf2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bbf4:	69bb      	ldr	r3, [r7, #24]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bbfc:	79fa      	ldrb	r2, [r7, #7]
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	4613      	mov	r3, r2
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	68b9      	ldr	r1, [r7, #8]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 f805 	bl	800bc18 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc0e:	69bb      	ldr	r3, [r7, #24]
	}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3720      	adds	r7, #32
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	607a      	str	r2, [r7, #4]
 800bc24:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d103      	bne.n	800bc34 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	69ba      	ldr	r2, [r7, #24]
 800bc30:	601a      	str	r2, [r3, #0]
 800bc32:	e002      	b.n	800bc3a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bc40:	69bb      	ldr	r3, [r7, #24]
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bc46:	2101      	movs	r1, #1
 800bc48:	69b8      	ldr	r0, [r7, #24]
 800bc4a:	f7ff fecb 	bl	800b9e4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bc4e:	bf00      	nop
 800bc50:	3710      	adds	r7, #16
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
	...

0800bc58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b08e      	sub	sp, #56	; 0x38
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
 800bc64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc66:	2300      	movs	r3, #0
 800bc68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10a      	bne.n	800bc8a <xQueueGenericSend+0x32>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	f383 8811 	msr	BASEPRI, r3
 800bc7c:	f3bf 8f6f 	isb	sy
 800bc80:	f3bf 8f4f 	dsb	sy
 800bc84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc86:	bf00      	nop
 800bc88:	e7fe      	b.n	800bc88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d103      	bne.n	800bc98 <xQueueGenericSend+0x40>
 800bc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d101      	bne.n	800bc9c <xQueueGenericSend+0x44>
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e000      	b.n	800bc9e <xQueueGenericSend+0x46>
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10a      	bne.n	800bcb8 <xQueueGenericSend+0x60>
	__asm volatile
 800bca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca6:	f383 8811 	msr	BASEPRI, r3
 800bcaa:	f3bf 8f6f 	isb	sy
 800bcae:	f3bf 8f4f 	dsb	sy
 800bcb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bcb4:	bf00      	nop
 800bcb6:	e7fe      	b.n	800bcb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d103      	bne.n	800bcc6 <xQueueGenericSend+0x6e>
 800bcbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d101      	bne.n	800bcca <xQueueGenericSend+0x72>
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e000      	b.n	800bccc <xQueueGenericSend+0x74>
 800bcca:	2300      	movs	r3, #0
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d10a      	bne.n	800bce6 <xQueueGenericSend+0x8e>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	623b      	str	r3, [r7, #32]
}
 800bce2:	bf00      	nop
 800bce4:	e7fe      	b.n	800bce4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bce6:	f001 fa35 	bl	800d154 <xTaskGetSchedulerState>
 800bcea:	4603      	mov	r3, r0
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d102      	bne.n	800bcf6 <xQueueGenericSend+0x9e>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d101      	bne.n	800bcfa <xQueueGenericSend+0xa2>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	e000      	b.n	800bcfc <xQueueGenericSend+0xa4>
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10a      	bne.n	800bd16 <xQueueGenericSend+0xbe>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	61fb      	str	r3, [r7, #28]
}
 800bd12:	bf00      	nop
 800bd14:	e7fe      	b.n	800bd14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bd16:	f001 fd6d 	bl	800d7f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d302      	bcc.n	800bd2c <xQueueGenericSend+0xd4>
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	2b02      	cmp	r3, #2
 800bd2a:	d129      	bne.n	800bd80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bd2c:	683a      	ldr	r2, [r7, #0]
 800bd2e:	68b9      	ldr	r1, [r7, #8]
 800bd30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bd32:	f000 fae4 	bl	800c2fe <prvCopyDataToQueue>
 800bd36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d010      	beq.n	800bd62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd42:	3324      	adds	r3, #36	; 0x24
 800bd44:	4618      	mov	r0, r3
 800bd46:	f001 f845 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d013      	beq.n	800bd78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bd50:	4b3f      	ldr	r3, [pc, #252]	; (800be50 <xQueueGenericSend+0x1f8>)
 800bd52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	e00a      	b.n	800bd78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d007      	beq.n	800bd78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd68:	4b39      	ldr	r3, [pc, #228]	; (800be50 <xQueueGenericSend+0x1f8>)
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6e:	601a      	str	r2, [r3, #0]
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd78:	f001 fd6c 	bl	800d854 <vPortExitCritical>
				return pdPASS;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e063      	b.n	800be48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d103      	bne.n	800bd8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd86:	f001 fd65 	bl	800d854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	e05c      	b.n	800be48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d106      	bne.n	800bda2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd94:	f107 0314 	add.w	r3, r7, #20
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 f87d 	bl	800ce98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bda2:	f001 fd57 	bl	800d854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bda6:	f000 fe2d 	bl	800ca04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bdaa:	f001 fd23 	bl	800d7f4 <vPortEnterCritical>
 800bdae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bdb4:	b25b      	sxtb	r3, r3
 800bdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdba:	d103      	bne.n	800bdc4 <xQueueGenericSend+0x16c>
 800bdbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bdca:	b25b      	sxtb	r3, r3
 800bdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdd0:	d103      	bne.n	800bdda <xQueueGenericSend+0x182>
 800bdd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bdda:	f001 fd3b 	bl	800d854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bdde:	1d3a      	adds	r2, r7, #4
 800bde0:	f107 0314 	add.w	r3, r7, #20
 800bde4:	4611      	mov	r1, r2
 800bde6:	4618      	mov	r0, r3
 800bde8:	f001 f86c 	bl	800cec4 <xTaskCheckForTimeOut>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d124      	bne.n	800be3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bdf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdf4:	f000 fb7b 	bl	800c4ee <prvIsQueueFull>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d018      	beq.n	800be30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be00:	3310      	adds	r3, #16
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	4611      	mov	r1, r2
 800be06:	4618      	mov	r0, r3
 800be08:	f000 ffc0 	bl	800cd8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800be0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be0e:	f000 fb06 	bl	800c41e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800be12:	f000 fe05 	bl	800ca20 <xTaskResumeAll>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	f47f af7c 	bne.w	800bd16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800be1e:	4b0c      	ldr	r3, [pc, #48]	; (800be50 <xQueueGenericSend+0x1f8>)
 800be20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be24:	601a      	str	r2, [r3, #0]
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	f3bf 8f6f 	isb	sy
 800be2e:	e772      	b.n	800bd16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800be30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be32:	f000 faf4 	bl	800c41e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800be36:	f000 fdf3 	bl	800ca20 <xTaskResumeAll>
 800be3a:	e76c      	b.n	800bd16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800be3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be3e:	f000 faee 	bl	800c41e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800be42:	f000 fded 	bl	800ca20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800be46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800be48:	4618      	mov	r0, r3
 800be4a:	3738      	adds	r7, #56	; 0x38
 800be4c:	46bd      	mov	sp, r7
 800be4e:	bd80      	pop	{r7, pc}
 800be50:	e000ed04 	.word	0xe000ed04

0800be54 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800be54:	b580      	push	{r7, lr}
 800be56:	b08e      	sub	sp, #56	; 0x38
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800be62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10a      	bne.n	800be7e <xQueueGiveFromISR+0x2a>
	__asm volatile
 800be68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	623b      	str	r3, [r7, #32]
}
 800be7a:	bf00      	nop
 800be7c:	e7fe      	b.n	800be7c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00a      	beq.n	800be9c <xQueueGiveFromISR+0x48>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	f383 8811 	msr	BASEPRI, r3
 800be8e:	f3bf 8f6f 	isb	sy
 800be92:	f3bf 8f4f 	dsb	sy
 800be96:	61fb      	str	r3, [r7, #28]
}
 800be98:	bf00      	nop
 800be9a:	e7fe      	b.n	800be9a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800be9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d103      	bne.n	800beac <xQueueGiveFromISR+0x58>
 800bea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d101      	bne.n	800beb0 <xQueueGiveFromISR+0x5c>
 800beac:	2301      	movs	r3, #1
 800beae:	e000      	b.n	800beb2 <xQueueGiveFromISR+0x5e>
 800beb0:	2300      	movs	r3, #0
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10a      	bne.n	800becc <xQueueGiveFromISR+0x78>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	61bb      	str	r3, [r7, #24]
}
 800bec8:	bf00      	nop
 800beca:	e7fe      	b.n	800beca <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800becc:	f001 fd74 	bl	800d9b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bed0:	f3ef 8211 	mrs	r2, BASEPRI
 800bed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	617a      	str	r2, [r7, #20]
 800bee6:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bee8:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800beea:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bef0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bef8:	429a      	cmp	r2, r3
 800befa:	d22b      	bcs.n	800bf54 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800befc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800befe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bf0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf16:	d112      	bne.n	800bf3e <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d016      	beq.n	800bf4e <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf22:	3324      	adds	r3, #36	; 0x24
 800bf24:	4618      	mov	r0, r3
 800bf26:	f000 ff55 	bl	800cdd4 <xTaskRemoveFromEventList>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00e      	beq.n	800bf4e <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d00b      	beq.n	800bf4e <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	2201      	movs	r2, #1
 800bf3a:	601a      	str	r2, [r3, #0]
 800bf3c:	e007      	b.n	800bf4e <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bf42:	3301      	adds	r3, #1
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	b25a      	sxtb	r2, r3
 800bf48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800bf4e:	2301      	movs	r3, #1
 800bf50:	637b      	str	r3, [r7, #52]	; 0x34
 800bf52:	e001      	b.n	800bf58 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	637b      	str	r3, [r7, #52]	; 0x34
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800bf62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bf64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3738      	adds	r7, #56	; 0x38
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}
	...

0800bf70 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08e      	sub	sp, #56	; 0x38
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
 800bf78:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bf82:	2300      	movs	r3, #0
 800bf84:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bf86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d10a      	bne.n	800bfa2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800bf8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf90:	f383 8811 	msr	BASEPRI, r3
 800bf94:	f3bf 8f6f 	isb	sy
 800bf98:	f3bf 8f4f 	dsb	sy
 800bf9c:	623b      	str	r3, [r7, #32]
}
 800bf9e:	bf00      	nop
 800bfa0:	e7fe      	b.n	800bfa0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d00a      	beq.n	800bfc0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800bfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfae:	f383 8811 	msr	BASEPRI, r3
 800bfb2:	f3bf 8f6f 	isb	sy
 800bfb6:	f3bf 8f4f 	dsb	sy
 800bfba:	61fb      	str	r3, [r7, #28]
}
 800bfbc:	bf00      	nop
 800bfbe:	e7fe      	b.n	800bfbe <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfc0:	f001 f8c8 	bl	800d154 <xTaskGetSchedulerState>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <xQueueSemaphoreTake+0x60>
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d101      	bne.n	800bfd4 <xQueueSemaphoreTake+0x64>
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	e000      	b.n	800bfd6 <xQueueSemaphoreTake+0x66>
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10a      	bne.n	800bff0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800bfda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfde:	f383 8811 	msr	BASEPRI, r3
 800bfe2:	f3bf 8f6f 	isb	sy
 800bfe6:	f3bf 8f4f 	dsb	sy
 800bfea:	61bb      	str	r3, [r7, #24]
}
 800bfec:	bf00      	nop
 800bfee:	e7fe      	b.n	800bfee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bff0:	f001 fc00 	bl	800d7f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800bff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bff8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800bffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d024      	beq.n	800c04a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c002:	1e5a      	subs	r2, r3, #1
 800c004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c006:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d104      	bne.n	800c01a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c010:	f001 fa48 	bl	800d4a4 <pvTaskIncrementMutexHeldCount>
 800c014:	4602      	mov	r2, r0
 800c016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c018:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01c:	691b      	ldr	r3, [r3, #16]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d00f      	beq.n	800c042 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c024:	3310      	adds	r3, #16
 800c026:	4618      	mov	r0, r3
 800c028:	f000 fed4 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c02c:	4603      	mov	r3, r0
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d007      	beq.n	800c042 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c032:	4b54      	ldr	r3, [pc, #336]	; (800c184 <xQueueSemaphoreTake+0x214>)
 800c034:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c038:	601a      	str	r2, [r3, #0]
 800c03a:	f3bf 8f4f 	dsb	sy
 800c03e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c042:	f001 fc07 	bl	800d854 <vPortExitCritical>
				return pdPASS;
 800c046:	2301      	movs	r3, #1
 800c048:	e097      	b.n	800c17a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d111      	bne.n	800c074 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	2b00      	cmp	r3, #0
 800c054:	d00a      	beq.n	800c06c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	617b      	str	r3, [r7, #20]
}
 800c068:	bf00      	nop
 800c06a:	e7fe      	b.n	800c06a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c06c:	f001 fbf2 	bl	800d854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c070:	2300      	movs	r3, #0
 800c072:	e082      	b.n	800c17a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c074:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c076:	2b00      	cmp	r3, #0
 800c078:	d106      	bne.n	800c088 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c07a:	f107 030c 	add.w	r3, r7, #12
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 ff0a 	bl	800ce98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c084:	2301      	movs	r3, #1
 800c086:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c088:	f001 fbe4 	bl	800d854 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c08c:	f000 fcba 	bl	800ca04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c090:	f001 fbb0 	bl	800d7f4 <vPortEnterCritical>
 800c094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c096:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c09a:	b25b      	sxtb	r3, r3
 800c09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0a0:	d103      	bne.n	800c0aa <xQueueSemaphoreTake+0x13a>
 800c0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0b0:	b25b      	sxtb	r3, r3
 800c0b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b6:	d103      	bne.n	800c0c0 <xQueueSemaphoreTake+0x150>
 800c0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0c0:	f001 fbc8 	bl	800d854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c0c4:	463a      	mov	r2, r7
 800c0c6:	f107 030c 	add.w	r3, r7, #12
 800c0ca:	4611      	mov	r1, r2
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f000 fef9 	bl	800cec4 <xTaskCheckForTimeOut>
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d132      	bne.n	800c13e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c0d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c0da:	f000 f9f2 	bl	800c4c2 <prvIsQueueEmpty>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d026      	beq.n	800c132 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d109      	bne.n	800c100 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c0ec:	f001 fb82 	bl	800d7f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f2:	689b      	ldr	r3, [r3, #8]
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f001 f84b 	bl	800d190 <xTaskPriorityInherit>
 800c0fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c0fc:	f001 fbaa 	bl	800d854 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c102:	3324      	adds	r3, #36	; 0x24
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	4611      	mov	r1, r2
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fe3f 	bl	800cd8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c110:	f000 f985 	bl	800c41e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c114:	f000 fc84 	bl	800ca20 <xTaskResumeAll>
 800c118:	4603      	mov	r3, r0
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	f47f af68 	bne.w	800bff0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c120:	4b18      	ldr	r3, [pc, #96]	; (800c184 <xQueueSemaphoreTake+0x214>)
 800c122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	f3bf 8f4f 	dsb	sy
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	e75e      	b.n	800bff0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c134:	f000 f973 	bl	800c41e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c138:	f000 fc72 	bl	800ca20 <xTaskResumeAll>
 800c13c:	e758      	b.n	800bff0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c13e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c140:	f000 f96d 	bl	800c41e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c144:	f000 fc6c 	bl	800ca20 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c14a:	f000 f9ba 	bl	800c4c2 <prvIsQueueEmpty>
 800c14e:	4603      	mov	r3, r0
 800c150:	2b00      	cmp	r3, #0
 800c152:	f43f af4d 	beq.w	800bff0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d00d      	beq.n	800c178 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c15c:	f001 fb4a 	bl	800d7f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c160:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c162:	f000 f8b4 	bl	800c2ce <prvGetDisinheritPriorityAfterTimeout>
 800c166:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16a:	689b      	ldr	r3, [r3, #8]
 800c16c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c16e:	4618      	mov	r0, r3
 800c170:	f001 f90a 	bl	800d388 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c174:	f001 fb6e 	bl	800d854 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c178:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3738      	adds	r7, #56	; 0x38
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	e000ed04 	.word	0xe000ed04

0800c188 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c188:	b580      	push	{r7, lr}
 800c18a:	b08e      	sub	sp, #56	; 0x38
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d10a      	bne.n	800c1b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	623b      	str	r3, [r7, #32]
}
 800c1b0:	bf00      	nop
 800c1b2:	e7fe      	b.n	800c1b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d103      	bne.n	800c1c2 <xQueueReceiveFromISR+0x3a>
 800c1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <xQueueReceiveFromISR+0x3e>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	e000      	b.n	800c1c8 <xQueueReceiveFromISR+0x40>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10a      	bne.n	800c1e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	61fb      	str	r3, [r7, #28]
}
 800c1de:	bf00      	nop
 800c1e0:	e7fe      	b.n	800c1e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c1e2:	f001 fbe9 	bl	800d9b8 <vPortValidateInterruptPriority>
	__asm volatile
 800c1e6:	f3ef 8211 	mrs	r2, BASEPRI
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	f383 8811 	msr	BASEPRI, r3
 800c1f2:	f3bf 8f6f 	isb	sy
 800c1f6:	f3bf 8f4f 	dsb	sy
 800c1fa:	61ba      	str	r2, [r7, #24]
 800c1fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c1fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c200:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c206:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d02f      	beq.n	800c26e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c218:	68b9      	ldr	r1, [r7, #8]
 800c21a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c21c:	f000 f8d9 	bl	800c3d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c222:	1e5a      	subs	r2, r3, #1
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c228:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c22c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c230:	d112      	bne.n	800c258 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d016      	beq.n	800c268 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	3310      	adds	r3, #16
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 fdc8 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c244:	4603      	mov	r3, r0
 800c246:	2b00      	cmp	r3, #0
 800c248:	d00e      	beq.n	800c268 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2201      	movs	r2, #1
 800c254:	601a      	str	r2, [r3, #0]
 800c256:	e007      	b.n	800c268 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c258:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c25c:	3301      	adds	r3, #1
 800c25e:	b2db      	uxtb	r3, r3
 800c260:	b25a      	sxtb	r2, r3
 800c262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c264:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c268:	2301      	movs	r3, #1
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34
 800c26c:	e001      	b.n	800c272 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c26e:	2300      	movs	r3, #0
 800c270:	637b      	str	r3, [r7, #52]	; 0x34
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	f383 8811 	msr	BASEPRI, r3
}
 800c27c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c27e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c280:	4618      	mov	r0, r3
 800c282:	3738      	adds	r7, #56	; 0x38
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}

0800c288 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b084      	sub	sp, #16
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10a      	bne.n	800c2b0 <vQueueDelete+0x28>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	60bb      	str	r3, [r7, #8]
}
 800c2ac:	bf00      	nop
 800c2ae:	e7fe      	b.n	800c2ae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c2b0:	68f8      	ldr	r0, [r7, #12]
 800c2b2:	f000 f935 	bl	800c520 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d102      	bne.n	800c2c6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c2c0:	68f8      	ldr	r0, [r7, #12]
 800c2c2:	f001 fc85 	bl	800dbd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c2c6:	bf00      	nop
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c2ce:	b480      	push	{r7}
 800c2d0:	b085      	sub	sp, #20
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f1c3 0307 	rsb	r3, r3, #7
 800c2e8:	60fb      	str	r3, [r7, #12]
 800c2ea:	e001      	b.n	800c2f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c2f0:	68fb      	ldr	r3, [r7, #12]
	}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3714      	adds	r7, #20
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c2fe:	b580      	push	{r7, lr}
 800c300:	b086      	sub	sp, #24
 800c302:	af00      	add	r7, sp, #0
 800c304:	60f8      	str	r0, [r7, #12]
 800c306:	60b9      	str	r1, [r7, #8]
 800c308:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c30a:	2300      	movs	r3, #0
 800c30c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c312:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d10d      	bne.n	800c338 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d14d      	bne.n	800c3c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	689b      	ldr	r3, [r3, #8]
 800c328:	4618      	mov	r0, r3
 800c32a:	f000 ffa7 	bl	800d27c <xTaskPriorityDisinherit>
 800c32e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2200      	movs	r2, #0
 800c334:	609a      	str	r2, [r3, #8]
 800c336:	e043      	b.n	800c3c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d119      	bne.n	800c372 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	6858      	ldr	r0, [r3, #4]
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c346:	461a      	mov	r2, r3
 800c348:	68b9      	ldr	r1, [r7, #8]
 800c34a:	f001 fd9f 	bl	800de8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	685a      	ldr	r2, [r3, #4]
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c356:	441a      	add	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	685a      	ldr	r2, [r3, #4]
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	689b      	ldr	r3, [r3, #8]
 800c364:	429a      	cmp	r2, r3
 800c366:	d32b      	bcc.n	800c3c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	605a      	str	r2, [r3, #4]
 800c370:	e026      	b.n	800c3c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	68d8      	ldr	r0, [r3, #12]
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	461a      	mov	r2, r3
 800c37c:	68b9      	ldr	r1, [r7, #8]
 800c37e:	f001 fd85 	bl	800de8c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38a:	425b      	negs	r3, r3
 800c38c:	441a      	add	r2, r3
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	68da      	ldr	r2, [r3, #12]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	429a      	cmp	r2, r3
 800c39c:	d207      	bcs.n	800c3ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	689a      	ldr	r2, [r3, #8]
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3a6:	425b      	negs	r3, r3
 800c3a8:	441a      	add	r2, r3
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d105      	bne.n	800c3c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c3b4:	693b      	ldr	r3, [r7, #16]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d002      	beq.n	800c3c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	1c5a      	adds	r2, r3, #1
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c3c8:	697b      	ldr	r3, [r7, #20]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}

0800c3d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c3d2:	b580      	push	{r7, lr}
 800c3d4:	b082      	sub	sp, #8
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d018      	beq.n	800c416 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68da      	ldr	r2, [r3, #12]
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	441a      	add	r2, r3
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d303      	bcc.n	800c406 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	68d9      	ldr	r1, [r3, #12]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40e:	461a      	mov	r2, r3
 800c410:	6838      	ldr	r0, [r7, #0]
 800c412:	f001 fd3b 	bl	800de8c <memcpy>
	}
}
 800c416:	bf00      	nop
 800c418:	3708      	adds	r7, #8
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}

0800c41e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c41e:	b580      	push	{r7, lr}
 800c420:	b084      	sub	sp, #16
 800c422:	af00      	add	r7, sp, #0
 800c424:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c426:	f001 f9e5 	bl	800d7f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c430:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c432:	e011      	b.n	800c458 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d012      	beq.n	800c462 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	3324      	adds	r3, #36	; 0x24
 800c440:	4618      	mov	r0, r3
 800c442:	f000 fcc7 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d001      	beq.n	800c450 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c44c:	f000 fd9c 	bl	800cf88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	3b01      	subs	r3, #1
 800c454:	b2db      	uxtb	r3, r3
 800c456:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dce9      	bgt.n	800c434 <prvUnlockQueue+0x16>
 800c460:	e000      	b.n	800c464 <prvUnlockQueue+0x46>
					break;
 800c462:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	22ff      	movs	r2, #255	; 0xff
 800c468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c46c:	f001 f9f2 	bl	800d854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c470:	f001 f9c0 	bl	800d7f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c47a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c47c:	e011      	b.n	800c4a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	691b      	ldr	r3, [r3, #16]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d012      	beq.n	800c4ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	3310      	adds	r3, #16
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 fca2 	bl	800cdd4 <xTaskRemoveFromEventList>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d001      	beq.n	800c49a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c496:	f000 fd77 	bl	800cf88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	3b01      	subs	r3, #1
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c4a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	dce9      	bgt.n	800c47e <prvUnlockQueue+0x60>
 800c4aa:	e000      	b.n	800c4ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c4ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	22ff      	movs	r2, #255	; 0xff
 800c4b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c4b6:	f001 f9cd 	bl	800d854 <vPortExitCritical>
}
 800c4ba:	bf00      	nop
 800c4bc:	3710      	adds	r7, #16
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b084      	sub	sp, #16
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4ca:	f001 f993 	bl	800d7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d102      	bne.n	800c4dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	60fb      	str	r3, [r7, #12]
 800c4da:	e001      	b.n	800c4e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c4e0:	f001 f9b8 	bl	800d854 <vPortExitCritical>

	return xReturn;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c4f6:	f001 f97d 	bl	800d7f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c502:	429a      	cmp	r2, r3
 800c504:	d102      	bne.n	800c50c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c506:	2301      	movs	r3, #1
 800c508:	60fb      	str	r3, [r7, #12]
 800c50a:	e001      	b.n	800c510 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c50c:	2300      	movs	r3, #0
 800c50e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c510:	f001 f9a0 	bl	800d854 <vPortExitCritical>

	return xReturn;
 800c514:	68fb      	ldr	r3, [r7, #12]
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}
	...

0800c520 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]
 800c52c:	e016      	b.n	800c55c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c52e:	4a10      	ldr	r2, [pc, #64]	; (800c570 <vQueueUnregisterQueue+0x50>)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	00db      	lsls	r3, r3, #3
 800c534:	4413      	add	r3, r2
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d10b      	bne.n	800c556 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c53e:	4a0c      	ldr	r2, [pc, #48]	; (800c570 <vQueueUnregisterQueue+0x50>)
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	2100      	movs	r1, #0
 800c544:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c548:	4a09      	ldr	r2, [pc, #36]	; (800c570 <vQueueUnregisterQueue+0x50>)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	00db      	lsls	r3, r3, #3
 800c54e:	4413      	add	r3, r2
 800c550:	2200      	movs	r2, #0
 800c552:	605a      	str	r2, [r3, #4]
				break;
 800c554:	e006      	b.n	800c564 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	60fb      	str	r3, [r7, #12]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b07      	cmp	r3, #7
 800c560:	d9e5      	bls.n	800c52e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c562:	bf00      	nop
 800c564:	bf00      	nop
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr
 800c570:	20000dac 	.word	0x20000dac

0800c574 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08e      	sub	sp, #56	; 0x38
 800c578:	af04      	add	r7, sp, #16
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10a      	bne.n	800c59e <xTaskCreateStatic+0x2a>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	623b      	str	r3, [r7, #32]
}
 800c59a:	bf00      	nop
 800c59c:	e7fe      	b.n	800c59c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800c59e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xTaskCreateStatic+0x46>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	61fb      	str	r3, [r7, #28]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c5ba:	23b4      	movs	r3, #180	; 0xb4
 800c5bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2bb4      	cmp	r3, #180	; 0xb4
 800c5c2:	d00a      	beq.n	800c5da <xTaskCreateStatic+0x66>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	61bb      	str	r3, [r7, #24]
}
 800c5d6:	bf00      	nop
 800c5d8:	e7fe      	b.n	800c5d8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c5da:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c5dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d01e      	beq.n	800c620 <xTaskCreateStatic+0xac>
 800c5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d01b      	beq.n	800c620 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c5f0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c5f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	9303      	str	r3, [sp, #12]
 800c5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c600:	9302      	str	r3, [sp, #8]
 800c602:	f107 0314 	add.w	r3, r7, #20
 800c606:	9301      	str	r3, [sp, #4]
 800c608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60a:	9300      	str	r3, [sp, #0]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	68b9      	ldr	r1, [r7, #8]
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f000 f850 	bl	800c6b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c618:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c61a:	f000 f8eb 	bl	800c7f4 <prvAddNewTaskToReadyList>
 800c61e:	e001      	b.n	800c624 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800c620:	2300      	movs	r3, #0
 800c622:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c624:	697b      	ldr	r3, [r7, #20]
	}
 800c626:	4618      	mov	r0, r3
 800c628:	3728      	adds	r7, #40	; 0x28
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b08c      	sub	sp, #48	; 0x30
 800c632:	af04      	add	r7, sp, #16
 800c634:	60f8      	str	r0, [r7, #12]
 800c636:	60b9      	str	r1, [r7, #8]
 800c638:	603b      	str	r3, [r7, #0]
 800c63a:	4613      	mov	r3, r2
 800c63c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c63e:	88fb      	ldrh	r3, [r7, #6]
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	4618      	mov	r0, r3
 800c644:	f001 f9f8 	bl	800da38 <pvPortMalloc>
 800c648:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d00e      	beq.n	800c66e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c650:	20b4      	movs	r0, #180	; 0xb4
 800c652:	f001 f9f1 	bl	800da38 <pvPortMalloc>
 800c656:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c658:	69fb      	ldr	r3, [r7, #28]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d003      	beq.n	800c666 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	697a      	ldr	r2, [r7, #20]
 800c662:	631a      	str	r2, [r3, #48]	; 0x30
 800c664:	e005      	b.n	800c672 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c666:	6978      	ldr	r0, [r7, #20]
 800c668:	f001 fab2 	bl	800dbd0 <vPortFree>
 800c66c:	e001      	b.n	800c672 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c66e:	2300      	movs	r3, #0
 800c670:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d017      	beq.n	800c6a8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c678:	69fb      	ldr	r3, [r7, #28]
 800c67a:	2200      	movs	r2, #0
 800c67c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c680:	88fa      	ldrh	r2, [r7, #6]
 800c682:	2300      	movs	r3, #0
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	9302      	str	r3, [sp, #8]
 800c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68c:	9301      	str	r3, [sp, #4]
 800c68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c690:	9300      	str	r3, [sp, #0]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	68b9      	ldr	r1, [r7, #8]
 800c696:	68f8      	ldr	r0, [r7, #12]
 800c698:	f000 f80e 	bl	800c6b8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c69c:	69f8      	ldr	r0, [r7, #28]
 800c69e:	f000 f8a9 	bl	800c7f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	61bb      	str	r3, [r7, #24]
 800c6a6:	e002      	b.n	800c6ae <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ac:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c6ae:	69bb      	ldr	r3, [r7, #24]
	}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3720      	adds	r7, #32
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b088      	sub	sp, #32
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	60f8      	str	r0, [r7, #12]
 800c6c0:	60b9      	str	r1, [r7, #8]
 800c6c2:	607a      	str	r2, [r7, #4]
 800c6c4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	009b      	lsls	r3, r3, #2
 800c6d4:	4413      	add	r3, r2
 800c6d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c6d8:	69bb      	ldr	r3, [r7, #24]
 800c6da:	f023 0307 	bic.w	r3, r3, #7
 800c6de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c6e0:	69bb      	ldr	r3, [r7, #24]
 800c6e2:	f003 0307 	and.w	r3, r3, #7
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d00a      	beq.n	800c700 <prvInitialiseNewTask+0x48>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	617b      	str	r3, [r7, #20]
}
 800c6fc:	bf00      	nop
 800c6fe:	e7fe      	b.n	800c6fe <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d01f      	beq.n	800c746 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c706:	2300      	movs	r3, #0
 800c708:	61fb      	str	r3, [r7, #28]
 800c70a:	e012      	b.n	800c732 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	69fb      	ldr	r3, [r7, #28]
 800c710:	4413      	add	r3, r2
 800c712:	7819      	ldrb	r1, [r3, #0]
 800c714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	4413      	add	r3, r2
 800c71a:	3334      	adds	r3, #52	; 0x34
 800c71c:	460a      	mov	r2, r1
 800c71e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	69fb      	ldr	r3, [r7, #28]
 800c724:	4413      	add	r3, r2
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d006      	beq.n	800c73a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	3301      	adds	r3, #1
 800c730:	61fb      	str	r3, [r7, #28]
 800c732:	69fb      	ldr	r3, [r7, #28]
 800c734:	2b0f      	cmp	r3, #15
 800c736:	d9e9      	bls.n	800c70c <prvInitialiseNewTask+0x54>
 800c738:	e000      	b.n	800c73c <prvInitialiseNewTask+0x84>
			{
				break;
 800c73a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c73e:	2200      	movs	r2, #0
 800c740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c744:	e003      	b.n	800c74e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	2b06      	cmp	r3, #6
 800c752:	d901      	bls.n	800c758 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c754:	2306      	movs	r3, #6
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c75a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c75c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c760:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c762:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c766:	2200      	movs	r2, #0
 800c768:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c76c:	3304      	adds	r3, #4
 800c76e:	4618      	mov	r0, r3
 800c770:	f7ff f8a3 	bl	800b8ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c776:	3318      	adds	r3, #24
 800c778:	4618      	mov	r0, r3
 800c77a:	f7ff f89e 	bl	800b8ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c782:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	f1c3 0207 	rsb	r2, r3, #7
 800c78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c78c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c792:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c796:	2200      	movs	r2, #0
 800c798:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c79c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c79e:	2200      	movs	r2, #0
 800c7a0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a6:	334c      	adds	r3, #76	; 0x4c
 800c7a8:	2260      	movs	r2, #96	; 0x60
 800c7aa:	2100      	movs	r1, #0
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f001 fb7b 	bl	800dea8 <memset>
 800c7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b4:	4a0c      	ldr	r2, [pc, #48]	; (800c7e8 <prvInitialiseNewTask+0x130>)
 800c7b6:	651a      	str	r2, [r3, #80]	; 0x50
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	; (800c7ec <prvInitialiseNewTask+0x134>)
 800c7bc:	655a      	str	r2, [r3, #84]	; 0x54
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	4a0b      	ldr	r2, [pc, #44]	; (800c7f0 <prvInitialiseNewTask+0x138>)
 800c7c2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	68f9      	ldr	r1, [r7, #12]
 800c7c8:	69b8      	ldr	r0, [r7, #24]
 800c7ca:	f000 fee5 	bl	800d598 <pxPortInitialiseStack>
 800c7ce:	4602      	mov	r2, r0
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d002      	beq.n	800c7e0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c7de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7e0:	bf00      	nop
 800c7e2:	3720      	adds	r7, #32
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	0800ecd0 	.word	0x0800ecd0
 800c7ec:	0800ecf0 	.word	0x0800ecf0
 800c7f0:	0800ecb0 	.word	0x0800ecb0

0800c7f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b082      	sub	sp, #8
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c7fc:	f000 fffa 	bl	800d7f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c800:	4b2a      	ldr	r3, [pc, #168]	; (800c8ac <prvAddNewTaskToReadyList+0xb8>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	3301      	adds	r3, #1
 800c806:	4a29      	ldr	r2, [pc, #164]	; (800c8ac <prvAddNewTaskToReadyList+0xb8>)
 800c808:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c80a:	4b29      	ldr	r3, [pc, #164]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c812:	4a27      	ldr	r2, [pc, #156]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c818:	4b24      	ldr	r3, [pc, #144]	; (800c8ac <prvAddNewTaskToReadyList+0xb8>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d110      	bne.n	800c842 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c820:	f000 fbd6 	bl	800cfd0 <prvInitialiseTaskLists>
 800c824:	e00d      	b.n	800c842 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c826:	4b23      	ldr	r3, [pc, #140]	; (800c8b4 <prvAddNewTaskToReadyList+0xc0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d109      	bne.n	800c842 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c82e:	4b20      	ldr	r3, [pc, #128]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c838:	429a      	cmp	r2, r3
 800c83a:	d802      	bhi.n	800c842 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c83c:	4a1c      	ldr	r2, [pc, #112]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c842:	4b1d      	ldr	r3, [pc, #116]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	3301      	adds	r3, #1
 800c848:	4a1b      	ldr	r2, [pc, #108]	; (800c8b8 <prvAddNewTaskToReadyList+0xc4>)
 800c84a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c850:	2201      	movs	r2, #1
 800c852:	409a      	lsls	r2, r3
 800c854:	4b19      	ldr	r3, [pc, #100]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4313      	orrs	r3, r2
 800c85a:	4a18      	ldr	r2, [pc, #96]	; (800c8bc <prvAddNewTaskToReadyList+0xc8>)
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c862:	4613      	mov	r3, r2
 800c864:	009b      	lsls	r3, r3, #2
 800c866:	4413      	add	r3, r2
 800c868:	009b      	lsls	r3, r3, #2
 800c86a:	4a15      	ldr	r2, [pc, #84]	; (800c8c0 <prvAddNewTaskToReadyList+0xcc>)
 800c86c:	441a      	add	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	3304      	adds	r3, #4
 800c872:	4619      	mov	r1, r3
 800c874:	4610      	mov	r0, r2
 800c876:	f7ff f82d 	bl	800b8d4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c87a:	f000 ffeb 	bl	800d854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c87e:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <prvAddNewTaskToReadyList+0xc0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00e      	beq.n	800c8a4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c886:	4b0a      	ldr	r3, [pc, #40]	; (800c8b0 <prvAddNewTaskToReadyList+0xbc>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c890:	429a      	cmp	r2, r3
 800c892:	d207      	bcs.n	800c8a4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c894:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <prvAddNewTaskToReadyList+0xd0>)
 800c896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c89a:	601a      	str	r2, [r3, #0]
 800c89c:	f3bf 8f4f 	dsb	sy
 800c8a0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	20000eec 	.word	0x20000eec
 800c8b0:	20000dec 	.word	0x20000dec
 800c8b4:	20000ef8 	.word	0x20000ef8
 800c8b8:	20000f08 	.word	0x20000f08
 800c8bc:	20000ef4 	.word	0x20000ef4
 800c8c0:	20000df0 	.word	0x20000df0
 800c8c4:	e000ed04 	.word	0xe000ed04

0800c8c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d017      	beq.n	800c90a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c8da:	4b13      	ldr	r3, [pc, #76]	; (800c928 <vTaskDelay+0x60>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d00a      	beq.n	800c8f8 <vTaskDelay+0x30>
	__asm volatile
 800c8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e6:	f383 8811 	msr	BASEPRI, r3
 800c8ea:	f3bf 8f6f 	isb	sy
 800c8ee:	f3bf 8f4f 	dsb	sy
 800c8f2:	60bb      	str	r3, [r7, #8]
}
 800c8f4:	bf00      	nop
 800c8f6:	e7fe      	b.n	800c8f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800c8f8:	f000 f884 	bl	800ca04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fde4 	bl	800d4cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c904:	f000 f88c 	bl	800ca20 <xTaskResumeAll>
 800c908:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d107      	bne.n	800c920 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800c910:	4b06      	ldr	r3, [pc, #24]	; (800c92c <vTaskDelay+0x64>)
 800c912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c916:	601a      	str	r2, [r3, #0]
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20000f14 	.word	0x20000f14
 800c92c:	e000ed04 	.word	0xe000ed04

0800c930 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b08a      	sub	sp, #40	; 0x28
 800c934:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c93a:	2300      	movs	r3, #0
 800c93c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c93e:	463a      	mov	r2, r7
 800c940:	1d39      	adds	r1, r7, #4
 800c942:	f107 0308 	add.w	r3, r7, #8
 800c946:	4618      	mov	r0, r3
 800c948:	f7f6 f8d2 	bl	8002af0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c94c:	6839      	ldr	r1, [r7, #0]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	68ba      	ldr	r2, [r7, #8]
 800c952:	9202      	str	r2, [sp, #8]
 800c954:	9301      	str	r3, [sp, #4]
 800c956:	2300      	movs	r3, #0
 800c958:	9300      	str	r3, [sp, #0]
 800c95a:	2300      	movs	r3, #0
 800c95c:	460a      	mov	r2, r1
 800c95e:	4921      	ldr	r1, [pc, #132]	; (800c9e4 <vTaskStartScheduler+0xb4>)
 800c960:	4821      	ldr	r0, [pc, #132]	; (800c9e8 <vTaskStartScheduler+0xb8>)
 800c962:	f7ff fe07 	bl	800c574 <xTaskCreateStatic>
 800c966:	4603      	mov	r3, r0
 800c968:	4a20      	ldr	r2, [pc, #128]	; (800c9ec <vTaskStartScheduler+0xbc>)
 800c96a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c96c:	4b1f      	ldr	r3, [pc, #124]	; (800c9ec <vTaskStartScheduler+0xbc>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d002      	beq.n	800c97a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c974:	2301      	movs	r3, #1
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	e001      	b.n	800c97e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c97a:	2300      	movs	r3, #0
 800c97c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	2b01      	cmp	r3, #1
 800c982:	d11b      	bne.n	800c9bc <vTaskStartScheduler+0x8c>
	__asm volatile
 800c984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c988:	f383 8811 	msr	BASEPRI, r3
 800c98c:	f3bf 8f6f 	isb	sy
 800c990:	f3bf 8f4f 	dsb	sy
 800c994:	613b      	str	r3, [r7, #16]
}
 800c996:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c998:	4b15      	ldr	r3, [pc, #84]	; (800c9f0 <vTaskStartScheduler+0xc0>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	334c      	adds	r3, #76	; 0x4c
 800c99e:	4a15      	ldr	r2, [pc, #84]	; (800c9f4 <vTaskStartScheduler+0xc4>)
 800c9a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c9a2:	4b15      	ldr	r3, [pc, #84]	; (800c9f8 <vTaskStartScheduler+0xc8>)
 800c9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9aa:	4b14      	ldr	r3, [pc, #80]	; (800c9fc <vTaskStartScheduler+0xcc>)
 800c9ac:	2201      	movs	r2, #1
 800c9ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9b0:	4b13      	ldr	r3, [pc, #76]	; (800ca00 <vTaskStartScheduler+0xd0>)
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c9b6:	f000 fe7b 	bl	800d6b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c9ba:	e00e      	b.n	800c9da <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9c2:	d10a      	bne.n	800c9da <vTaskStartScheduler+0xaa>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	60fb      	str	r3, [r7, #12]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <vTaskStartScheduler+0xa8>
}
 800c9da:	bf00      	nop
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	0800ec04 	.word	0x0800ec04
 800c9e8:	0800cfa1 	.word	0x0800cfa1
 800c9ec:	20000f10 	.word	0x20000f10
 800c9f0:	20000dec 	.word	0x20000dec
 800c9f4:	20000230 	.word	0x20000230
 800c9f8:	20000f0c 	.word	0x20000f0c
 800c9fc:	20000ef8 	.word	0x20000ef8
 800ca00:	20000ef0 	.word	0x20000ef0

0800ca04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <vTaskSuspendAll+0x18>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	4a03      	ldr	r2, [pc, #12]	; (800ca1c <vTaskSuspendAll+0x18>)
 800ca10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ca12:	bf00      	nop
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	20000f14 	.word	0x20000f14

0800ca20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca2e:	4b41      	ldr	r3, [pc, #260]	; (800cb34 <xTaskResumeAll+0x114>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10a      	bne.n	800ca4c <xTaskResumeAll+0x2c>
	__asm volatile
 800ca36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca3a:	f383 8811 	msr	BASEPRI, r3
 800ca3e:	f3bf 8f6f 	isb	sy
 800ca42:	f3bf 8f4f 	dsb	sy
 800ca46:	603b      	str	r3, [r7, #0]
}
 800ca48:	bf00      	nop
 800ca4a:	e7fe      	b.n	800ca4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ca4c:	f000 fed2 	bl	800d7f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ca50:	4b38      	ldr	r3, [pc, #224]	; (800cb34 <xTaskResumeAll+0x114>)
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	4a37      	ldr	r2, [pc, #220]	; (800cb34 <xTaskResumeAll+0x114>)
 800ca58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ca5a:	4b36      	ldr	r3, [pc, #216]	; (800cb34 <xTaskResumeAll+0x114>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d161      	bne.n	800cb26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ca62:	4b35      	ldr	r3, [pc, #212]	; (800cb38 <xTaskResumeAll+0x118>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d05d      	beq.n	800cb26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ca6a:	e02e      	b.n	800caca <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca6c:	4b33      	ldr	r3, [pc, #204]	; (800cb3c <xTaskResumeAll+0x11c>)
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	68db      	ldr	r3, [r3, #12]
 800ca72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3318      	adds	r3, #24
 800ca78:	4618      	mov	r0, r3
 800ca7a:	f7fe ff88 	bl	800b98e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	3304      	adds	r3, #4
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7fe ff83 	bl	800b98e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	409a      	lsls	r2, r3
 800ca90:	4b2b      	ldr	r3, [pc, #172]	; (800cb40 <xTaskResumeAll+0x120>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	4a2a      	ldr	r2, [pc, #168]	; (800cb40 <xTaskResumeAll+0x120>)
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca9e:	4613      	mov	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	4413      	add	r3, r2
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4a27      	ldr	r2, [pc, #156]	; (800cb44 <xTaskResumeAll+0x124>)
 800caa8:	441a      	add	r2, r3
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3304      	adds	r3, #4
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f7fe ff0f 	bl	800b8d4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800caba:	4b23      	ldr	r3, [pc, #140]	; (800cb48 <xTaskResumeAll+0x128>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d302      	bcc.n	800caca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cac4:	4b21      	ldr	r3, [pc, #132]	; (800cb4c <xTaskResumeAll+0x12c>)
 800cac6:	2201      	movs	r2, #1
 800cac8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800caca:	4b1c      	ldr	r3, [pc, #112]	; (800cb3c <xTaskResumeAll+0x11c>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d1cc      	bne.n	800ca6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d001      	beq.n	800cadc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cad8:	f000 fb1c 	bl	800d114 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800cadc:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <xTaskResumeAll+0x130>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d010      	beq.n	800cb0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cae8:	f000 f836 	bl	800cb58 <xTaskIncrementTick>
 800caec:	4603      	mov	r3, r0
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800caf2:	4b16      	ldr	r3, [pc, #88]	; (800cb4c <xTaskResumeAll+0x12c>)
 800caf4:	2201      	movs	r2, #1
 800caf6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3b01      	subs	r3, #1
 800cafc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1f1      	bne.n	800cae8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800cb04:	4b12      	ldr	r3, [pc, #72]	; (800cb50 <xTaskResumeAll+0x130>)
 800cb06:	2200      	movs	r2, #0
 800cb08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb0a:	4b10      	ldr	r3, [pc, #64]	; (800cb4c <xTaskResumeAll+0x12c>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d009      	beq.n	800cb26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb12:	2301      	movs	r3, #1
 800cb14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb16:	4b0f      	ldr	r3, [pc, #60]	; (800cb54 <xTaskResumeAll+0x134>)
 800cb18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb1c:	601a      	str	r2, [r3, #0]
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb26:	f000 fe95 	bl	800d854 <vPortExitCritical>

	return xAlreadyYielded;
 800cb2a:	68bb      	ldr	r3, [r7, #8]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	20000f14 	.word	0x20000f14
 800cb38:	20000eec 	.word	0x20000eec
 800cb3c:	20000eac 	.word	0x20000eac
 800cb40:	20000ef4 	.word	0x20000ef4
 800cb44:	20000df0 	.word	0x20000df0
 800cb48:	20000dec 	.word	0x20000dec
 800cb4c:	20000f00 	.word	0x20000f00
 800cb50:	20000efc 	.word	0x20000efc
 800cb54:	e000ed04 	.word	0xe000ed04

0800cb58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb62:	4b4e      	ldr	r3, [pc, #312]	; (800cc9c <xTaskIncrementTick+0x144>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	f040 808e 	bne.w	800cc88 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cb6c:	4b4c      	ldr	r3, [pc, #304]	; (800cca0 <xTaskIncrementTick+0x148>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	3301      	adds	r3, #1
 800cb72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cb74:	4a4a      	ldr	r2, [pc, #296]	; (800cca0 <xTaskIncrementTick+0x148>)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d120      	bne.n	800cbc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800cb80:	4b48      	ldr	r3, [pc, #288]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d00a      	beq.n	800cba0 <xTaskIncrementTick+0x48>
	__asm volatile
 800cb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8e:	f383 8811 	msr	BASEPRI, r3
 800cb92:	f3bf 8f6f 	isb	sy
 800cb96:	f3bf 8f4f 	dsb	sy
 800cb9a:	603b      	str	r3, [r7, #0]
}
 800cb9c:	bf00      	nop
 800cb9e:	e7fe      	b.n	800cb9e <xTaskIncrementTick+0x46>
 800cba0:	4b40      	ldr	r3, [pc, #256]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	4b40      	ldr	r3, [pc, #256]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a3e      	ldr	r2, [pc, #248]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cbac:	6013      	str	r3, [r2, #0]
 800cbae:	4a3e      	ldr	r2, [pc, #248]	; (800cca8 <xTaskIncrementTick+0x150>)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	6013      	str	r3, [r2, #0]
 800cbb4:	4b3d      	ldr	r3, [pc, #244]	; (800ccac <xTaskIncrementTick+0x154>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	4a3c      	ldr	r2, [pc, #240]	; (800ccac <xTaskIncrementTick+0x154>)
 800cbbc:	6013      	str	r3, [r2, #0]
 800cbbe:	f000 faa9 	bl	800d114 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cbc2:	4b3b      	ldr	r3, [pc, #236]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d348      	bcc.n	800cc5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cbcc:	4b35      	ldr	r3, [pc, #212]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d104      	bne.n	800cbe0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbd6:	4b36      	ldr	r3, [pc, #216]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800cbdc:	601a      	str	r2, [r3, #0]
					break;
 800cbde:	e03e      	b.n	800cc5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbe0:	4b30      	ldr	r3, [pc, #192]	; (800cca4 <xTaskIncrementTick+0x14c>)
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	68db      	ldr	r3, [r3, #12]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cbf0:	693a      	ldr	r2, [r7, #16]
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d203      	bcs.n	800cc00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cbf8:	4a2d      	ldr	r2, [pc, #180]	; (800ccb0 <xTaskIncrementTick+0x158>)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cbfe:	e02e      	b.n	800cc5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	3304      	adds	r3, #4
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7fe fec2 	bl	800b98e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc0a:	68bb      	ldr	r3, [r7, #8]
 800cc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d004      	beq.n	800cc1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	3318      	adds	r3, #24
 800cc16:	4618      	mov	r0, r3
 800cc18:	f7fe feb9 	bl	800b98e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	2201      	movs	r2, #1
 800cc22:	409a      	lsls	r2, r3
 800cc24:	4b23      	ldr	r3, [pc, #140]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	4313      	orrs	r3, r2
 800cc2a:	4a22      	ldr	r2, [pc, #136]	; (800ccb4 <xTaskIncrementTick+0x15c>)
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc32:	4613      	mov	r3, r2
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	4413      	add	r3, r2
 800cc38:	009b      	lsls	r3, r3, #2
 800cc3a:	4a1f      	ldr	r2, [pc, #124]	; (800ccb8 <xTaskIncrementTick+0x160>)
 800cc3c:	441a      	add	r2, r3
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	3304      	adds	r3, #4
 800cc42:	4619      	mov	r1, r3
 800cc44:	4610      	mov	r0, r2
 800cc46:	f7fe fe45 	bl	800b8d4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc4e:	4b1b      	ldr	r3, [pc, #108]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc54:	429a      	cmp	r2, r3
 800cc56:	d3b9      	bcc.n	800cbcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc5c:	e7b6      	b.n	800cbcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cc5e:	4b17      	ldr	r3, [pc, #92]	; (800ccbc <xTaskIncrementTick+0x164>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc64:	4914      	ldr	r1, [pc, #80]	; (800ccb8 <xTaskIncrementTick+0x160>)
 800cc66:	4613      	mov	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	440b      	add	r3, r1
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d901      	bls.n	800cc7a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800cc76:	2301      	movs	r3, #1
 800cc78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800cc7a:	4b11      	ldr	r3, [pc, #68]	; (800ccc0 <xTaskIncrementTick+0x168>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d007      	beq.n	800cc92 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800cc82:	2301      	movs	r3, #1
 800cc84:	617b      	str	r3, [r7, #20]
 800cc86:	e004      	b.n	800cc92 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800cc88:	4b0e      	ldr	r3, [pc, #56]	; (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	4a0d      	ldr	r2, [pc, #52]	; (800ccc4 <xTaskIncrementTick+0x16c>)
 800cc90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800cc92:	697b      	ldr	r3, [r7, #20]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	20000f14 	.word	0x20000f14
 800cca0:	20000ef0 	.word	0x20000ef0
 800cca4:	20000ea4 	.word	0x20000ea4
 800cca8:	20000ea8 	.word	0x20000ea8
 800ccac:	20000f04 	.word	0x20000f04
 800ccb0:	20000f0c 	.word	0x20000f0c
 800ccb4:	20000ef4 	.word	0x20000ef4
 800ccb8:	20000df0 	.word	0x20000df0
 800ccbc:	20000dec 	.word	0x20000dec
 800ccc0:	20000f00 	.word	0x20000f00
 800ccc4:	20000efc 	.word	0x20000efc

0800ccc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ccce:	4b29      	ldr	r3, [pc, #164]	; (800cd74 <vTaskSwitchContext+0xac>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d003      	beq.n	800ccde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ccd6:	4b28      	ldr	r3, [pc, #160]	; (800cd78 <vTaskSwitchContext+0xb0>)
 800ccd8:	2201      	movs	r2, #1
 800ccda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ccdc:	e044      	b.n	800cd68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800ccde:	4b26      	ldr	r3, [pc, #152]	; (800cd78 <vTaskSwitchContext+0xb0>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cce4:	4b25      	ldr	r3, [pc, #148]	; (800cd7c <vTaskSwitchContext+0xb4>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	fab3 f383 	clz	r3, r3
 800ccf0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ccf2:	7afb      	ldrb	r3, [r7, #11]
 800ccf4:	f1c3 031f 	rsb	r3, r3, #31
 800ccf8:	617b      	str	r3, [r7, #20]
 800ccfa:	4921      	ldr	r1, [pc, #132]	; (800cd80 <vTaskSwitchContext+0xb8>)
 800ccfc:	697a      	ldr	r2, [r7, #20]
 800ccfe:	4613      	mov	r3, r2
 800cd00:	009b      	lsls	r3, r3, #2
 800cd02:	4413      	add	r3, r2
 800cd04:	009b      	lsls	r3, r3, #2
 800cd06:	440b      	add	r3, r1
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d10a      	bne.n	800cd24 <vTaskSwitchContext+0x5c>
	__asm volatile
 800cd0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd12:	f383 8811 	msr	BASEPRI, r3
 800cd16:	f3bf 8f6f 	isb	sy
 800cd1a:	f3bf 8f4f 	dsb	sy
 800cd1e:	607b      	str	r3, [r7, #4]
}
 800cd20:	bf00      	nop
 800cd22:	e7fe      	b.n	800cd22 <vTaskSwitchContext+0x5a>
 800cd24:	697a      	ldr	r2, [r7, #20]
 800cd26:	4613      	mov	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4a14      	ldr	r2, [pc, #80]	; (800cd80 <vTaskSwitchContext+0xb8>)
 800cd30:	4413      	add	r3, r2
 800cd32:	613b      	str	r3, [r7, #16]
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	685a      	ldr	r2, [r3, #4]
 800cd3a:	693b      	ldr	r3, [r7, #16]
 800cd3c:	605a      	str	r2, [r3, #4]
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	685a      	ldr	r2, [r3, #4]
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	3308      	adds	r3, #8
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d104      	bne.n	800cd54 <vTaskSwitchContext+0x8c>
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	685a      	ldr	r2, [r3, #4]
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	605a      	str	r2, [r3, #4]
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	685b      	ldr	r3, [r3, #4]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	4a0a      	ldr	r2, [pc, #40]	; (800cd84 <vTaskSwitchContext+0xbc>)
 800cd5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cd5e:	4b09      	ldr	r3, [pc, #36]	; (800cd84 <vTaskSwitchContext+0xbc>)
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	334c      	adds	r3, #76	; 0x4c
 800cd64:	4a08      	ldr	r2, [pc, #32]	; (800cd88 <vTaskSwitchContext+0xc0>)
 800cd66:	6013      	str	r3, [r2, #0]
}
 800cd68:	bf00      	nop
 800cd6a:	371c      	adds	r7, #28
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr
 800cd74:	20000f14 	.word	0x20000f14
 800cd78:	20000f00 	.word	0x20000f00
 800cd7c:	20000ef4 	.word	0x20000ef4
 800cd80:	20000df0 	.word	0x20000df0
 800cd84:	20000dec 	.word	0x20000dec
 800cd88:	20000230 	.word	0x20000230

0800cd8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10a      	bne.n	800cdb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	60fb      	str	r3, [r7, #12]
}
 800cdae:	bf00      	nop
 800cdb0:	e7fe      	b.n	800cdb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cdb2:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <vTaskPlaceOnEventList+0x44>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	3318      	adds	r3, #24
 800cdb8:	4619      	mov	r1, r3
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7fe fdae 	bl	800b91c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cdc0:	2101      	movs	r1, #1
 800cdc2:	6838      	ldr	r0, [r7, #0]
 800cdc4:	f000 fb82 	bl	800d4cc <prvAddCurrentTaskToDelayedList>
}
 800cdc8:	bf00      	nop
 800cdca:	3710      	adds	r7, #16
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}
 800cdd0:	20000dec 	.word	0x20000dec

0800cdd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b086      	sub	sp, #24
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d10a      	bne.n	800ce00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800cdea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdee:	f383 8811 	msr	BASEPRI, r3
 800cdf2:	f3bf 8f6f 	isb	sy
 800cdf6:	f3bf 8f4f 	dsb	sy
 800cdfa:	60fb      	str	r3, [r7, #12]
}
 800cdfc:	bf00      	nop
 800cdfe:	e7fe      	b.n	800cdfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	3318      	adds	r3, #24
 800ce04:	4618      	mov	r0, r3
 800ce06:	f7fe fdc2 	bl	800b98e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce0a:	4b1d      	ldr	r3, [pc, #116]	; (800ce80 <xTaskRemoveFromEventList+0xac>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d11c      	bne.n	800ce4c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	3304      	adds	r3, #4
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fdb9 	bl	800b98e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ce1c:	693b      	ldr	r3, [r7, #16]
 800ce1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce20:	2201      	movs	r2, #1
 800ce22:	409a      	lsls	r2, r3
 800ce24:	4b17      	ldr	r3, [pc, #92]	; (800ce84 <xTaskRemoveFromEventList+0xb0>)
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	4313      	orrs	r3, r2
 800ce2a:	4a16      	ldr	r2, [pc, #88]	; (800ce84 <xTaskRemoveFromEventList+0xb0>)
 800ce2c:	6013      	str	r3, [r2, #0]
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce32:	4613      	mov	r3, r2
 800ce34:	009b      	lsls	r3, r3, #2
 800ce36:	4413      	add	r3, r2
 800ce38:	009b      	lsls	r3, r3, #2
 800ce3a:	4a13      	ldr	r2, [pc, #76]	; (800ce88 <xTaskRemoveFromEventList+0xb4>)
 800ce3c:	441a      	add	r2, r3
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f7fe fd45 	bl	800b8d4 <vListInsertEnd>
 800ce4a:	e005      	b.n	800ce58 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	3318      	adds	r3, #24
 800ce50:	4619      	mov	r1, r3
 800ce52:	480e      	ldr	r0, [pc, #56]	; (800ce8c <xTaskRemoveFromEventList+0xb8>)
 800ce54:	f7fe fd3e 	bl	800b8d4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5c:	4b0c      	ldr	r3, [pc, #48]	; (800ce90 <xTaskRemoveFromEventList+0xbc>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d905      	bls.n	800ce72 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ce66:	2301      	movs	r3, #1
 800ce68:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ce6a:	4b0a      	ldr	r3, [pc, #40]	; (800ce94 <xTaskRemoveFromEventList+0xc0>)
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	e001      	b.n	800ce76 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ce72:	2300      	movs	r3, #0
 800ce74:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ce76:	697b      	ldr	r3, [r7, #20]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3718      	adds	r7, #24
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}
 800ce80:	20000f14 	.word	0x20000f14
 800ce84:	20000ef4 	.word	0x20000ef4
 800ce88:	20000df0 	.word	0x20000df0
 800ce8c:	20000eac 	.word	0x20000eac
 800ce90:	20000dec 	.word	0x20000dec
 800ce94:	20000f00 	.word	0x20000f00

0800ce98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	b083      	sub	sp, #12
 800ce9c:	af00      	add	r7, sp, #0
 800ce9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cea0:	4b06      	ldr	r3, [pc, #24]	; (800cebc <vTaskInternalSetTimeOutState+0x24>)
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cea8:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <vTaskInternalSetTimeOutState+0x28>)
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	605a      	str	r2, [r3, #4]
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	20000f04 	.word	0x20000f04
 800cec0:	20000ef0 	.word	0x20000ef0

0800cec4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b088      	sub	sp, #32
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10a      	bne.n	800ceea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	613b      	str	r3, [r7, #16]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10a      	bne.n	800cf06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800cef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef4:	f383 8811 	msr	BASEPRI, r3
 800cef8:	f3bf 8f6f 	isb	sy
 800cefc:	f3bf 8f4f 	dsb	sy
 800cf00:	60fb      	str	r3, [r7, #12]
}
 800cf02:	bf00      	nop
 800cf04:	e7fe      	b.n	800cf04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800cf06:	f000 fc75 	bl	800d7f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cf0a:	4b1d      	ldr	r3, [pc, #116]	; (800cf80 <xTaskCheckForTimeOut+0xbc>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	69ba      	ldr	r2, [r7, #24]
 800cf16:	1ad3      	subs	r3, r2, r3
 800cf18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf22:	d102      	bne.n	800cf2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cf24:	2300      	movs	r3, #0
 800cf26:	61fb      	str	r3, [r7, #28]
 800cf28:	e023      	b.n	800cf72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	4b15      	ldr	r3, [pc, #84]	; (800cf84 <xTaskCheckForTimeOut+0xc0>)
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d007      	beq.n	800cf46 <xTaskCheckForTimeOut+0x82>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	69ba      	ldr	r2, [r7, #24]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d302      	bcc.n	800cf46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cf40:	2301      	movs	r3, #1
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e015      	b.n	800cf72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	697a      	ldr	r2, [r7, #20]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d20b      	bcs.n	800cf68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	681a      	ldr	r2, [r3, #0]
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	1ad2      	subs	r2, r2, r3
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f7ff ff9b 	bl	800ce98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cf62:	2300      	movs	r3, #0
 800cf64:	61fb      	str	r3, [r7, #28]
 800cf66:	e004      	b.n	800cf72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cf72:	f000 fc6f 	bl	800d854 <vPortExitCritical>

	return xReturn;
 800cf76:	69fb      	ldr	r3, [r7, #28]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3720      	adds	r7, #32
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20000ef0 	.word	0x20000ef0
 800cf84:	20000f04 	.word	0x20000f04

0800cf88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cf88:	b480      	push	{r7}
 800cf8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cf8c:	4b03      	ldr	r3, [pc, #12]	; (800cf9c <vTaskMissedYield+0x14>)
 800cf8e:	2201      	movs	r2, #1
 800cf90:	601a      	str	r2, [r3, #0]
}
 800cf92:	bf00      	nop
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	20000f00 	.word	0x20000f00

0800cfa0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cfa8:	f000 f852 	bl	800d050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <prvIdleTask+0x28>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	2b01      	cmp	r3, #1
 800cfb2:	d9f9      	bls.n	800cfa8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800cfb4:	4b05      	ldr	r3, [pc, #20]	; (800cfcc <prvIdleTask+0x2c>)
 800cfb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cfba:	601a      	str	r2, [r3, #0]
 800cfbc:	f3bf 8f4f 	dsb	sy
 800cfc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cfc4:	e7f0      	b.n	800cfa8 <prvIdleTask+0x8>
 800cfc6:	bf00      	nop
 800cfc8:	20000df0 	.word	0x20000df0
 800cfcc:	e000ed04 	.word	0xe000ed04

0800cfd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	607b      	str	r3, [r7, #4]
 800cfda:	e00c      	b.n	800cff6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	4613      	mov	r3, r2
 800cfe0:	009b      	lsls	r3, r3, #2
 800cfe2:	4413      	add	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4a12      	ldr	r2, [pc, #72]	; (800d030 <prvInitialiseTaskLists+0x60>)
 800cfe8:	4413      	add	r3, r2
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fe fc45 	bl	800b87a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	3301      	adds	r3, #1
 800cff4:	607b      	str	r3, [r7, #4]
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2b06      	cmp	r3, #6
 800cffa:	d9ef      	bls.n	800cfdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cffc:	480d      	ldr	r0, [pc, #52]	; (800d034 <prvInitialiseTaskLists+0x64>)
 800cffe:	f7fe fc3c 	bl	800b87a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d002:	480d      	ldr	r0, [pc, #52]	; (800d038 <prvInitialiseTaskLists+0x68>)
 800d004:	f7fe fc39 	bl	800b87a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d008:	480c      	ldr	r0, [pc, #48]	; (800d03c <prvInitialiseTaskLists+0x6c>)
 800d00a:	f7fe fc36 	bl	800b87a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d00e:	480c      	ldr	r0, [pc, #48]	; (800d040 <prvInitialiseTaskLists+0x70>)
 800d010:	f7fe fc33 	bl	800b87a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d014:	480b      	ldr	r0, [pc, #44]	; (800d044 <prvInitialiseTaskLists+0x74>)
 800d016:	f7fe fc30 	bl	800b87a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d01a:	4b0b      	ldr	r3, [pc, #44]	; (800d048 <prvInitialiseTaskLists+0x78>)
 800d01c:	4a05      	ldr	r2, [pc, #20]	; (800d034 <prvInitialiseTaskLists+0x64>)
 800d01e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d020:	4b0a      	ldr	r3, [pc, #40]	; (800d04c <prvInitialiseTaskLists+0x7c>)
 800d022:	4a05      	ldr	r2, [pc, #20]	; (800d038 <prvInitialiseTaskLists+0x68>)
 800d024:	601a      	str	r2, [r3, #0]
}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	20000df0 	.word	0x20000df0
 800d034:	20000e7c 	.word	0x20000e7c
 800d038:	20000e90 	.word	0x20000e90
 800d03c:	20000eac 	.word	0x20000eac
 800d040:	20000ec0 	.word	0x20000ec0
 800d044:	20000ed8 	.word	0x20000ed8
 800d048:	20000ea4 	.word	0x20000ea4
 800d04c:	20000ea8 	.word	0x20000ea8

0800d050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b082      	sub	sp, #8
 800d054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d056:	e019      	b.n	800d08c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d058:	f000 fbcc 	bl	800d7f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d05c:	4b10      	ldr	r3, [pc, #64]	; (800d0a0 <prvCheckTasksWaitingTermination+0x50>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	68db      	ldr	r3, [r3, #12]
 800d062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3304      	adds	r3, #4
 800d068:	4618      	mov	r0, r3
 800d06a:	f7fe fc90 	bl	800b98e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d06e:	4b0d      	ldr	r3, [pc, #52]	; (800d0a4 <prvCheckTasksWaitingTermination+0x54>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	3b01      	subs	r3, #1
 800d074:	4a0b      	ldr	r2, [pc, #44]	; (800d0a4 <prvCheckTasksWaitingTermination+0x54>)
 800d076:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <prvCheckTasksWaitingTermination+0x58>)
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	3b01      	subs	r3, #1
 800d07e:	4a0a      	ldr	r2, [pc, #40]	; (800d0a8 <prvCheckTasksWaitingTermination+0x58>)
 800d080:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d082:	f000 fbe7 	bl	800d854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f000 f810 	bl	800d0ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d08c:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <prvCheckTasksWaitingTermination+0x58>)
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1e1      	bne.n	800d058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d094:	bf00      	nop
 800d096:	bf00      	nop
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000ec0 	.word	0x20000ec0
 800d0a4:	20000eec 	.word	0x20000eec
 800d0a8:	20000ed4 	.word	0x20000ed4

0800d0ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	334c      	adds	r3, #76	; 0x4c
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	f001 f801 	bl	800e0c0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d108      	bne.n	800d0da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f000 fd7f 	bl	800dbd0 <vPortFree>
				vPortFree( pxTCB );
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f000 fd7c 	bl	800dbd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d0d8:	e018      	b.n	800d10c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d0e0:	2b01      	cmp	r3, #1
 800d0e2:	d103      	bne.n	800d0ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fd73 	bl	800dbd0 <vPortFree>
	}
 800d0ea:	e00f      	b.n	800d10c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800d0f2:	2b02      	cmp	r3, #2
 800d0f4:	d00a      	beq.n	800d10c <prvDeleteTCB+0x60>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60fb      	str	r3, [r7, #12]
}
 800d108:	bf00      	nop
 800d10a:	e7fe      	b.n	800d10a <prvDeleteTCB+0x5e>
	}
 800d10c:	bf00      	nop
 800d10e:	3710      	adds	r7, #16
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d114:	b480      	push	{r7}
 800d116:	b083      	sub	sp, #12
 800d118:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d11a:	4b0c      	ldr	r3, [pc, #48]	; (800d14c <prvResetNextTaskUnblockTime+0x38>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d104      	bne.n	800d12e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d124:	4b0a      	ldr	r3, [pc, #40]	; (800d150 <prvResetNextTaskUnblockTime+0x3c>)
 800d126:	f04f 32ff 	mov.w	r2, #4294967295
 800d12a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d12c:	e008      	b.n	800d140 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d12e:	4b07      	ldr	r3, [pc, #28]	; (800d14c <prvResetNextTaskUnblockTime+0x38>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	68db      	ldr	r3, [r3, #12]
 800d136:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	4a04      	ldr	r2, [pc, #16]	; (800d150 <prvResetNextTaskUnblockTime+0x3c>)
 800d13e:	6013      	str	r3, [r2, #0]
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr
 800d14c:	20000ea4 	.word	0x20000ea4
 800d150:	20000f0c 	.word	0x20000f0c

0800d154 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d154:	b480      	push	{r7}
 800d156:	b083      	sub	sp, #12
 800d158:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d15a:	4b0b      	ldr	r3, [pc, #44]	; (800d188 <xTaskGetSchedulerState+0x34>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d102      	bne.n	800d168 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d162:	2301      	movs	r3, #1
 800d164:	607b      	str	r3, [r7, #4]
 800d166:	e008      	b.n	800d17a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d168:	4b08      	ldr	r3, [pc, #32]	; (800d18c <xTaskGetSchedulerState+0x38>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d102      	bne.n	800d176 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d170:	2302      	movs	r3, #2
 800d172:	607b      	str	r3, [r7, #4]
 800d174:	e001      	b.n	800d17a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d176:	2300      	movs	r3, #0
 800d178:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d17a:	687b      	ldr	r3, [r7, #4]
	}
 800d17c:	4618      	mov	r0, r3
 800d17e:	370c      	adds	r7, #12
 800d180:	46bd      	mov	sp, r7
 800d182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d186:	4770      	bx	lr
 800d188:	20000ef8 	.word	0x20000ef8
 800d18c:	20000f14 	.word	0x20000f14

0800d190 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d190:	b580      	push	{r7, lr}
 800d192:	b084      	sub	sp, #16
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d19c:	2300      	movs	r3, #0
 800d19e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d05e      	beq.n	800d264 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1aa:	4b31      	ldr	r3, [pc, #196]	; (800d270 <xTaskPriorityInherit+0xe0>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d24e      	bcs.n	800d252 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	db06      	blt.n	800d1ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d1bc:	4b2c      	ldr	r3, [pc, #176]	; (800d270 <xTaskPriorityInherit+0xe0>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c2:	f1c3 0207 	rsb	r2, r3, #7
 800d1c6:	68bb      	ldr	r3, [r7, #8]
 800d1c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	6959      	ldr	r1, [r3, #20]
 800d1ce:	68bb      	ldr	r3, [r7, #8]
 800d1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1d2:	4613      	mov	r3, r2
 800d1d4:	009b      	lsls	r3, r3, #2
 800d1d6:	4413      	add	r3, r2
 800d1d8:	009b      	lsls	r3, r3, #2
 800d1da:	4a26      	ldr	r2, [pc, #152]	; (800d274 <xTaskPriorityInherit+0xe4>)
 800d1dc:	4413      	add	r3, r2
 800d1de:	4299      	cmp	r1, r3
 800d1e0:	d12f      	bne.n	800d242 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d1e2:	68bb      	ldr	r3, [r7, #8]
 800d1e4:	3304      	adds	r3, #4
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	f7fe fbd1 	bl	800b98e <uxListRemove>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10a      	bne.n	800d208 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800d1f2:	68bb      	ldr	r3, [r7, #8]
 800d1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fc:	43da      	mvns	r2, r3
 800d1fe:	4b1e      	ldr	r3, [pc, #120]	; (800d278 <xTaskPriorityInherit+0xe8>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	4013      	ands	r3, r2
 800d204:	4a1c      	ldr	r2, [pc, #112]	; (800d278 <xTaskPriorityInherit+0xe8>)
 800d206:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d208:	4b19      	ldr	r3, [pc, #100]	; (800d270 <xTaskPriorityInherit+0xe0>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d212:	68bb      	ldr	r3, [r7, #8]
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	2201      	movs	r2, #1
 800d218:	409a      	lsls	r2, r3
 800d21a:	4b17      	ldr	r3, [pc, #92]	; (800d278 <xTaskPriorityInherit+0xe8>)
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	4313      	orrs	r3, r2
 800d220:	4a15      	ldr	r2, [pc, #84]	; (800d278 <xTaskPriorityInherit+0xe8>)
 800d222:	6013      	str	r3, [r2, #0]
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	4a10      	ldr	r2, [pc, #64]	; (800d274 <xTaskPriorityInherit+0xe4>)
 800d232:	441a      	add	r2, r3
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	3304      	adds	r3, #4
 800d238:	4619      	mov	r1, r3
 800d23a:	4610      	mov	r0, r2
 800d23c:	f7fe fb4a 	bl	800b8d4 <vListInsertEnd>
 800d240:	e004      	b.n	800d24c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d242:	4b0b      	ldr	r3, [pc, #44]	; (800d270 <xTaskPriorityInherit+0xe0>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d24c:	2301      	movs	r3, #1
 800d24e:	60fb      	str	r3, [r7, #12]
 800d250:	e008      	b.n	800d264 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d252:	68bb      	ldr	r3, [r7, #8]
 800d254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d256:	4b06      	ldr	r3, [pc, #24]	; (800d270 <xTaskPriorityInherit+0xe0>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d201      	bcs.n	800d264 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d260:	2301      	movs	r3, #1
 800d262:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d264:	68fb      	ldr	r3, [r7, #12]
	}
 800d266:	4618      	mov	r0, r3
 800d268:	3710      	adds	r7, #16
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
 800d26e:	bf00      	nop
 800d270:	20000dec 	.word	0x20000dec
 800d274:	20000df0 	.word	0x20000df0
 800d278:	20000ef4 	.word	0x20000ef4

0800d27c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d288:	2300      	movs	r3, #0
 800d28a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d06e      	beq.n	800d370 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d292:	4b3a      	ldr	r3, [pc, #232]	; (800d37c <xTaskPriorityDisinherit+0x100>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	429a      	cmp	r2, r3
 800d29a:	d00a      	beq.n	800d2b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a0:	f383 8811 	msr	BASEPRI, r3
 800d2a4:	f3bf 8f6f 	isb	sy
 800d2a8:	f3bf 8f4f 	dsb	sy
 800d2ac:	60fb      	str	r3, [r7, #12]
}
 800d2ae:	bf00      	nop
 800d2b0:	e7fe      	b.n	800d2b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d10a      	bne.n	800d2d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2be:	f383 8811 	msr	BASEPRI, r3
 800d2c2:	f3bf 8f6f 	isb	sy
 800d2c6:	f3bf 8f4f 	dsb	sy
 800d2ca:	60bb      	str	r3, [r7, #8]
}
 800d2cc:	bf00      	nop
 800d2ce:	e7fe      	b.n	800d2ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d2d0:	693b      	ldr	r3, [r7, #16]
 800d2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2d4:	1e5a      	subs	r2, r3, #1
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d044      	beq.n	800d370 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d140      	bne.n	800d370 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ee:	693b      	ldr	r3, [r7, #16]
 800d2f0:	3304      	adds	r3, #4
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fe fb4b 	bl	800b98e <uxListRemove>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d115      	bne.n	800d32a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d302:	491f      	ldr	r1, [pc, #124]	; (800d380 <xTaskPriorityDisinherit+0x104>)
 800d304:	4613      	mov	r3, r2
 800d306:	009b      	lsls	r3, r3, #2
 800d308:	4413      	add	r3, r2
 800d30a:	009b      	lsls	r3, r3, #2
 800d30c:	440b      	add	r3, r1
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10a      	bne.n	800d32a <xTaskPriorityDisinherit+0xae>
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d318:	2201      	movs	r2, #1
 800d31a:	fa02 f303 	lsl.w	r3, r2, r3
 800d31e:	43da      	mvns	r2, r3
 800d320:	4b18      	ldr	r3, [pc, #96]	; (800d384 <xTaskPriorityDisinherit+0x108>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	4013      	ands	r3, r2
 800d326:	4a17      	ldr	r2, [pc, #92]	; (800d384 <xTaskPriorityDisinherit+0x108>)
 800d328:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d336:	f1c3 0207 	rsb	r2, r3, #7
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d342:	2201      	movs	r2, #1
 800d344:	409a      	lsls	r2, r3
 800d346:	4b0f      	ldr	r3, [pc, #60]	; (800d384 <xTaskPriorityDisinherit+0x108>)
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	4313      	orrs	r3, r2
 800d34c:	4a0d      	ldr	r2, [pc, #52]	; (800d384 <xTaskPriorityDisinherit+0x108>)
 800d34e:	6013      	str	r3, [r2, #0]
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d354:	4613      	mov	r3, r2
 800d356:	009b      	lsls	r3, r3, #2
 800d358:	4413      	add	r3, r2
 800d35a:	009b      	lsls	r3, r3, #2
 800d35c:	4a08      	ldr	r2, [pc, #32]	; (800d380 <xTaskPriorityDisinherit+0x104>)
 800d35e:	441a      	add	r2, r3
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	3304      	adds	r3, #4
 800d364:	4619      	mov	r1, r3
 800d366:	4610      	mov	r0, r2
 800d368:	f7fe fab4 	bl	800b8d4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d36c:	2301      	movs	r3, #1
 800d36e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d370:	697b      	ldr	r3, [r7, #20]
	}
 800d372:	4618      	mov	r0, r3
 800d374:	3718      	adds	r7, #24
 800d376:	46bd      	mov	sp, r7
 800d378:	bd80      	pop	{r7, pc}
 800d37a:	bf00      	nop
 800d37c:	20000dec 	.word	0x20000dec
 800d380:	20000df0 	.word	0x20000df0
 800d384:	20000ef4 	.word	0x20000ef4

0800d388 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b088      	sub	sp, #32
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d396:	2301      	movs	r3, #1
 800d398:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d077      	beq.n	800d490 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10a      	bne.n	800d3be <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d3a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ac:	f383 8811 	msr	BASEPRI, r3
 800d3b0:	f3bf 8f6f 	isb	sy
 800d3b4:	f3bf 8f4f 	dsb	sy
 800d3b8:	60fb      	str	r3, [r7, #12]
}
 800d3ba:	bf00      	nop
 800d3bc:	e7fe      	b.n	800d3bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d902      	bls.n	800d3ce <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	61fb      	str	r3, [r7, #28]
 800d3cc:	e002      	b.n	800d3d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d3ce:	69bb      	ldr	r3, [r7, #24]
 800d3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d3d4:	69bb      	ldr	r3, [r7, #24]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3d8:	69fa      	ldr	r2, [r7, #28]
 800d3da:	429a      	cmp	r2, r3
 800d3dc:	d058      	beq.n	800d490 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d3de:	69bb      	ldr	r3, [r7, #24]
 800d3e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3e2:	697a      	ldr	r2, [r7, #20]
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d153      	bne.n	800d490 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d3e8:	4b2b      	ldr	r3, [pc, #172]	; (800d498 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	69ba      	ldr	r2, [r7, #24]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d10a      	bne.n	800d408 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d3f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3f6:	f383 8811 	msr	BASEPRI, r3
 800d3fa:	f3bf 8f6f 	isb	sy
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	60bb      	str	r3, [r7, #8]
}
 800d404:	bf00      	nop
 800d406:	e7fe      	b.n	800d406 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d40e:	69bb      	ldr	r3, [r7, #24]
 800d410:	69fa      	ldr	r2, [r7, #28]
 800d412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d414:	69bb      	ldr	r3, [r7, #24]
 800d416:	699b      	ldr	r3, [r3, #24]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	db04      	blt.n	800d426 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	f1c3 0207 	rsb	r2, r3, #7
 800d422:	69bb      	ldr	r3, [r7, #24]
 800d424:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d426:	69bb      	ldr	r3, [r7, #24]
 800d428:	6959      	ldr	r1, [r3, #20]
 800d42a:	693a      	ldr	r2, [r7, #16]
 800d42c:	4613      	mov	r3, r2
 800d42e:	009b      	lsls	r3, r3, #2
 800d430:	4413      	add	r3, r2
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	4a19      	ldr	r2, [pc, #100]	; (800d49c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d436:	4413      	add	r3, r2
 800d438:	4299      	cmp	r1, r3
 800d43a:	d129      	bne.n	800d490 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d43c:	69bb      	ldr	r3, [r7, #24]
 800d43e:	3304      	adds	r3, #4
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe faa4 	bl	800b98e <uxListRemove>
 800d446:	4603      	mov	r3, r0
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d10a      	bne.n	800d462 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d450:	2201      	movs	r2, #1
 800d452:	fa02 f303 	lsl.w	r3, r2, r3
 800d456:	43da      	mvns	r2, r3
 800d458:	4b11      	ldr	r3, [pc, #68]	; (800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	4013      	ands	r3, r2
 800d45e:	4a10      	ldr	r2, [pc, #64]	; (800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d460:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d462:	69bb      	ldr	r3, [r7, #24]
 800d464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d466:	2201      	movs	r2, #1
 800d468:	409a      	lsls	r2, r3
 800d46a:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4313      	orrs	r3, r2
 800d470:	4a0b      	ldr	r2, [pc, #44]	; (800d4a0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	69bb      	ldr	r3, [r7, #24]
 800d476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d478:	4613      	mov	r3, r2
 800d47a:	009b      	lsls	r3, r3, #2
 800d47c:	4413      	add	r3, r2
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4a06      	ldr	r2, [pc, #24]	; (800d49c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800d482:	441a      	add	r2, r3
 800d484:	69bb      	ldr	r3, [r7, #24]
 800d486:	3304      	adds	r3, #4
 800d488:	4619      	mov	r1, r3
 800d48a:	4610      	mov	r0, r2
 800d48c:	f7fe fa22 	bl	800b8d4 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d490:	bf00      	nop
 800d492:	3720      	adds	r7, #32
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}
 800d498:	20000dec 	.word	0x20000dec
 800d49c:	20000df0 	.word	0x20000df0
 800d4a0:	20000ef4 	.word	0x20000ef4

0800d4a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d4a4:	b480      	push	{r7}
 800d4a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d4a8:	4b07      	ldr	r3, [pc, #28]	; (800d4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d004      	beq.n	800d4ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d4b0:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d4b6:	3201      	adds	r2, #1
 800d4b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d4ba:	4b03      	ldr	r3, [pc, #12]	; (800d4c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d4bc:	681b      	ldr	r3, [r3, #0]
	}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c6:	4770      	bx	lr
 800d4c8:	20000dec 	.word	0x20000dec

0800d4cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d4d6:	4b29      	ldr	r3, [pc, #164]	; (800d57c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d4dc:	4b28      	ldr	r3, [pc, #160]	; (800d580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	3304      	adds	r3, #4
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fe fa53 	bl	800b98e <uxListRemove>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d10b      	bne.n	800d506 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d4ee:	4b24      	ldr	r3, [pc, #144]	; (800d580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d4fa:	43da      	mvns	r2, r3
 800d4fc:	4b21      	ldr	r3, [pc, #132]	; (800d584 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4013      	ands	r3, r2
 800d502:	4a20      	ldr	r2, [pc, #128]	; (800d584 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d504:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d50c:	d10a      	bne.n	800d524 <prvAddCurrentTaskToDelayedList+0x58>
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d007      	beq.n	800d524 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d514:	4b1a      	ldr	r3, [pc, #104]	; (800d580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	3304      	adds	r3, #4
 800d51a:	4619      	mov	r1, r3
 800d51c:	481a      	ldr	r0, [pc, #104]	; (800d588 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d51e:	f7fe f9d9 	bl	800b8d4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d522:	e026      	b.n	800d572 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d524:	68fa      	ldr	r2, [r7, #12]
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4413      	add	r3, r2
 800d52a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d52c:	4b14      	ldr	r3, [pc, #80]	; (800d580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	429a      	cmp	r2, r3
 800d53a:	d209      	bcs.n	800d550 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d53c:	4b13      	ldr	r3, [pc, #76]	; (800d58c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	4b0f      	ldr	r3, [pc, #60]	; (800d580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3304      	adds	r3, #4
 800d546:	4619      	mov	r1, r3
 800d548:	4610      	mov	r0, r2
 800d54a:	f7fe f9e7 	bl	800b91c <vListInsert>
}
 800d54e:	e010      	b.n	800d572 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d550:	4b0f      	ldr	r3, [pc, #60]	; (800d590 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d552:	681a      	ldr	r2, [r3, #0]
 800d554:	4b0a      	ldr	r3, [pc, #40]	; (800d580 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3304      	adds	r3, #4
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f7fe f9dd 	bl	800b91c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d562:	4b0c      	ldr	r3, [pc, #48]	; (800d594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	68ba      	ldr	r2, [r7, #8]
 800d568:	429a      	cmp	r2, r3
 800d56a:	d202      	bcs.n	800d572 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d56c:	4a09      	ldr	r2, [pc, #36]	; (800d594 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d56e:	68bb      	ldr	r3, [r7, #8]
 800d570:	6013      	str	r3, [r2, #0]
}
 800d572:	bf00      	nop
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20000ef0 	.word	0x20000ef0
 800d580:	20000dec 	.word	0x20000dec
 800d584:	20000ef4 	.word	0x20000ef4
 800d588:	20000ed8 	.word	0x20000ed8
 800d58c:	20000ea8 	.word	0x20000ea8
 800d590:	20000ea4 	.word	0x20000ea4
 800d594:	20000f0c 	.word	0x20000f0c

0800d598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	3b04      	subs	r3, #4
 800d5a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d5b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	3b04      	subs	r3, #4
 800d5b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	f023 0201 	bic.w	r2, r3, #1
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3b04      	subs	r3, #4
 800d5c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d5c8:	4a0c      	ldr	r2, [pc, #48]	; (800d5fc <pxPortInitialiseStack+0x64>)
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	3b14      	subs	r3, #20
 800d5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	3b04      	subs	r3, #4
 800d5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d5e0:	68fb      	ldr	r3, [r7, #12]
 800d5e2:	f06f 0202 	mvn.w	r2, #2
 800d5e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3b20      	subs	r3, #32
 800d5ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d5ee:	68fb      	ldr	r3, [r7, #12]
}
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	3714      	adds	r7, #20
 800d5f4:	46bd      	mov	sp, r7
 800d5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fa:	4770      	bx	lr
 800d5fc:	0800d601 	.word	0x0800d601

0800d600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d600:	b480      	push	{r7}
 800d602:	b085      	sub	sp, #20
 800d604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d60a:	4b12      	ldr	r3, [pc, #72]	; (800d654 <prvTaskExitError+0x54>)
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d612:	d00a      	beq.n	800d62a <prvTaskExitError+0x2a>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	f383 8811 	msr	BASEPRI, r3
 800d61c:	f3bf 8f6f 	isb	sy
 800d620:	f3bf 8f4f 	dsb	sy
 800d624:	60fb      	str	r3, [r7, #12]
}
 800d626:	bf00      	nop
 800d628:	e7fe      	b.n	800d628 <prvTaskExitError+0x28>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	60bb      	str	r3, [r7, #8]
}
 800d63c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d63e:	bf00      	nop
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0fc      	beq.n	800d640 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d646:	bf00      	nop
 800d648:	bf00      	nop
 800d64a:	3714      	adds	r7, #20
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr
 800d654:	2000022c 	.word	0x2000022c
	...

0800d660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d660:	4b07      	ldr	r3, [pc, #28]	; (800d680 <pxCurrentTCBConst2>)
 800d662:	6819      	ldr	r1, [r3, #0]
 800d664:	6808      	ldr	r0, [r1, #0]
 800d666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66a:	f380 8809 	msr	PSP, r0
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f04f 0000 	mov.w	r0, #0
 800d676:	f380 8811 	msr	BASEPRI, r0
 800d67a:	4770      	bx	lr
 800d67c:	f3af 8000 	nop.w

0800d680 <pxCurrentTCBConst2>:
 800d680:	20000dec 	.word	0x20000dec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d684:	bf00      	nop
 800d686:	bf00      	nop

0800d688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d688:	4808      	ldr	r0, [pc, #32]	; (800d6ac <prvPortStartFirstTask+0x24>)
 800d68a:	6800      	ldr	r0, [r0, #0]
 800d68c:	6800      	ldr	r0, [r0, #0]
 800d68e:	f380 8808 	msr	MSP, r0
 800d692:	f04f 0000 	mov.w	r0, #0
 800d696:	f380 8814 	msr	CONTROL, r0
 800d69a:	b662      	cpsie	i
 800d69c:	b661      	cpsie	f
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	f3bf 8f6f 	isb	sy
 800d6a6:	df00      	svc	0
 800d6a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d6aa:	bf00      	nop
 800d6ac:	e000ed08 	.word	0xe000ed08

0800d6b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b086      	sub	sp, #24
 800d6b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d6b6:	4b46      	ldr	r3, [pc, #280]	; (800d7d0 <xPortStartScheduler+0x120>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a46      	ldr	r2, [pc, #280]	; (800d7d4 <xPortStartScheduler+0x124>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d10a      	bne.n	800d6d6 <xPortStartScheduler+0x26>
	__asm volatile
 800d6c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c4:	f383 8811 	msr	BASEPRI, r3
 800d6c8:	f3bf 8f6f 	isb	sy
 800d6cc:	f3bf 8f4f 	dsb	sy
 800d6d0:	613b      	str	r3, [r7, #16]
}
 800d6d2:	bf00      	nop
 800d6d4:	e7fe      	b.n	800d6d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d6d6:	4b3e      	ldr	r3, [pc, #248]	; (800d7d0 <xPortStartScheduler+0x120>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	4a3f      	ldr	r2, [pc, #252]	; (800d7d8 <xPortStartScheduler+0x128>)
 800d6dc:	4293      	cmp	r3, r2
 800d6de:	d10a      	bne.n	800d6f6 <xPortStartScheduler+0x46>
	__asm volatile
 800d6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e4:	f383 8811 	msr	BASEPRI, r3
 800d6e8:	f3bf 8f6f 	isb	sy
 800d6ec:	f3bf 8f4f 	dsb	sy
 800d6f0:	60fb      	str	r3, [r7, #12]
}
 800d6f2:	bf00      	nop
 800d6f4:	e7fe      	b.n	800d6f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d6f6:	4b39      	ldr	r3, [pc, #228]	; (800d7dc <xPortStartScheduler+0x12c>)
 800d6f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	22ff      	movs	r2, #255	; 0xff
 800d706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d708:	697b      	ldr	r3, [r7, #20]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	b2db      	uxtb	r3, r3
 800d70e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	b2db      	uxtb	r3, r3
 800d714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d718:	b2da      	uxtb	r2, r3
 800d71a:	4b31      	ldr	r3, [pc, #196]	; (800d7e0 <xPortStartScheduler+0x130>)
 800d71c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d71e:	4b31      	ldr	r3, [pc, #196]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d720:	2207      	movs	r2, #7
 800d722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d724:	e009      	b.n	800d73a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d726:	4b2f      	ldr	r3, [pc, #188]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	3b01      	subs	r3, #1
 800d72c:	4a2d      	ldr	r2, [pc, #180]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d72e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d730:	78fb      	ldrb	r3, [r7, #3]
 800d732:	b2db      	uxtb	r3, r3
 800d734:	005b      	lsls	r3, r3, #1
 800d736:	b2db      	uxtb	r3, r3
 800d738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d73a:	78fb      	ldrb	r3, [r7, #3]
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d742:	2b80      	cmp	r3, #128	; 0x80
 800d744:	d0ef      	beq.n	800d726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d746:	4b27      	ldr	r3, [pc, #156]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	f1c3 0307 	rsb	r3, r3, #7
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d00a      	beq.n	800d768 <xPortStartScheduler+0xb8>
	__asm volatile
 800d752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d756:	f383 8811 	msr	BASEPRI, r3
 800d75a:	f3bf 8f6f 	isb	sy
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	60bb      	str	r3, [r7, #8]
}
 800d764:	bf00      	nop
 800d766:	e7fe      	b.n	800d766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d768:	4b1e      	ldr	r3, [pc, #120]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	021b      	lsls	r3, r3, #8
 800d76e:	4a1d      	ldr	r2, [pc, #116]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d772:	4b1c      	ldr	r3, [pc, #112]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d77a:	4a1a      	ldr	r2, [pc, #104]	; (800d7e4 <xPortStartScheduler+0x134>)
 800d77c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	b2da      	uxtb	r2, r3
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d786:	4b18      	ldr	r3, [pc, #96]	; (800d7e8 <xPortStartScheduler+0x138>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4a17      	ldr	r2, [pc, #92]	; (800d7e8 <xPortStartScheduler+0x138>)
 800d78c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d792:	4b15      	ldr	r3, [pc, #84]	; (800d7e8 <xPortStartScheduler+0x138>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a14      	ldr	r2, [pc, #80]	; (800d7e8 <xPortStartScheduler+0x138>)
 800d798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d79c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d79e:	f000 f8dd 	bl	800d95c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d7a2:	4b12      	ldr	r3, [pc, #72]	; (800d7ec <xPortStartScheduler+0x13c>)
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d7a8:	f000 f8fc 	bl	800d9a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d7ac:	4b10      	ldr	r3, [pc, #64]	; (800d7f0 <xPortStartScheduler+0x140>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	4a0f      	ldr	r2, [pc, #60]	; (800d7f0 <xPortStartScheduler+0x140>)
 800d7b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d7b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d7b8:	f7ff ff66 	bl	800d688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d7bc:	f7ff fa84 	bl	800ccc8 <vTaskSwitchContext>
	prvTaskExitError();
 800d7c0:	f7ff ff1e 	bl	800d600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d7c4:	2300      	movs	r3, #0
}
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	3718      	adds	r7, #24
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	bd80      	pop	{r7, pc}
 800d7ce:	bf00      	nop
 800d7d0:	e000ed00 	.word	0xe000ed00
 800d7d4:	410fc271 	.word	0x410fc271
 800d7d8:	410fc270 	.word	0x410fc270
 800d7dc:	e000e400 	.word	0xe000e400
 800d7e0:	20000f18 	.word	0x20000f18
 800d7e4:	20000f1c 	.word	0x20000f1c
 800d7e8:	e000ed20 	.word	0xe000ed20
 800d7ec:	2000022c 	.word	0x2000022c
 800d7f0:	e000ef34 	.word	0xe000ef34

0800d7f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
	__asm volatile
 800d7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	607b      	str	r3, [r7, #4]
}
 800d80c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d80e:	4b0f      	ldr	r3, [pc, #60]	; (800d84c <vPortEnterCritical+0x58>)
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3301      	adds	r3, #1
 800d814:	4a0d      	ldr	r2, [pc, #52]	; (800d84c <vPortEnterCritical+0x58>)
 800d816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d818:	4b0c      	ldr	r3, [pc, #48]	; (800d84c <vPortEnterCritical+0x58>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2b01      	cmp	r3, #1
 800d81e:	d10f      	bne.n	800d840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d820:	4b0b      	ldr	r3, [pc, #44]	; (800d850 <vPortEnterCritical+0x5c>)
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	b2db      	uxtb	r3, r3
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00a      	beq.n	800d840 <vPortEnterCritical+0x4c>
	__asm volatile
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	f383 8811 	msr	BASEPRI, r3
 800d832:	f3bf 8f6f 	isb	sy
 800d836:	f3bf 8f4f 	dsb	sy
 800d83a:	603b      	str	r3, [r7, #0]
}
 800d83c:	bf00      	nop
 800d83e:	e7fe      	b.n	800d83e <vPortEnterCritical+0x4a>
	}
}
 800d840:	bf00      	nop
 800d842:	370c      	adds	r7, #12
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	2000022c 	.word	0x2000022c
 800d850:	e000ed04 	.word	0xe000ed04

0800d854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d854:	b480      	push	{r7}
 800d856:	b083      	sub	sp, #12
 800d858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d85a:	4b12      	ldr	r3, [pc, #72]	; (800d8a4 <vPortExitCritical+0x50>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d10a      	bne.n	800d878 <vPortExitCritical+0x24>
	__asm volatile
 800d862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d866:	f383 8811 	msr	BASEPRI, r3
 800d86a:	f3bf 8f6f 	isb	sy
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	607b      	str	r3, [r7, #4]
}
 800d874:	bf00      	nop
 800d876:	e7fe      	b.n	800d876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d878:	4b0a      	ldr	r3, [pc, #40]	; (800d8a4 <vPortExitCritical+0x50>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3b01      	subs	r3, #1
 800d87e:	4a09      	ldr	r2, [pc, #36]	; (800d8a4 <vPortExitCritical+0x50>)
 800d880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d882:	4b08      	ldr	r3, [pc, #32]	; (800d8a4 <vPortExitCritical+0x50>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d105      	bne.n	800d896 <vPortExitCritical+0x42>
 800d88a:	2300      	movs	r3, #0
 800d88c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	f383 8811 	msr	BASEPRI, r3
}
 800d894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d896:	bf00      	nop
 800d898:	370c      	adds	r7, #12
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
 800d8a2:	bf00      	nop
 800d8a4:	2000022c 	.word	0x2000022c
	...

0800d8b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d8b0:	f3ef 8009 	mrs	r0, PSP
 800d8b4:	f3bf 8f6f 	isb	sy
 800d8b8:	4b15      	ldr	r3, [pc, #84]	; (800d910 <pxCurrentTCBConst>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	f01e 0f10 	tst.w	lr, #16
 800d8c0:	bf08      	it	eq
 800d8c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d8c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8ca:	6010      	str	r0, [r2, #0]
 800d8cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d8d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d8d4:	f380 8811 	msr	BASEPRI, r0
 800d8d8:	f3bf 8f4f 	dsb	sy
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f7ff f9f2 	bl	800ccc8 <vTaskSwitchContext>
 800d8e4:	f04f 0000 	mov.w	r0, #0
 800d8e8:	f380 8811 	msr	BASEPRI, r0
 800d8ec:	bc09      	pop	{r0, r3}
 800d8ee:	6819      	ldr	r1, [r3, #0]
 800d8f0:	6808      	ldr	r0, [r1, #0]
 800d8f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8f6:	f01e 0f10 	tst.w	lr, #16
 800d8fa:	bf08      	it	eq
 800d8fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d900:	f380 8809 	msr	PSP, r0
 800d904:	f3bf 8f6f 	isb	sy
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	f3af 8000 	nop.w

0800d910 <pxCurrentTCBConst>:
 800d910:	20000dec 	.word	0x20000dec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d914:	bf00      	nop
 800d916:	bf00      	nop

0800d918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b082      	sub	sp, #8
 800d91c:	af00      	add	r7, sp, #0
	__asm volatile
 800d91e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d922:	f383 8811 	msr	BASEPRI, r3
 800d926:	f3bf 8f6f 	isb	sy
 800d92a:	f3bf 8f4f 	dsb	sy
 800d92e:	607b      	str	r3, [r7, #4]
}
 800d930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d932:	f7ff f911 	bl	800cb58 <xTaskIncrementTick>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d003      	beq.n	800d944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d93c:	4b06      	ldr	r3, [pc, #24]	; (800d958 <SysTick_Handler+0x40>)
 800d93e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d942:	601a      	str	r2, [r3, #0]
 800d944:	2300      	movs	r3, #0
 800d946:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f383 8811 	msr	BASEPRI, r3
}
 800d94e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d950:	bf00      	nop
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}
 800d958:	e000ed04 	.word	0xe000ed04

0800d95c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d95c:	b480      	push	{r7}
 800d95e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d960:	4b0b      	ldr	r3, [pc, #44]	; (800d990 <vPortSetupTimerInterrupt+0x34>)
 800d962:	2200      	movs	r2, #0
 800d964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d966:	4b0b      	ldr	r3, [pc, #44]	; (800d994 <vPortSetupTimerInterrupt+0x38>)
 800d968:	2200      	movs	r2, #0
 800d96a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d96c:	4b0a      	ldr	r3, [pc, #40]	; (800d998 <vPortSetupTimerInterrupt+0x3c>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	4a0a      	ldr	r2, [pc, #40]	; (800d99c <vPortSetupTimerInterrupt+0x40>)
 800d972:	fba2 2303 	umull	r2, r3, r2, r3
 800d976:	099b      	lsrs	r3, r3, #6
 800d978:	4a09      	ldr	r2, [pc, #36]	; (800d9a0 <vPortSetupTimerInterrupt+0x44>)
 800d97a:	3b01      	subs	r3, #1
 800d97c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d97e:	4b04      	ldr	r3, [pc, #16]	; (800d990 <vPortSetupTimerInterrupt+0x34>)
 800d980:	2207      	movs	r2, #7
 800d982:	601a      	str	r2, [r3, #0]
}
 800d984:	bf00      	nop
 800d986:	46bd      	mov	sp, r7
 800d988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98c:	4770      	bx	lr
 800d98e:	bf00      	nop
 800d990:	e000e010 	.word	0xe000e010
 800d994:	e000e018 	.word	0xe000e018
 800d998:	20000208 	.word	0x20000208
 800d99c:	10624dd3 	.word	0x10624dd3
 800d9a0:	e000e014 	.word	0xe000e014

0800d9a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d9a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d9b4 <vPortEnableVFP+0x10>
 800d9a8:	6801      	ldr	r1, [r0, #0]
 800d9aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d9ae:	6001      	str	r1, [r0, #0]
 800d9b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d9b2:	bf00      	nop
 800d9b4:	e000ed88 	.word	0xe000ed88

0800d9b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d9be:	f3ef 8305 	mrs	r3, IPSR
 800d9c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	2b0f      	cmp	r3, #15
 800d9c8:	d914      	bls.n	800d9f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d9ca:	4a17      	ldr	r2, [pc, #92]	; (800da28 <vPortValidateInterruptPriority+0x70>)
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	781b      	ldrb	r3, [r3, #0]
 800d9d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d9d4:	4b15      	ldr	r3, [pc, #84]	; (800da2c <vPortValidateInterruptPriority+0x74>)
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	7afa      	ldrb	r2, [r7, #11]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d20a      	bcs.n	800d9f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	607b      	str	r3, [r7, #4]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d9f4:	4b0e      	ldr	r3, [pc, #56]	; (800da30 <vPortValidateInterruptPriority+0x78>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d9fc:	4b0d      	ldr	r3, [pc, #52]	; (800da34 <vPortValidateInterruptPriority+0x7c>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	429a      	cmp	r2, r3
 800da02:	d90a      	bls.n	800da1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800da04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da08:	f383 8811 	msr	BASEPRI, r3
 800da0c:	f3bf 8f6f 	isb	sy
 800da10:	f3bf 8f4f 	dsb	sy
 800da14:	603b      	str	r3, [r7, #0]
}
 800da16:	bf00      	nop
 800da18:	e7fe      	b.n	800da18 <vPortValidateInterruptPriority+0x60>
	}
 800da1a:	bf00      	nop
 800da1c:	3714      	adds	r7, #20
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
 800da26:	bf00      	nop
 800da28:	e000e3f0 	.word	0xe000e3f0
 800da2c:	20000f18 	.word	0x20000f18
 800da30:	e000ed0c 	.word	0xe000ed0c
 800da34:	20000f1c 	.word	0x20000f1c

0800da38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da38:	b580      	push	{r7, lr}
 800da3a:	b08a      	sub	sp, #40	; 0x28
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da40:	2300      	movs	r3, #0
 800da42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da44:	f7fe ffde 	bl	800ca04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da48:	4b5b      	ldr	r3, [pc, #364]	; (800dbb8 <pvPortMalloc+0x180>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da50:	f000 f920 	bl	800dc94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da54:	4b59      	ldr	r3, [pc, #356]	; (800dbbc <pvPortMalloc+0x184>)
 800da56:	681a      	ldr	r2, [r3, #0]
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	4013      	ands	r3, r2
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	f040 8093 	bne.w	800db88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01d      	beq.n	800daa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800da68:	2208      	movs	r2, #8
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4413      	add	r3, r2
 800da6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f003 0307 	and.w	r3, r3, #7
 800da76:	2b00      	cmp	r3, #0
 800da78:	d014      	beq.n	800daa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	f023 0307 	bic.w	r3, r3, #7
 800da80:	3308      	adds	r3, #8
 800da82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f003 0307 	and.w	r3, r3, #7
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d00a      	beq.n	800daa4 <pvPortMalloc+0x6c>
	__asm volatile
 800da8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da92:	f383 8811 	msr	BASEPRI, r3
 800da96:	f3bf 8f6f 	isb	sy
 800da9a:	f3bf 8f4f 	dsb	sy
 800da9e:	617b      	str	r3, [r7, #20]
}
 800daa0:	bf00      	nop
 800daa2:	e7fe      	b.n	800daa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d06e      	beq.n	800db88 <pvPortMalloc+0x150>
 800daaa:	4b45      	ldr	r3, [pc, #276]	; (800dbc0 <pvPortMalloc+0x188>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d869      	bhi.n	800db88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dab4:	4b43      	ldr	r3, [pc, #268]	; (800dbc4 <pvPortMalloc+0x18c>)
 800dab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dab8:	4b42      	ldr	r3, [pc, #264]	; (800dbc4 <pvPortMalloc+0x18c>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dabe:	e004      	b.n	800daca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800dac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	687a      	ldr	r2, [r7, #4]
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d903      	bls.n	800dadc <pvPortMalloc+0xa4>
 800dad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d1f1      	bne.n	800dac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dadc:	4b36      	ldr	r3, [pc, #216]	; (800dbb8 <pvPortMalloc+0x180>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d050      	beq.n	800db88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dae6:	6a3b      	ldr	r3, [r7, #32]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	2208      	movs	r2, #8
 800daec:	4413      	add	r3, r2
 800daee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800daf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf2:	681a      	ldr	r2, [r3, #0]
 800daf4:	6a3b      	ldr	r3, [r7, #32]
 800daf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800daf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafa:	685a      	ldr	r2, [r3, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	1ad2      	subs	r2, r2, r3
 800db00:	2308      	movs	r3, #8
 800db02:	005b      	lsls	r3, r3, #1
 800db04:	429a      	cmp	r2, r3
 800db06:	d91f      	bls.n	800db48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4413      	add	r3, r2
 800db0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db10:	69bb      	ldr	r3, [r7, #24]
 800db12:	f003 0307 	and.w	r3, r3, #7
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00a      	beq.n	800db30 <pvPortMalloc+0xf8>
	__asm volatile
 800db1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db1e:	f383 8811 	msr	BASEPRI, r3
 800db22:	f3bf 8f6f 	isb	sy
 800db26:	f3bf 8f4f 	dsb	sy
 800db2a:	613b      	str	r3, [r7, #16]
}
 800db2c:	bf00      	nop
 800db2e:	e7fe      	b.n	800db2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db32:	685a      	ldr	r2, [r3, #4]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	1ad2      	subs	r2, r2, r3
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3e:	687a      	ldr	r2, [r7, #4]
 800db40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db42:	69b8      	ldr	r0, [r7, #24]
 800db44:	f000 f908 	bl	800dd58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db48:	4b1d      	ldr	r3, [pc, #116]	; (800dbc0 <pvPortMalloc+0x188>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	1ad3      	subs	r3, r2, r3
 800db52:	4a1b      	ldr	r2, [pc, #108]	; (800dbc0 <pvPortMalloc+0x188>)
 800db54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db56:	4b1a      	ldr	r3, [pc, #104]	; (800dbc0 <pvPortMalloc+0x188>)
 800db58:	681a      	ldr	r2, [r3, #0]
 800db5a:	4b1b      	ldr	r3, [pc, #108]	; (800dbc8 <pvPortMalloc+0x190>)
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d203      	bcs.n	800db6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db62:	4b17      	ldr	r3, [pc, #92]	; (800dbc0 <pvPortMalloc+0x188>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	4a18      	ldr	r2, [pc, #96]	; (800dbc8 <pvPortMalloc+0x190>)
 800db68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6c:	685a      	ldr	r2, [r3, #4]
 800db6e:	4b13      	ldr	r3, [pc, #76]	; (800dbbc <pvPortMalloc+0x184>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	431a      	orrs	r2, r3
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	2200      	movs	r2, #0
 800db7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800db7e:	4b13      	ldr	r3, [pc, #76]	; (800dbcc <pvPortMalloc+0x194>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	4a11      	ldr	r2, [pc, #68]	; (800dbcc <pvPortMalloc+0x194>)
 800db86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800db88:	f7fe ff4a 	bl	800ca20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	f003 0307 	and.w	r3, r3, #7
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00a      	beq.n	800dbac <pvPortMalloc+0x174>
	__asm volatile
 800db96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db9a:	f383 8811 	msr	BASEPRI, r3
 800db9e:	f3bf 8f6f 	isb	sy
 800dba2:	f3bf 8f4f 	dsb	sy
 800dba6:	60fb      	str	r3, [r7, #12]
}
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <pvPortMalloc+0x172>
	return pvReturn;
 800dbac:	69fb      	ldr	r3, [r7, #28]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3728      	adds	r7, #40	; 0x28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	20004b28 	.word	0x20004b28
 800dbbc:	20004b3c 	.word	0x20004b3c
 800dbc0:	20004b2c 	.word	0x20004b2c
 800dbc4:	20004b20 	.word	0x20004b20
 800dbc8:	20004b30 	.word	0x20004b30
 800dbcc:	20004b34 	.word	0x20004b34

0800dbd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d04d      	beq.n	800dc7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbe2:	2308      	movs	r3, #8
 800dbe4:	425b      	negs	r3, r3
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	4413      	add	r3, r2
 800dbea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	685a      	ldr	r2, [r3, #4]
 800dbf4:	4b24      	ldr	r3, [pc, #144]	; (800dc88 <vPortFree+0xb8>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4013      	ands	r3, r2
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10a      	bne.n	800dc14 <vPortFree+0x44>
	__asm volatile
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	60fb      	str	r3, [r7, #12]
}
 800dc10:	bf00      	nop
 800dc12:	e7fe      	b.n	800dc12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d00a      	beq.n	800dc32 <vPortFree+0x62>
	__asm volatile
 800dc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc20:	f383 8811 	msr	BASEPRI, r3
 800dc24:	f3bf 8f6f 	isb	sy
 800dc28:	f3bf 8f4f 	dsb	sy
 800dc2c:	60bb      	str	r3, [r7, #8]
}
 800dc2e:	bf00      	nop
 800dc30:	e7fe      	b.n	800dc30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	685a      	ldr	r2, [r3, #4]
 800dc36:	4b14      	ldr	r3, [pc, #80]	; (800dc88 <vPortFree+0xb8>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d01e      	beq.n	800dc7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d11a      	bne.n	800dc7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	685a      	ldr	r2, [r3, #4]
 800dc4c:	4b0e      	ldr	r3, [pc, #56]	; (800dc88 <vPortFree+0xb8>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	43db      	mvns	r3, r3
 800dc52:	401a      	ands	r2, r3
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc58:	f7fe fed4 	bl	800ca04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	685a      	ldr	r2, [r3, #4]
 800dc60:	4b0a      	ldr	r3, [pc, #40]	; (800dc8c <vPortFree+0xbc>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4413      	add	r3, r2
 800dc66:	4a09      	ldr	r2, [pc, #36]	; (800dc8c <vPortFree+0xbc>)
 800dc68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc6a:	6938      	ldr	r0, [r7, #16]
 800dc6c:	f000 f874 	bl	800dd58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800dc70:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <vPortFree+0xc0>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	3301      	adds	r3, #1
 800dc76:	4a06      	ldr	r2, [pc, #24]	; (800dc90 <vPortFree+0xc0>)
 800dc78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800dc7a:	f7fe fed1 	bl	800ca20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc7e:	bf00      	nop
 800dc80:	3718      	adds	r7, #24
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	20004b3c 	.word	0x20004b3c
 800dc8c:	20004b2c 	.word	0x20004b2c
 800dc90:	20004b38 	.word	0x20004b38

0800dc94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dc9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dca0:	4b27      	ldr	r3, [pc, #156]	; (800dd40 <prvHeapInit+0xac>)
 800dca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	f003 0307 	and.w	r3, r3, #7
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00c      	beq.n	800dcc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	3307      	adds	r3, #7
 800dcb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f023 0307 	bic.w	r3, r3, #7
 800dcba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	1ad3      	subs	r3, r2, r3
 800dcc2:	4a1f      	ldr	r2, [pc, #124]	; (800dd40 <prvHeapInit+0xac>)
 800dcc4:	4413      	add	r3, r2
 800dcc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dccc:	4a1d      	ldr	r2, [pc, #116]	; (800dd44 <prvHeapInit+0xb0>)
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcd2:	4b1c      	ldr	r3, [pc, #112]	; (800dd44 <prvHeapInit+0xb0>)
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	68ba      	ldr	r2, [r7, #8]
 800dcdc:	4413      	add	r3, r2
 800dcde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dce0:	2208      	movs	r2, #8
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	1a9b      	subs	r3, r3, r2
 800dce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f023 0307 	bic.w	r3, r3, #7
 800dcee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	4a15      	ldr	r2, [pc, #84]	; (800dd48 <prvHeapInit+0xb4>)
 800dcf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcf6:	4b14      	ldr	r3, [pc, #80]	; (800dd48 <prvHeapInit+0xb4>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dcfe:	4b12      	ldr	r3, [pc, #72]	; (800dd48 <prvHeapInit+0xb4>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd0a:	683b      	ldr	r3, [r7, #0]
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	1ad2      	subs	r2, r2, r3
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd14:	4b0c      	ldr	r3, [pc, #48]	; (800dd48 <prvHeapInit+0xb4>)
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	685b      	ldr	r3, [r3, #4]
 800dd20:	4a0a      	ldr	r2, [pc, #40]	; (800dd4c <prvHeapInit+0xb8>)
 800dd22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	4a09      	ldr	r2, [pc, #36]	; (800dd50 <prvHeapInit+0xbc>)
 800dd2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd2c:	4b09      	ldr	r3, [pc, #36]	; (800dd54 <prvHeapInit+0xc0>)
 800dd2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd32:	601a      	str	r2, [r3, #0]
}
 800dd34:	bf00      	nop
 800dd36:	3714      	adds	r7, #20
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr
 800dd40:	20000f20 	.word	0x20000f20
 800dd44:	20004b20 	.word	0x20004b20
 800dd48:	20004b28 	.word	0x20004b28
 800dd4c:	20004b30 	.word	0x20004b30
 800dd50:	20004b2c 	.word	0x20004b2c
 800dd54:	20004b3c 	.word	0x20004b3c

0800dd58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd58:	b480      	push	{r7}
 800dd5a:	b085      	sub	sp, #20
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd60:	4b28      	ldr	r3, [pc, #160]	; (800de04 <prvInsertBlockIntoFreeList+0xac>)
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	e002      	b.n	800dd6c <prvInsertBlockIntoFreeList+0x14>
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	60fb      	str	r3, [r7, #12]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	687a      	ldr	r2, [r7, #4]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	d8f7      	bhi.n	800dd66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	68ba      	ldr	r2, [r7, #8]
 800dd80:	4413      	add	r3, r2
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d108      	bne.n	800dd9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	441a      	add	r2, r3
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	441a      	add	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d118      	bne.n	800dde0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	4b15      	ldr	r3, [pc, #84]	; (800de08 <prvInsertBlockIntoFreeList+0xb0>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d00d      	beq.n	800ddd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	685a      	ldr	r2, [r3, #4]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	441a      	add	r2, r3
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	601a      	str	r2, [r3, #0]
 800ddd4:	e008      	b.n	800dde8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddd6:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <prvInsertBlockIntoFreeList+0xb0>)
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	e003      	b.n	800dde8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dde8:	68fa      	ldr	r2, [r7, #12]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	429a      	cmp	r2, r3
 800ddee:	d002      	beq.n	800ddf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	687a      	ldr	r2, [r7, #4]
 800ddf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddf6:	bf00      	nop
 800ddf8:	3714      	adds	r7, #20
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	20004b20 	.word	0x20004b20
 800de08:	20004b28 	.word	0x20004b28

0800de0c <atoi>:
 800de0c:	220a      	movs	r2, #10
 800de0e:	2100      	movs	r1, #0
 800de10:	f000 ba94 	b.w	800e33c <strtol>

0800de14 <calloc>:
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <calloc+0xc>)
 800de16:	460a      	mov	r2, r1
 800de18:	4601      	mov	r1, r0
 800de1a:	6818      	ldr	r0, [r3, #0]
 800de1c:	f000 b84c 	b.w	800deb8 <_calloc_r>
 800de20:	20000230 	.word	0x20000230

0800de24 <__errno>:
 800de24:	4b01      	ldr	r3, [pc, #4]	; (800de2c <__errno+0x8>)
 800de26:	6818      	ldr	r0, [r3, #0]
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	20000230 	.word	0x20000230

0800de30 <__libc_init_array>:
 800de30:	b570      	push	{r4, r5, r6, lr}
 800de32:	4d0d      	ldr	r5, [pc, #52]	; (800de68 <__libc_init_array+0x38>)
 800de34:	4c0d      	ldr	r4, [pc, #52]	; (800de6c <__libc_init_array+0x3c>)
 800de36:	1b64      	subs	r4, r4, r5
 800de38:	10a4      	asrs	r4, r4, #2
 800de3a:	2600      	movs	r6, #0
 800de3c:	42a6      	cmp	r6, r4
 800de3e:	d109      	bne.n	800de54 <__libc_init_array+0x24>
 800de40:	4d0b      	ldr	r5, [pc, #44]	; (800de70 <__libc_init_array+0x40>)
 800de42:	4c0c      	ldr	r4, [pc, #48]	; (800de74 <__libc_init_array+0x44>)
 800de44:	f000 fdd2 	bl	800e9ec <_init>
 800de48:	1b64      	subs	r4, r4, r5
 800de4a:	10a4      	asrs	r4, r4, #2
 800de4c:	2600      	movs	r6, #0
 800de4e:	42a6      	cmp	r6, r4
 800de50:	d105      	bne.n	800de5e <__libc_init_array+0x2e>
 800de52:	bd70      	pop	{r4, r5, r6, pc}
 800de54:	f855 3b04 	ldr.w	r3, [r5], #4
 800de58:	4798      	blx	r3
 800de5a:	3601      	adds	r6, #1
 800de5c:	e7ee      	b.n	800de3c <__libc_init_array+0xc>
 800de5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de62:	4798      	blx	r3
 800de64:	3601      	adds	r6, #1
 800de66:	e7f2      	b.n	800de4e <__libc_init_array+0x1e>
 800de68:	0800ee4c 	.word	0x0800ee4c
 800de6c:	0800ee4c 	.word	0x0800ee4c
 800de70:	0800ee4c 	.word	0x0800ee4c
 800de74:	0800ee50 	.word	0x0800ee50

0800de78 <__retarget_lock_acquire_recursive>:
 800de78:	4770      	bx	lr

0800de7a <__retarget_lock_release_recursive>:
 800de7a:	4770      	bx	lr

0800de7c <malloc>:
 800de7c:	4b02      	ldr	r3, [pc, #8]	; (800de88 <malloc+0xc>)
 800de7e:	4601      	mov	r1, r0
 800de80:	6818      	ldr	r0, [r3, #0]
 800de82:	f000 b89b 	b.w	800dfbc <_malloc_r>
 800de86:	bf00      	nop
 800de88:	20000230 	.word	0x20000230

0800de8c <memcpy>:
 800de8c:	440a      	add	r2, r1
 800de8e:	4291      	cmp	r1, r2
 800de90:	f100 33ff 	add.w	r3, r0, #4294967295
 800de94:	d100      	bne.n	800de98 <memcpy+0xc>
 800de96:	4770      	bx	lr
 800de98:	b510      	push	{r4, lr}
 800de9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dea2:	4291      	cmp	r1, r2
 800dea4:	d1f9      	bne.n	800de9a <memcpy+0xe>
 800dea6:	bd10      	pop	{r4, pc}

0800dea8 <memset>:
 800dea8:	4402      	add	r2, r0
 800deaa:	4603      	mov	r3, r0
 800deac:	4293      	cmp	r3, r2
 800deae:	d100      	bne.n	800deb2 <memset+0xa>
 800deb0:	4770      	bx	lr
 800deb2:	f803 1b01 	strb.w	r1, [r3], #1
 800deb6:	e7f9      	b.n	800deac <memset+0x4>

0800deb8 <_calloc_r>:
 800deb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deba:	fba1 2402 	umull	r2, r4, r1, r2
 800debe:	b94c      	cbnz	r4, 800ded4 <_calloc_r+0x1c>
 800dec0:	4611      	mov	r1, r2
 800dec2:	9201      	str	r2, [sp, #4]
 800dec4:	f000 f87a 	bl	800dfbc <_malloc_r>
 800dec8:	9a01      	ldr	r2, [sp, #4]
 800deca:	4605      	mov	r5, r0
 800decc:	b930      	cbnz	r0, 800dedc <_calloc_r+0x24>
 800dece:	4628      	mov	r0, r5
 800ded0:	b003      	add	sp, #12
 800ded2:	bd30      	pop	{r4, r5, pc}
 800ded4:	220c      	movs	r2, #12
 800ded6:	6002      	str	r2, [r0, #0]
 800ded8:	2500      	movs	r5, #0
 800deda:	e7f8      	b.n	800dece <_calloc_r+0x16>
 800dedc:	4621      	mov	r1, r4
 800dede:	f7ff ffe3 	bl	800dea8 <memset>
 800dee2:	e7f4      	b.n	800dece <_calloc_r+0x16>

0800dee4 <_free_r>:
 800dee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dee6:	2900      	cmp	r1, #0
 800dee8:	d044      	beq.n	800df74 <_free_r+0x90>
 800deea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deee:	9001      	str	r0, [sp, #4]
 800def0:	2b00      	cmp	r3, #0
 800def2:	f1a1 0404 	sub.w	r4, r1, #4
 800def6:	bfb8      	it	lt
 800def8:	18e4      	addlt	r4, r4, r3
 800defa:	f000 fa29 	bl	800e350 <__malloc_lock>
 800defe:	4a1e      	ldr	r2, [pc, #120]	; (800df78 <_free_r+0x94>)
 800df00:	9801      	ldr	r0, [sp, #4]
 800df02:	6813      	ldr	r3, [r2, #0]
 800df04:	b933      	cbnz	r3, 800df14 <_free_r+0x30>
 800df06:	6063      	str	r3, [r4, #4]
 800df08:	6014      	str	r4, [r2, #0]
 800df0a:	b003      	add	sp, #12
 800df0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df10:	f000 ba24 	b.w	800e35c <__malloc_unlock>
 800df14:	42a3      	cmp	r3, r4
 800df16:	d908      	bls.n	800df2a <_free_r+0x46>
 800df18:	6825      	ldr	r5, [r4, #0]
 800df1a:	1961      	adds	r1, r4, r5
 800df1c:	428b      	cmp	r3, r1
 800df1e:	bf01      	itttt	eq
 800df20:	6819      	ldreq	r1, [r3, #0]
 800df22:	685b      	ldreq	r3, [r3, #4]
 800df24:	1949      	addeq	r1, r1, r5
 800df26:	6021      	streq	r1, [r4, #0]
 800df28:	e7ed      	b.n	800df06 <_free_r+0x22>
 800df2a:	461a      	mov	r2, r3
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	b10b      	cbz	r3, 800df34 <_free_r+0x50>
 800df30:	42a3      	cmp	r3, r4
 800df32:	d9fa      	bls.n	800df2a <_free_r+0x46>
 800df34:	6811      	ldr	r1, [r2, #0]
 800df36:	1855      	adds	r5, r2, r1
 800df38:	42a5      	cmp	r5, r4
 800df3a:	d10b      	bne.n	800df54 <_free_r+0x70>
 800df3c:	6824      	ldr	r4, [r4, #0]
 800df3e:	4421      	add	r1, r4
 800df40:	1854      	adds	r4, r2, r1
 800df42:	42a3      	cmp	r3, r4
 800df44:	6011      	str	r1, [r2, #0]
 800df46:	d1e0      	bne.n	800df0a <_free_r+0x26>
 800df48:	681c      	ldr	r4, [r3, #0]
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	6053      	str	r3, [r2, #4]
 800df4e:	4421      	add	r1, r4
 800df50:	6011      	str	r1, [r2, #0]
 800df52:	e7da      	b.n	800df0a <_free_r+0x26>
 800df54:	d902      	bls.n	800df5c <_free_r+0x78>
 800df56:	230c      	movs	r3, #12
 800df58:	6003      	str	r3, [r0, #0]
 800df5a:	e7d6      	b.n	800df0a <_free_r+0x26>
 800df5c:	6825      	ldr	r5, [r4, #0]
 800df5e:	1961      	adds	r1, r4, r5
 800df60:	428b      	cmp	r3, r1
 800df62:	bf04      	itt	eq
 800df64:	6819      	ldreq	r1, [r3, #0]
 800df66:	685b      	ldreq	r3, [r3, #4]
 800df68:	6063      	str	r3, [r4, #4]
 800df6a:	bf04      	itt	eq
 800df6c:	1949      	addeq	r1, r1, r5
 800df6e:	6021      	streq	r1, [r4, #0]
 800df70:	6054      	str	r4, [r2, #4]
 800df72:	e7ca      	b.n	800df0a <_free_r+0x26>
 800df74:	b003      	add	sp, #12
 800df76:	bd30      	pop	{r4, r5, pc}
 800df78:	20004b44 	.word	0x20004b44

0800df7c <sbrk_aligned>:
 800df7c:	b570      	push	{r4, r5, r6, lr}
 800df7e:	4e0e      	ldr	r6, [pc, #56]	; (800dfb8 <sbrk_aligned+0x3c>)
 800df80:	460c      	mov	r4, r1
 800df82:	6831      	ldr	r1, [r6, #0]
 800df84:	4605      	mov	r5, r0
 800df86:	b911      	cbnz	r1, 800df8e <sbrk_aligned+0x12>
 800df88:	f000 f8f6 	bl	800e178 <_sbrk_r>
 800df8c:	6030      	str	r0, [r6, #0]
 800df8e:	4621      	mov	r1, r4
 800df90:	4628      	mov	r0, r5
 800df92:	f000 f8f1 	bl	800e178 <_sbrk_r>
 800df96:	1c43      	adds	r3, r0, #1
 800df98:	d00a      	beq.n	800dfb0 <sbrk_aligned+0x34>
 800df9a:	1cc4      	adds	r4, r0, #3
 800df9c:	f024 0403 	bic.w	r4, r4, #3
 800dfa0:	42a0      	cmp	r0, r4
 800dfa2:	d007      	beq.n	800dfb4 <sbrk_aligned+0x38>
 800dfa4:	1a21      	subs	r1, r4, r0
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	f000 f8e6 	bl	800e178 <_sbrk_r>
 800dfac:	3001      	adds	r0, #1
 800dfae:	d101      	bne.n	800dfb4 <sbrk_aligned+0x38>
 800dfb0:	f04f 34ff 	mov.w	r4, #4294967295
 800dfb4:	4620      	mov	r0, r4
 800dfb6:	bd70      	pop	{r4, r5, r6, pc}
 800dfb8:	20004b48 	.word	0x20004b48

0800dfbc <_malloc_r>:
 800dfbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfc0:	1ccd      	adds	r5, r1, #3
 800dfc2:	f025 0503 	bic.w	r5, r5, #3
 800dfc6:	3508      	adds	r5, #8
 800dfc8:	2d0c      	cmp	r5, #12
 800dfca:	bf38      	it	cc
 800dfcc:	250c      	movcc	r5, #12
 800dfce:	2d00      	cmp	r5, #0
 800dfd0:	4607      	mov	r7, r0
 800dfd2:	db01      	blt.n	800dfd8 <_malloc_r+0x1c>
 800dfd4:	42a9      	cmp	r1, r5
 800dfd6:	d905      	bls.n	800dfe4 <_malloc_r+0x28>
 800dfd8:	230c      	movs	r3, #12
 800dfda:	603b      	str	r3, [r7, #0]
 800dfdc:	2600      	movs	r6, #0
 800dfde:	4630      	mov	r0, r6
 800dfe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfe4:	4e2e      	ldr	r6, [pc, #184]	; (800e0a0 <_malloc_r+0xe4>)
 800dfe6:	f000 f9b3 	bl	800e350 <__malloc_lock>
 800dfea:	6833      	ldr	r3, [r6, #0]
 800dfec:	461c      	mov	r4, r3
 800dfee:	bb34      	cbnz	r4, 800e03e <_malloc_r+0x82>
 800dff0:	4629      	mov	r1, r5
 800dff2:	4638      	mov	r0, r7
 800dff4:	f7ff ffc2 	bl	800df7c <sbrk_aligned>
 800dff8:	1c43      	adds	r3, r0, #1
 800dffa:	4604      	mov	r4, r0
 800dffc:	d14d      	bne.n	800e09a <_malloc_r+0xde>
 800dffe:	6834      	ldr	r4, [r6, #0]
 800e000:	4626      	mov	r6, r4
 800e002:	2e00      	cmp	r6, #0
 800e004:	d140      	bne.n	800e088 <_malloc_r+0xcc>
 800e006:	6823      	ldr	r3, [r4, #0]
 800e008:	4631      	mov	r1, r6
 800e00a:	4638      	mov	r0, r7
 800e00c:	eb04 0803 	add.w	r8, r4, r3
 800e010:	f000 f8b2 	bl	800e178 <_sbrk_r>
 800e014:	4580      	cmp	r8, r0
 800e016:	d13a      	bne.n	800e08e <_malloc_r+0xd2>
 800e018:	6821      	ldr	r1, [r4, #0]
 800e01a:	3503      	adds	r5, #3
 800e01c:	1a6d      	subs	r5, r5, r1
 800e01e:	f025 0503 	bic.w	r5, r5, #3
 800e022:	3508      	adds	r5, #8
 800e024:	2d0c      	cmp	r5, #12
 800e026:	bf38      	it	cc
 800e028:	250c      	movcc	r5, #12
 800e02a:	4629      	mov	r1, r5
 800e02c:	4638      	mov	r0, r7
 800e02e:	f7ff ffa5 	bl	800df7c <sbrk_aligned>
 800e032:	3001      	adds	r0, #1
 800e034:	d02b      	beq.n	800e08e <_malloc_r+0xd2>
 800e036:	6823      	ldr	r3, [r4, #0]
 800e038:	442b      	add	r3, r5
 800e03a:	6023      	str	r3, [r4, #0]
 800e03c:	e00e      	b.n	800e05c <_malloc_r+0xa0>
 800e03e:	6822      	ldr	r2, [r4, #0]
 800e040:	1b52      	subs	r2, r2, r5
 800e042:	d41e      	bmi.n	800e082 <_malloc_r+0xc6>
 800e044:	2a0b      	cmp	r2, #11
 800e046:	d916      	bls.n	800e076 <_malloc_r+0xba>
 800e048:	1961      	adds	r1, r4, r5
 800e04a:	42a3      	cmp	r3, r4
 800e04c:	6025      	str	r5, [r4, #0]
 800e04e:	bf18      	it	ne
 800e050:	6059      	strne	r1, [r3, #4]
 800e052:	6863      	ldr	r3, [r4, #4]
 800e054:	bf08      	it	eq
 800e056:	6031      	streq	r1, [r6, #0]
 800e058:	5162      	str	r2, [r4, r5]
 800e05a:	604b      	str	r3, [r1, #4]
 800e05c:	4638      	mov	r0, r7
 800e05e:	f104 060b 	add.w	r6, r4, #11
 800e062:	f000 f97b 	bl	800e35c <__malloc_unlock>
 800e066:	f026 0607 	bic.w	r6, r6, #7
 800e06a:	1d23      	adds	r3, r4, #4
 800e06c:	1af2      	subs	r2, r6, r3
 800e06e:	d0b6      	beq.n	800dfde <_malloc_r+0x22>
 800e070:	1b9b      	subs	r3, r3, r6
 800e072:	50a3      	str	r3, [r4, r2]
 800e074:	e7b3      	b.n	800dfde <_malloc_r+0x22>
 800e076:	6862      	ldr	r2, [r4, #4]
 800e078:	42a3      	cmp	r3, r4
 800e07a:	bf0c      	ite	eq
 800e07c:	6032      	streq	r2, [r6, #0]
 800e07e:	605a      	strne	r2, [r3, #4]
 800e080:	e7ec      	b.n	800e05c <_malloc_r+0xa0>
 800e082:	4623      	mov	r3, r4
 800e084:	6864      	ldr	r4, [r4, #4]
 800e086:	e7b2      	b.n	800dfee <_malloc_r+0x32>
 800e088:	4634      	mov	r4, r6
 800e08a:	6876      	ldr	r6, [r6, #4]
 800e08c:	e7b9      	b.n	800e002 <_malloc_r+0x46>
 800e08e:	230c      	movs	r3, #12
 800e090:	603b      	str	r3, [r7, #0]
 800e092:	4638      	mov	r0, r7
 800e094:	f000 f962 	bl	800e35c <__malloc_unlock>
 800e098:	e7a1      	b.n	800dfde <_malloc_r+0x22>
 800e09a:	6025      	str	r5, [r4, #0]
 800e09c:	e7de      	b.n	800e05c <_malloc_r+0xa0>
 800e09e:	bf00      	nop
 800e0a0:	20004b44 	.word	0x20004b44

0800e0a4 <cleanup_glue>:
 800e0a4:	b538      	push	{r3, r4, r5, lr}
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	6809      	ldr	r1, [r1, #0]
 800e0aa:	4605      	mov	r5, r0
 800e0ac:	b109      	cbz	r1, 800e0b2 <cleanup_glue+0xe>
 800e0ae:	f7ff fff9 	bl	800e0a4 <cleanup_glue>
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0ba:	f7ff bf13 	b.w	800dee4 <_free_r>
	...

0800e0c0 <_reclaim_reent>:
 800e0c0:	4b2c      	ldr	r3, [pc, #176]	; (800e174 <_reclaim_reent+0xb4>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	4283      	cmp	r3, r0
 800e0c6:	b570      	push	{r4, r5, r6, lr}
 800e0c8:	4604      	mov	r4, r0
 800e0ca:	d051      	beq.n	800e170 <_reclaim_reent+0xb0>
 800e0cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800e0ce:	b143      	cbz	r3, 800e0e2 <_reclaim_reent+0x22>
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d14a      	bne.n	800e16c <_reclaim_reent+0xac>
 800e0d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0d8:	6819      	ldr	r1, [r3, #0]
 800e0da:	b111      	cbz	r1, 800e0e2 <_reclaim_reent+0x22>
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f7ff ff01 	bl	800dee4 <_free_r>
 800e0e2:	6961      	ldr	r1, [r4, #20]
 800e0e4:	b111      	cbz	r1, 800e0ec <_reclaim_reent+0x2c>
 800e0e6:	4620      	mov	r0, r4
 800e0e8:	f7ff fefc 	bl	800dee4 <_free_r>
 800e0ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800e0ee:	b111      	cbz	r1, 800e0f6 <_reclaim_reent+0x36>
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f7ff fef7 	bl	800dee4 <_free_r>
 800e0f6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e0f8:	b111      	cbz	r1, 800e100 <_reclaim_reent+0x40>
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	f7ff fef2 	bl	800dee4 <_free_r>
 800e100:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800e102:	b111      	cbz	r1, 800e10a <_reclaim_reent+0x4a>
 800e104:	4620      	mov	r0, r4
 800e106:	f7ff feed 	bl	800dee4 <_free_r>
 800e10a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800e10c:	b111      	cbz	r1, 800e114 <_reclaim_reent+0x54>
 800e10e:	4620      	mov	r0, r4
 800e110:	f7ff fee8 	bl	800dee4 <_free_r>
 800e114:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800e116:	b111      	cbz	r1, 800e11e <_reclaim_reent+0x5e>
 800e118:	4620      	mov	r0, r4
 800e11a:	f7ff fee3 	bl	800dee4 <_free_r>
 800e11e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800e120:	b111      	cbz	r1, 800e128 <_reclaim_reent+0x68>
 800e122:	4620      	mov	r0, r4
 800e124:	f7ff fede 	bl	800dee4 <_free_r>
 800e128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e12a:	b111      	cbz	r1, 800e132 <_reclaim_reent+0x72>
 800e12c:	4620      	mov	r0, r4
 800e12e:	f7ff fed9 	bl	800dee4 <_free_r>
 800e132:	69a3      	ldr	r3, [r4, #24]
 800e134:	b1e3      	cbz	r3, 800e170 <_reclaim_reent+0xb0>
 800e136:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e138:	4620      	mov	r0, r4
 800e13a:	4798      	blx	r3
 800e13c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800e13e:	b1b9      	cbz	r1, 800e170 <_reclaim_reent+0xb0>
 800e140:	4620      	mov	r0, r4
 800e142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e146:	f7ff bfad 	b.w	800e0a4 <cleanup_glue>
 800e14a:	5949      	ldr	r1, [r1, r5]
 800e14c:	b941      	cbnz	r1, 800e160 <_reclaim_reent+0xa0>
 800e14e:	3504      	adds	r5, #4
 800e150:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e152:	2d80      	cmp	r5, #128	; 0x80
 800e154:	68d9      	ldr	r1, [r3, #12]
 800e156:	d1f8      	bne.n	800e14a <_reclaim_reent+0x8a>
 800e158:	4620      	mov	r0, r4
 800e15a:	f7ff fec3 	bl	800dee4 <_free_r>
 800e15e:	e7ba      	b.n	800e0d6 <_reclaim_reent+0x16>
 800e160:	680e      	ldr	r6, [r1, #0]
 800e162:	4620      	mov	r0, r4
 800e164:	f7ff febe 	bl	800dee4 <_free_r>
 800e168:	4631      	mov	r1, r6
 800e16a:	e7ef      	b.n	800e14c <_reclaim_reent+0x8c>
 800e16c:	2500      	movs	r5, #0
 800e16e:	e7ef      	b.n	800e150 <_reclaim_reent+0x90>
 800e170:	bd70      	pop	{r4, r5, r6, pc}
 800e172:	bf00      	nop
 800e174:	20000230 	.word	0x20000230

0800e178 <_sbrk_r>:
 800e178:	b538      	push	{r3, r4, r5, lr}
 800e17a:	4d06      	ldr	r5, [pc, #24]	; (800e194 <_sbrk_r+0x1c>)
 800e17c:	2300      	movs	r3, #0
 800e17e:	4604      	mov	r4, r0
 800e180:	4608      	mov	r0, r1
 800e182:	602b      	str	r3, [r5, #0]
 800e184:	f7f5 fce8 	bl	8003b58 <_sbrk>
 800e188:	1c43      	adds	r3, r0, #1
 800e18a:	d102      	bne.n	800e192 <_sbrk_r+0x1a>
 800e18c:	682b      	ldr	r3, [r5, #0]
 800e18e:	b103      	cbz	r3, 800e192 <_sbrk_r+0x1a>
 800e190:	6023      	str	r3, [r4, #0]
 800e192:	bd38      	pop	{r3, r4, r5, pc}
 800e194:	20004b4c 	.word	0x20004b4c

0800e198 <siprintf>:
 800e198:	b40e      	push	{r1, r2, r3}
 800e19a:	b500      	push	{lr}
 800e19c:	b09c      	sub	sp, #112	; 0x70
 800e19e:	ab1d      	add	r3, sp, #116	; 0x74
 800e1a0:	9002      	str	r0, [sp, #8]
 800e1a2:	9006      	str	r0, [sp, #24]
 800e1a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1a8:	4809      	ldr	r0, [pc, #36]	; (800e1d0 <siprintf+0x38>)
 800e1aa:	9107      	str	r1, [sp, #28]
 800e1ac:	9104      	str	r1, [sp, #16]
 800e1ae:	4909      	ldr	r1, [pc, #36]	; (800e1d4 <siprintf+0x3c>)
 800e1b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b4:	9105      	str	r1, [sp, #20]
 800e1b6:	6800      	ldr	r0, [r0, #0]
 800e1b8:	9301      	str	r3, [sp, #4]
 800e1ba:	a902      	add	r1, sp, #8
 800e1bc:	f000 f930 	bl	800e420 <_svfiprintf_r>
 800e1c0:	9b02      	ldr	r3, [sp, #8]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	701a      	strb	r2, [r3, #0]
 800e1c6:	b01c      	add	sp, #112	; 0x70
 800e1c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1cc:	b003      	add	sp, #12
 800e1ce:	4770      	bx	lr
 800e1d0:	20000230 	.word	0x20000230
 800e1d4:	ffff0208 	.word	0xffff0208

0800e1d8 <strcpy>:
 800e1d8:	4603      	mov	r3, r0
 800e1da:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e1de:	f803 2b01 	strb.w	r2, [r3], #1
 800e1e2:	2a00      	cmp	r2, #0
 800e1e4:	d1f9      	bne.n	800e1da <strcpy+0x2>
 800e1e6:	4770      	bx	lr

0800e1e8 <strncmp>:
 800e1e8:	b510      	push	{r4, lr}
 800e1ea:	b17a      	cbz	r2, 800e20c <strncmp+0x24>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	3901      	subs	r1, #1
 800e1f0:	1884      	adds	r4, r0, r2
 800e1f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e1f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e1fa:	4290      	cmp	r0, r2
 800e1fc:	d101      	bne.n	800e202 <strncmp+0x1a>
 800e1fe:	42a3      	cmp	r3, r4
 800e200:	d101      	bne.n	800e206 <strncmp+0x1e>
 800e202:	1a80      	subs	r0, r0, r2
 800e204:	bd10      	pop	{r4, pc}
 800e206:	2800      	cmp	r0, #0
 800e208:	d1f3      	bne.n	800e1f2 <strncmp+0xa>
 800e20a:	e7fa      	b.n	800e202 <strncmp+0x1a>
 800e20c:	4610      	mov	r0, r2
 800e20e:	e7f9      	b.n	800e204 <strncmp+0x1c>

0800e210 <strncpy>:
 800e210:	b510      	push	{r4, lr}
 800e212:	3901      	subs	r1, #1
 800e214:	4603      	mov	r3, r0
 800e216:	b132      	cbz	r2, 800e226 <strncpy+0x16>
 800e218:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e21c:	f803 4b01 	strb.w	r4, [r3], #1
 800e220:	3a01      	subs	r2, #1
 800e222:	2c00      	cmp	r4, #0
 800e224:	d1f7      	bne.n	800e216 <strncpy+0x6>
 800e226:	441a      	add	r2, r3
 800e228:	2100      	movs	r1, #0
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d100      	bne.n	800e230 <strncpy+0x20>
 800e22e:	bd10      	pop	{r4, pc}
 800e230:	f803 1b01 	strb.w	r1, [r3], #1
 800e234:	e7f9      	b.n	800e22a <strncpy+0x1a>
	...

0800e238 <_strtol_l.constprop.0>:
 800e238:	2b01      	cmp	r3, #1
 800e23a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e23e:	d001      	beq.n	800e244 <_strtol_l.constprop.0+0xc>
 800e240:	2b24      	cmp	r3, #36	; 0x24
 800e242:	d906      	bls.n	800e252 <_strtol_l.constprop.0+0x1a>
 800e244:	f7ff fdee 	bl	800de24 <__errno>
 800e248:	2316      	movs	r3, #22
 800e24a:	6003      	str	r3, [r0, #0]
 800e24c:	2000      	movs	r0, #0
 800e24e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e252:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e338 <_strtol_l.constprop.0+0x100>
 800e256:	460d      	mov	r5, r1
 800e258:	462e      	mov	r6, r5
 800e25a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e25e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e262:	f017 0708 	ands.w	r7, r7, #8
 800e266:	d1f7      	bne.n	800e258 <_strtol_l.constprop.0+0x20>
 800e268:	2c2d      	cmp	r4, #45	; 0x2d
 800e26a:	d132      	bne.n	800e2d2 <_strtol_l.constprop.0+0x9a>
 800e26c:	782c      	ldrb	r4, [r5, #0]
 800e26e:	2701      	movs	r7, #1
 800e270:	1cb5      	adds	r5, r6, #2
 800e272:	2b00      	cmp	r3, #0
 800e274:	d05b      	beq.n	800e32e <_strtol_l.constprop.0+0xf6>
 800e276:	2b10      	cmp	r3, #16
 800e278:	d109      	bne.n	800e28e <_strtol_l.constprop.0+0x56>
 800e27a:	2c30      	cmp	r4, #48	; 0x30
 800e27c:	d107      	bne.n	800e28e <_strtol_l.constprop.0+0x56>
 800e27e:	782c      	ldrb	r4, [r5, #0]
 800e280:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e284:	2c58      	cmp	r4, #88	; 0x58
 800e286:	d14d      	bne.n	800e324 <_strtol_l.constprop.0+0xec>
 800e288:	786c      	ldrb	r4, [r5, #1]
 800e28a:	2310      	movs	r3, #16
 800e28c:	3502      	adds	r5, #2
 800e28e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e292:	f108 38ff 	add.w	r8, r8, #4294967295
 800e296:	f04f 0c00 	mov.w	ip, #0
 800e29a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e29e:	4666      	mov	r6, ip
 800e2a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800e2a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e2a8:	f1be 0f09 	cmp.w	lr, #9
 800e2ac:	d816      	bhi.n	800e2dc <_strtol_l.constprop.0+0xa4>
 800e2ae:	4674      	mov	r4, lr
 800e2b0:	42a3      	cmp	r3, r4
 800e2b2:	dd24      	ble.n	800e2fe <_strtol_l.constprop.0+0xc6>
 800e2b4:	f1bc 0f00 	cmp.w	ip, #0
 800e2b8:	db1e      	blt.n	800e2f8 <_strtol_l.constprop.0+0xc0>
 800e2ba:	45b1      	cmp	r9, r6
 800e2bc:	d31c      	bcc.n	800e2f8 <_strtol_l.constprop.0+0xc0>
 800e2be:	d101      	bne.n	800e2c4 <_strtol_l.constprop.0+0x8c>
 800e2c0:	45a2      	cmp	sl, r4
 800e2c2:	db19      	blt.n	800e2f8 <_strtol_l.constprop.0+0xc0>
 800e2c4:	fb06 4603 	mla	r6, r6, r3, r4
 800e2c8:	f04f 0c01 	mov.w	ip, #1
 800e2cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2d0:	e7e8      	b.n	800e2a4 <_strtol_l.constprop.0+0x6c>
 800e2d2:	2c2b      	cmp	r4, #43	; 0x2b
 800e2d4:	bf04      	itt	eq
 800e2d6:	782c      	ldrbeq	r4, [r5, #0]
 800e2d8:	1cb5      	addeq	r5, r6, #2
 800e2da:	e7ca      	b.n	800e272 <_strtol_l.constprop.0+0x3a>
 800e2dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e2e0:	f1be 0f19 	cmp.w	lr, #25
 800e2e4:	d801      	bhi.n	800e2ea <_strtol_l.constprop.0+0xb2>
 800e2e6:	3c37      	subs	r4, #55	; 0x37
 800e2e8:	e7e2      	b.n	800e2b0 <_strtol_l.constprop.0+0x78>
 800e2ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e2ee:	f1be 0f19 	cmp.w	lr, #25
 800e2f2:	d804      	bhi.n	800e2fe <_strtol_l.constprop.0+0xc6>
 800e2f4:	3c57      	subs	r4, #87	; 0x57
 800e2f6:	e7db      	b.n	800e2b0 <_strtol_l.constprop.0+0x78>
 800e2f8:	f04f 3cff 	mov.w	ip, #4294967295
 800e2fc:	e7e6      	b.n	800e2cc <_strtol_l.constprop.0+0x94>
 800e2fe:	f1bc 0f00 	cmp.w	ip, #0
 800e302:	da05      	bge.n	800e310 <_strtol_l.constprop.0+0xd8>
 800e304:	2322      	movs	r3, #34	; 0x22
 800e306:	6003      	str	r3, [r0, #0]
 800e308:	4646      	mov	r6, r8
 800e30a:	b942      	cbnz	r2, 800e31e <_strtol_l.constprop.0+0xe6>
 800e30c:	4630      	mov	r0, r6
 800e30e:	e79e      	b.n	800e24e <_strtol_l.constprop.0+0x16>
 800e310:	b107      	cbz	r7, 800e314 <_strtol_l.constprop.0+0xdc>
 800e312:	4276      	negs	r6, r6
 800e314:	2a00      	cmp	r2, #0
 800e316:	d0f9      	beq.n	800e30c <_strtol_l.constprop.0+0xd4>
 800e318:	f1bc 0f00 	cmp.w	ip, #0
 800e31c:	d000      	beq.n	800e320 <_strtol_l.constprop.0+0xe8>
 800e31e:	1e69      	subs	r1, r5, #1
 800e320:	6011      	str	r1, [r2, #0]
 800e322:	e7f3      	b.n	800e30c <_strtol_l.constprop.0+0xd4>
 800e324:	2430      	movs	r4, #48	; 0x30
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1b1      	bne.n	800e28e <_strtol_l.constprop.0+0x56>
 800e32a:	2308      	movs	r3, #8
 800e32c:	e7af      	b.n	800e28e <_strtol_l.constprop.0+0x56>
 800e32e:	2c30      	cmp	r4, #48	; 0x30
 800e330:	d0a5      	beq.n	800e27e <_strtol_l.constprop.0+0x46>
 800e332:	230a      	movs	r3, #10
 800e334:	e7ab      	b.n	800e28e <_strtol_l.constprop.0+0x56>
 800e336:	bf00      	nop
 800e338:	0800ed11 	.word	0x0800ed11

0800e33c <strtol>:
 800e33c:	4613      	mov	r3, r2
 800e33e:	460a      	mov	r2, r1
 800e340:	4601      	mov	r1, r0
 800e342:	4802      	ldr	r0, [pc, #8]	; (800e34c <strtol+0x10>)
 800e344:	6800      	ldr	r0, [r0, #0]
 800e346:	f7ff bf77 	b.w	800e238 <_strtol_l.constprop.0>
 800e34a:	bf00      	nop
 800e34c:	20000230 	.word	0x20000230

0800e350 <__malloc_lock>:
 800e350:	4801      	ldr	r0, [pc, #4]	; (800e358 <__malloc_lock+0x8>)
 800e352:	f7ff bd91 	b.w	800de78 <__retarget_lock_acquire_recursive>
 800e356:	bf00      	nop
 800e358:	20004b40 	.word	0x20004b40

0800e35c <__malloc_unlock>:
 800e35c:	4801      	ldr	r0, [pc, #4]	; (800e364 <__malloc_unlock+0x8>)
 800e35e:	f7ff bd8c 	b.w	800de7a <__retarget_lock_release_recursive>
 800e362:	bf00      	nop
 800e364:	20004b40 	.word	0x20004b40

0800e368 <__ssputs_r>:
 800e368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e36c:	688e      	ldr	r6, [r1, #8]
 800e36e:	429e      	cmp	r6, r3
 800e370:	4682      	mov	sl, r0
 800e372:	460c      	mov	r4, r1
 800e374:	4690      	mov	r8, r2
 800e376:	461f      	mov	r7, r3
 800e378:	d838      	bhi.n	800e3ec <__ssputs_r+0x84>
 800e37a:	898a      	ldrh	r2, [r1, #12]
 800e37c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e380:	d032      	beq.n	800e3e8 <__ssputs_r+0x80>
 800e382:	6825      	ldr	r5, [r4, #0]
 800e384:	6909      	ldr	r1, [r1, #16]
 800e386:	eba5 0901 	sub.w	r9, r5, r1
 800e38a:	6965      	ldr	r5, [r4, #20]
 800e38c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e390:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e394:	3301      	adds	r3, #1
 800e396:	444b      	add	r3, r9
 800e398:	106d      	asrs	r5, r5, #1
 800e39a:	429d      	cmp	r5, r3
 800e39c:	bf38      	it	cc
 800e39e:	461d      	movcc	r5, r3
 800e3a0:	0553      	lsls	r3, r2, #21
 800e3a2:	d531      	bpl.n	800e408 <__ssputs_r+0xa0>
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	f7ff fe09 	bl	800dfbc <_malloc_r>
 800e3aa:	4606      	mov	r6, r0
 800e3ac:	b950      	cbnz	r0, 800e3c4 <__ssputs_r+0x5c>
 800e3ae:	230c      	movs	r3, #12
 800e3b0:	f8ca 3000 	str.w	r3, [sl]
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3ba:	81a3      	strh	r3, [r4, #12]
 800e3bc:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c4:	6921      	ldr	r1, [r4, #16]
 800e3c6:	464a      	mov	r2, r9
 800e3c8:	f7ff fd60 	bl	800de8c <memcpy>
 800e3cc:	89a3      	ldrh	r3, [r4, #12]
 800e3ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e3d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3d6:	81a3      	strh	r3, [r4, #12]
 800e3d8:	6126      	str	r6, [r4, #16]
 800e3da:	6165      	str	r5, [r4, #20]
 800e3dc:	444e      	add	r6, r9
 800e3de:	eba5 0509 	sub.w	r5, r5, r9
 800e3e2:	6026      	str	r6, [r4, #0]
 800e3e4:	60a5      	str	r5, [r4, #8]
 800e3e6:	463e      	mov	r6, r7
 800e3e8:	42be      	cmp	r6, r7
 800e3ea:	d900      	bls.n	800e3ee <__ssputs_r+0x86>
 800e3ec:	463e      	mov	r6, r7
 800e3ee:	6820      	ldr	r0, [r4, #0]
 800e3f0:	4632      	mov	r2, r6
 800e3f2:	4641      	mov	r1, r8
 800e3f4:	f000 faa8 	bl	800e948 <memmove>
 800e3f8:	68a3      	ldr	r3, [r4, #8]
 800e3fa:	1b9b      	subs	r3, r3, r6
 800e3fc:	60a3      	str	r3, [r4, #8]
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	4433      	add	r3, r6
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	2000      	movs	r0, #0
 800e406:	e7db      	b.n	800e3c0 <__ssputs_r+0x58>
 800e408:	462a      	mov	r2, r5
 800e40a:	f000 fab7 	bl	800e97c <_realloc_r>
 800e40e:	4606      	mov	r6, r0
 800e410:	2800      	cmp	r0, #0
 800e412:	d1e1      	bne.n	800e3d8 <__ssputs_r+0x70>
 800e414:	6921      	ldr	r1, [r4, #16]
 800e416:	4650      	mov	r0, sl
 800e418:	f7ff fd64 	bl	800dee4 <_free_r>
 800e41c:	e7c7      	b.n	800e3ae <__ssputs_r+0x46>
	...

0800e420 <_svfiprintf_r>:
 800e420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e424:	4698      	mov	r8, r3
 800e426:	898b      	ldrh	r3, [r1, #12]
 800e428:	061b      	lsls	r3, r3, #24
 800e42a:	b09d      	sub	sp, #116	; 0x74
 800e42c:	4607      	mov	r7, r0
 800e42e:	460d      	mov	r5, r1
 800e430:	4614      	mov	r4, r2
 800e432:	d50e      	bpl.n	800e452 <_svfiprintf_r+0x32>
 800e434:	690b      	ldr	r3, [r1, #16]
 800e436:	b963      	cbnz	r3, 800e452 <_svfiprintf_r+0x32>
 800e438:	2140      	movs	r1, #64	; 0x40
 800e43a:	f7ff fdbf 	bl	800dfbc <_malloc_r>
 800e43e:	6028      	str	r0, [r5, #0]
 800e440:	6128      	str	r0, [r5, #16]
 800e442:	b920      	cbnz	r0, 800e44e <_svfiprintf_r+0x2e>
 800e444:	230c      	movs	r3, #12
 800e446:	603b      	str	r3, [r7, #0]
 800e448:	f04f 30ff 	mov.w	r0, #4294967295
 800e44c:	e0d1      	b.n	800e5f2 <_svfiprintf_r+0x1d2>
 800e44e:	2340      	movs	r3, #64	; 0x40
 800e450:	616b      	str	r3, [r5, #20]
 800e452:	2300      	movs	r3, #0
 800e454:	9309      	str	r3, [sp, #36]	; 0x24
 800e456:	2320      	movs	r3, #32
 800e458:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e45c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e460:	2330      	movs	r3, #48	; 0x30
 800e462:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e60c <_svfiprintf_r+0x1ec>
 800e466:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e46a:	f04f 0901 	mov.w	r9, #1
 800e46e:	4623      	mov	r3, r4
 800e470:	469a      	mov	sl, r3
 800e472:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e476:	b10a      	cbz	r2, 800e47c <_svfiprintf_r+0x5c>
 800e478:	2a25      	cmp	r2, #37	; 0x25
 800e47a:	d1f9      	bne.n	800e470 <_svfiprintf_r+0x50>
 800e47c:	ebba 0b04 	subs.w	fp, sl, r4
 800e480:	d00b      	beq.n	800e49a <_svfiprintf_r+0x7a>
 800e482:	465b      	mov	r3, fp
 800e484:	4622      	mov	r2, r4
 800e486:	4629      	mov	r1, r5
 800e488:	4638      	mov	r0, r7
 800e48a:	f7ff ff6d 	bl	800e368 <__ssputs_r>
 800e48e:	3001      	adds	r0, #1
 800e490:	f000 80aa 	beq.w	800e5e8 <_svfiprintf_r+0x1c8>
 800e494:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e496:	445a      	add	r2, fp
 800e498:	9209      	str	r2, [sp, #36]	; 0x24
 800e49a:	f89a 3000 	ldrb.w	r3, [sl]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	f000 80a2 	beq.w	800e5e8 <_svfiprintf_r+0x1c8>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4ae:	f10a 0a01 	add.w	sl, sl, #1
 800e4b2:	9304      	str	r3, [sp, #16]
 800e4b4:	9307      	str	r3, [sp, #28]
 800e4b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e4ba:	931a      	str	r3, [sp, #104]	; 0x68
 800e4bc:	4654      	mov	r4, sl
 800e4be:	2205      	movs	r2, #5
 800e4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c4:	4851      	ldr	r0, [pc, #324]	; (800e60c <_svfiprintf_r+0x1ec>)
 800e4c6:	f7f1 fea3 	bl	8000210 <memchr>
 800e4ca:	9a04      	ldr	r2, [sp, #16]
 800e4cc:	b9d8      	cbnz	r0, 800e506 <_svfiprintf_r+0xe6>
 800e4ce:	06d0      	lsls	r0, r2, #27
 800e4d0:	bf44      	itt	mi
 800e4d2:	2320      	movmi	r3, #32
 800e4d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4d8:	0711      	lsls	r1, r2, #28
 800e4da:	bf44      	itt	mi
 800e4dc:	232b      	movmi	r3, #43	; 0x2b
 800e4de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4e2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e6:	2b2a      	cmp	r3, #42	; 0x2a
 800e4e8:	d015      	beq.n	800e516 <_svfiprintf_r+0xf6>
 800e4ea:	9a07      	ldr	r2, [sp, #28]
 800e4ec:	4654      	mov	r4, sl
 800e4ee:	2000      	movs	r0, #0
 800e4f0:	f04f 0c0a 	mov.w	ip, #10
 800e4f4:	4621      	mov	r1, r4
 800e4f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4fa:	3b30      	subs	r3, #48	; 0x30
 800e4fc:	2b09      	cmp	r3, #9
 800e4fe:	d94e      	bls.n	800e59e <_svfiprintf_r+0x17e>
 800e500:	b1b0      	cbz	r0, 800e530 <_svfiprintf_r+0x110>
 800e502:	9207      	str	r2, [sp, #28]
 800e504:	e014      	b.n	800e530 <_svfiprintf_r+0x110>
 800e506:	eba0 0308 	sub.w	r3, r0, r8
 800e50a:	fa09 f303 	lsl.w	r3, r9, r3
 800e50e:	4313      	orrs	r3, r2
 800e510:	9304      	str	r3, [sp, #16]
 800e512:	46a2      	mov	sl, r4
 800e514:	e7d2      	b.n	800e4bc <_svfiprintf_r+0x9c>
 800e516:	9b03      	ldr	r3, [sp, #12]
 800e518:	1d19      	adds	r1, r3, #4
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	9103      	str	r1, [sp, #12]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	bfbb      	ittet	lt
 800e522:	425b      	neglt	r3, r3
 800e524:	f042 0202 	orrlt.w	r2, r2, #2
 800e528:	9307      	strge	r3, [sp, #28]
 800e52a:	9307      	strlt	r3, [sp, #28]
 800e52c:	bfb8      	it	lt
 800e52e:	9204      	strlt	r2, [sp, #16]
 800e530:	7823      	ldrb	r3, [r4, #0]
 800e532:	2b2e      	cmp	r3, #46	; 0x2e
 800e534:	d10c      	bne.n	800e550 <_svfiprintf_r+0x130>
 800e536:	7863      	ldrb	r3, [r4, #1]
 800e538:	2b2a      	cmp	r3, #42	; 0x2a
 800e53a:	d135      	bne.n	800e5a8 <_svfiprintf_r+0x188>
 800e53c:	9b03      	ldr	r3, [sp, #12]
 800e53e:	1d1a      	adds	r2, r3, #4
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	9203      	str	r2, [sp, #12]
 800e544:	2b00      	cmp	r3, #0
 800e546:	bfb8      	it	lt
 800e548:	f04f 33ff 	movlt.w	r3, #4294967295
 800e54c:	3402      	adds	r4, #2
 800e54e:	9305      	str	r3, [sp, #20]
 800e550:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e61c <_svfiprintf_r+0x1fc>
 800e554:	7821      	ldrb	r1, [r4, #0]
 800e556:	2203      	movs	r2, #3
 800e558:	4650      	mov	r0, sl
 800e55a:	f7f1 fe59 	bl	8000210 <memchr>
 800e55e:	b140      	cbz	r0, 800e572 <_svfiprintf_r+0x152>
 800e560:	2340      	movs	r3, #64	; 0x40
 800e562:	eba0 000a 	sub.w	r0, r0, sl
 800e566:	fa03 f000 	lsl.w	r0, r3, r0
 800e56a:	9b04      	ldr	r3, [sp, #16]
 800e56c:	4303      	orrs	r3, r0
 800e56e:	3401      	adds	r4, #1
 800e570:	9304      	str	r3, [sp, #16]
 800e572:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e576:	4826      	ldr	r0, [pc, #152]	; (800e610 <_svfiprintf_r+0x1f0>)
 800e578:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e57c:	2206      	movs	r2, #6
 800e57e:	f7f1 fe47 	bl	8000210 <memchr>
 800e582:	2800      	cmp	r0, #0
 800e584:	d038      	beq.n	800e5f8 <_svfiprintf_r+0x1d8>
 800e586:	4b23      	ldr	r3, [pc, #140]	; (800e614 <_svfiprintf_r+0x1f4>)
 800e588:	bb1b      	cbnz	r3, 800e5d2 <_svfiprintf_r+0x1b2>
 800e58a:	9b03      	ldr	r3, [sp, #12]
 800e58c:	3307      	adds	r3, #7
 800e58e:	f023 0307 	bic.w	r3, r3, #7
 800e592:	3308      	adds	r3, #8
 800e594:	9303      	str	r3, [sp, #12]
 800e596:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e598:	4433      	add	r3, r6
 800e59a:	9309      	str	r3, [sp, #36]	; 0x24
 800e59c:	e767      	b.n	800e46e <_svfiprintf_r+0x4e>
 800e59e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5a2:	460c      	mov	r4, r1
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	e7a5      	b.n	800e4f4 <_svfiprintf_r+0xd4>
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	3401      	adds	r4, #1
 800e5ac:	9305      	str	r3, [sp, #20]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	f04f 0c0a 	mov.w	ip, #10
 800e5b4:	4620      	mov	r0, r4
 800e5b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5ba:	3a30      	subs	r2, #48	; 0x30
 800e5bc:	2a09      	cmp	r2, #9
 800e5be:	d903      	bls.n	800e5c8 <_svfiprintf_r+0x1a8>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0c5      	beq.n	800e550 <_svfiprintf_r+0x130>
 800e5c4:	9105      	str	r1, [sp, #20]
 800e5c6:	e7c3      	b.n	800e550 <_svfiprintf_r+0x130>
 800e5c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	e7f0      	b.n	800e5b4 <_svfiprintf_r+0x194>
 800e5d2:	ab03      	add	r3, sp, #12
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	462a      	mov	r2, r5
 800e5d8:	4b0f      	ldr	r3, [pc, #60]	; (800e618 <_svfiprintf_r+0x1f8>)
 800e5da:	a904      	add	r1, sp, #16
 800e5dc:	4638      	mov	r0, r7
 800e5de:	f3af 8000 	nop.w
 800e5e2:	1c42      	adds	r2, r0, #1
 800e5e4:	4606      	mov	r6, r0
 800e5e6:	d1d6      	bne.n	800e596 <_svfiprintf_r+0x176>
 800e5e8:	89ab      	ldrh	r3, [r5, #12]
 800e5ea:	065b      	lsls	r3, r3, #25
 800e5ec:	f53f af2c 	bmi.w	800e448 <_svfiprintf_r+0x28>
 800e5f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5f2:	b01d      	add	sp, #116	; 0x74
 800e5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f8:	ab03      	add	r3, sp, #12
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	462a      	mov	r2, r5
 800e5fe:	4b06      	ldr	r3, [pc, #24]	; (800e618 <_svfiprintf_r+0x1f8>)
 800e600:	a904      	add	r1, sp, #16
 800e602:	4638      	mov	r0, r7
 800e604:	f000 f87a 	bl	800e6fc <_printf_i>
 800e608:	e7eb      	b.n	800e5e2 <_svfiprintf_r+0x1c2>
 800e60a:	bf00      	nop
 800e60c:	0800ee11 	.word	0x0800ee11
 800e610:	0800ee1b 	.word	0x0800ee1b
 800e614:	00000000 	.word	0x00000000
 800e618:	0800e369 	.word	0x0800e369
 800e61c:	0800ee17 	.word	0x0800ee17

0800e620 <_printf_common>:
 800e620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e624:	4616      	mov	r6, r2
 800e626:	4699      	mov	r9, r3
 800e628:	688a      	ldr	r2, [r1, #8]
 800e62a:	690b      	ldr	r3, [r1, #16]
 800e62c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e630:	4293      	cmp	r3, r2
 800e632:	bfb8      	it	lt
 800e634:	4613      	movlt	r3, r2
 800e636:	6033      	str	r3, [r6, #0]
 800e638:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e63c:	4607      	mov	r7, r0
 800e63e:	460c      	mov	r4, r1
 800e640:	b10a      	cbz	r2, 800e646 <_printf_common+0x26>
 800e642:	3301      	adds	r3, #1
 800e644:	6033      	str	r3, [r6, #0]
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	0699      	lsls	r1, r3, #26
 800e64a:	bf42      	ittt	mi
 800e64c:	6833      	ldrmi	r3, [r6, #0]
 800e64e:	3302      	addmi	r3, #2
 800e650:	6033      	strmi	r3, [r6, #0]
 800e652:	6825      	ldr	r5, [r4, #0]
 800e654:	f015 0506 	ands.w	r5, r5, #6
 800e658:	d106      	bne.n	800e668 <_printf_common+0x48>
 800e65a:	f104 0a19 	add.w	sl, r4, #25
 800e65e:	68e3      	ldr	r3, [r4, #12]
 800e660:	6832      	ldr	r2, [r6, #0]
 800e662:	1a9b      	subs	r3, r3, r2
 800e664:	42ab      	cmp	r3, r5
 800e666:	dc26      	bgt.n	800e6b6 <_printf_common+0x96>
 800e668:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e66c:	1e13      	subs	r3, r2, #0
 800e66e:	6822      	ldr	r2, [r4, #0]
 800e670:	bf18      	it	ne
 800e672:	2301      	movne	r3, #1
 800e674:	0692      	lsls	r2, r2, #26
 800e676:	d42b      	bmi.n	800e6d0 <_printf_common+0xb0>
 800e678:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e67c:	4649      	mov	r1, r9
 800e67e:	4638      	mov	r0, r7
 800e680:	47c0      	blx	r8
 800e682:	3001      	adds	r0, #1
 800e684:	d01e      	beq.n	800e6c4 <_printf_common+0xa4>
 800e686:	6823      	ldr	r3, [r4, #0]
 800e688:	68e5      	ldr	r5, [r4, #12]
 800e68a:	6832      	ldr	r2, [r6, #0]
 800e68c:	f003 0306 	and.w	r3, r3, #6
 800e690:	2b04      	cmp	r3, #4
 800e692:	bf08      	it	eq
 800e694:	1aad      	subeq	r5, r5, r2
 800e696:	68a3      	ldr	r3, [r4, #8]
 800e698:	6922      	ldr	r2, [r4, #16]
 800e69a:	bf0c      	ite	eq
 800e69c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e6a0:	2500      	movne	r5, #0
 800e6a2:	4293      	cmp	r3, r2
 800e6a4:	bfc4      	itt	gt
 800e6a6:	1a9b      	subgt	r3, r3, r2
 800e6a8:	18ed      	addgt	r5, r5, r3
 800e6aa:	2600      	movs	r6, #0
 800e6ac:	341a      	adds	r4, #26
 800e6ae:	42b5      	cmp	r5, r6
 800e6b0:	d11a      	bne.n	800e6e8 <_printf_common+0xc8>
 800e6b2:	2000      	movs	r0, #0
 800e6b4:	e008      	b.n	800e6c8 <_printf_common+0xa8>
 800e6b6:	2301      	movs	r3, #1
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	4649      	mov	r1, r9
 800e6bc:	4638      	mov	r0, r7
 800e6be:	47c0      	blx	r8
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	d103      	bne.n	800e6cc <_printf_common+0xac>
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e6cc:	3501      	adds	r5, #1
 800e6ce:	e7c6      	b.n	800e65e <_printf_common+0x3e>
 800e6d0:	18e1      	adds	r1, r4, r3
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	2030      	movs	r0, #48	; 0x30
 800e6d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e6da:	4422      	add	r2, r4
 800e6dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e6e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e6e4:	3302      	adds	r3, #2
 800e6e6:	e7c7      	b.n	800e678 <_printf_common+0x58>
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	4649      	mov	r1, r9
 800e6ee:	4638      	mov	r0, r7
 800e6f0:	47c0      	blx	r8
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	d0e6      	beq.n	800e6c4 <_printf_common+0xa4>
 800e6f6:	3601      	adds	r6, #1
 800e6f8:	e7d9      	b.n	800e6ae <_printf_common+0x8e>
	...

0800e6fc <_printf_i>:
 800e6fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e700:	7e0f      	ldrb	r7, [r1, #24]
 800e702:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e704:	2f78      	cmp	r7, #120	; 0x78
 800e706:	4691      	mov	r9, r2
 800e708:	4680      	mov	r8, r0
 800e70a:	460c      	mov	r4, r1
 800e70c:	469a      	mov	sl, r3
 800e70e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e712:	d807      	bhi.n	800e724 <_printf_i+0x28>
 800e714:	2f62      	cmp	r7, #98	; 0x62
 800e716:	d80a      	bhi.n	800e72e <_printf_i+0x32>
 800e718:	2f00      	cmp	r7, #0
 800e71a:	f000 80d8 	beq.w	800e8ce <_printf_i+0x1d2>
 800e71e:	2f58      	cmp	r7, #88	; 0x58
 800e720:	f000 80a3 	beq.w	800e86a <_printf_i+0x16e>
 800e724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e728:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e72c:	e03a      	b.n	800e7a4 <_printf_i+0xa8>
 800e72e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e732:	2b15      	cmp	r3, #21
 800e734:	d8f6      	bhi.n	800e724 <_printf_i+0x28>
 800e736:	a101      	add	r1, pc, #4	; (adr r1, 800e73c <_printf_i+0x40>)
 800e738:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e73c:	0800e795 	.word	0x0800e795
 800e740:	0800e7a9 	.word	0x0800e7a9
 800e744:	0800e725 	.word	0x0800e725
 800e748:	0800e725 	.word	0x0800e725
 800e74c:	0800e725 	.word	0x0800e725
 800e750:	0800e725 	.word	0x0800e725
 800e754:	0800e7a9 	.word	0x0800e7a9
 800e758:	0800e725 	.word	0x0800e725
 800e75c:	0800e725 	.word	0x0800e725
 800e760:	0800e725 	.word	0x0800e725
 800e764:	0800e725 	.word	0x0800e725
 800e768:	0800e8b5 	.word	0x0800e8b5
 800e76c:	0800e7d9 	.word	0x0800e7d9
 800e770:	0800e897 	.word	0x0800e897
 800e774:	0800e725 	.word	0x0800e725
 800e778:	0800e725 	.word	0x0800e725
 800e77c:	0800e8d7 	.word	0x0800e8d7
 800e780:	0800e725 	.word	0x0800e725
 800e784:	0800e7d9 	.word	0x0800e7d9
 800e788:	0800e725 	.word	0x0800e725
 800e78c:	0800e725 	.word	0x0800e725
 800e790:	0800e89f 	.word	0x0800e89f
 800e794:	682b      	ldr	r3, [r5, #0]
 800e796:	1d1a      	adds	r2, r3, #4
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	602a      	str	r2, [r5, #0]
 800e79c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e7a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e0a3      	b.n	800e8f0 <_printf_i+0x1f4>
 800e7a8:	6820      	ldr	r0, [r4, #0]
 800e7aa:	6829      	ldr	r1, [r5, #0]
 800e7ac:	0606      	lsls	r6, r0, #24
 800e7ae:	f101 0304 	add.w	r3, r1, #4
 800e7b2:	d50a      	bpl.n	800e7ca <_printf_i+0xce>
 800e7b4:	680e      	ldr	r6, [r1, #0]
 800e7b6:	602b      	str	r3, [r5, #0]
 800e7b8:	2e00      	cmp	r6, #0
 800e7ba:	da03      	bge.n	800e7c4 <_printf_i+0xc8>
 800e7bc:	232d      	movs	r3, #45	; 0x2d
 800e7be:	4276      	negs	r6, r6
 800e7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7c4:	485e      	ldr	r0, [pc, #376]	; (800e940 <_printf_i+0x244>)
 800e7c6:	230a      	movs	r3, #10
 800e7c8:	e019      	b.n	800e7fe <_printf_i+0x102>
 800e7ca:	680e      	ldr	r6, [r1, #0]
 800e7cc:	602b      	str	r3, [r5, #0]
 800e7ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e7d2:	bf18      	it	ne
 800e7d4:	b236      	sxthne	r6, r6
 800e7d6:	e7ef      	b.n	800e7b8 <_printf_i+0xbc>
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	6820      	ldr	r0, [r4, #0]
 800e7dc:	1d19      	adds	r1, r3, #4
 800e7de:	6029      	str	r1, [r5, #0]
 800e7e0:	0601      	lsls	r1, r0, #24
 800e7e2:	d501      	bpl.n	800e7e8 <_printf_i+0xec>
 800e7e4:	681e      	ldr	r6, [r3, #0]
 800e7e6:	e002      	b.n	800e7ee <_printf_i+0xf2>
 800e7e8:	0646      	lsls	r6, r0, #25
 800e7ea:	d5fb      	bpl.n	800e7e4 <_printf_i+0xe8>
 800e7ec:	881e      	ldrh	r6, [r3, #0]
 800e7ee:	4854      	ldr	r0, [pc, #336]	; (800e940 <_printf_i+0x244>)
 800e7f0:	2f6f      	cmp	r7, #111	; 0x6f
 800e7f2:	bf0c      	ite	eq
 800e7f4:	2308      	moveq	r3, #8
 800e7f6:	230a      	movne	r3, #10
 800e7f8:	2100      	movs	r1, #0
 800e7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e7fe:	6865      	ldr	r5, [r4, #4]
 800e800:	60a5      	str	r5, [r4, #8]
 800e802:	2d00      	cmp	r5, #0
 800e804:	bfa2      	ittt	ge
 800e806:	6821      	ldrge	r1, [r4, #0]
 800e808:	f021 0104 	bicge.w	r1, r1, #4
 800e80c:	6021      	strge	r1, [r4, #0]
 800e80e:	b90e      	cbnz	r6, 800e814 <_printf_i+0x118>
 800e810:	2d00      	cmp	r5, #0
 800e812:	d04d      	beq.n	800e8b0 <_printf_i+0x1b4>
 800e814:	4615      	mov	r5, r2
 800e816:	fbb6 f1f3 	udiv	r1, r6, r3
 800e81a:	fb03 6711 	mls	r7, r3, r1, r6
 800e81e:	5dc7      	ldrb	r7, [r0, r7]
 800e820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e824:	4637      	mov	r7, r6
 800e826:	42bb      	cmp	r3, r7
 800e828:	460e      	mov	r6, r1
 800e82a:	d9f4      	bls.n	800e816 <_printf_i+0x11a>
 800e82c:	2b08      	cmp	r3, #8
 800e82e:	d10b      	bne.n	800e848 <_printf_i+0x14c>
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	07de      	lsls	r6, r3, #31
 800e834:	d508      	bpl.n	800e848 <_printf_i+0x14c>
 800e836:	6923      	ldr	r3, [r4, #16]
 800e838:	6861      	ldr	r1, [r4, #4]
 800e83a:	4299      	cmp	r1, r3
 800e83c:	bfde      	ittt	le
 800e83e:	2330      	movle	r3, #48	; 0x30
 800e840:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e844:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e848:	1b52      	subs	r2, r2, r5
 800e84a:	6122      	str	r2, [r4, #16]
 800e84c:	f8cd a000 	str.w	sl, [sp]
 800e850:	464b      	mov	r3, r9
 800e852:	aa03      	add	r2, sp, #12
 800e854:	4621      	mov	r1, r4
 800e856:	4640      	mov	r0, r8
 800e858:	f7ff fee2 	bl	800e620 <_printf_common>
 800e85c:	3001      	adds	r0, #1
 800e85e:	d14c      	bne.n	800e8fa <_printf_i+0x1fe>
 800e860:	f04f 30ff 	mov.w	r0, #4294967295
 800e864:	b004      	add	sp, #16
 800e866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e86a:	4835      	ldr	r0, [pc, #212]	; (800e940 <_printf_i+0x244>)
 800e86c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e870:	6829      	ldr	r1, [r5, #0]
 800e872:	6823      	ldr	r3, [r4, #0]
 800e874:	f851 6b04 	ldr.w	r6, [r1], #4
 800e878:	6029      	str	r1, [r5, #0]
 800e87a:	061d      	lsls	r5, r3, #24
 800e87c:	d514      	bpl.n	800e8a8 <_printf_i+0x1ac>
 800e87e:	07df      	lsls	r7, r3, #31
 800e880:	bf44      	itt	mi
 800e882:	f043 0320 	orrmi.w	r3, r3, #32
 800e886:	6023      	strmi	r3, [r4, #0]
 800e888:	b91e      	cbnz	r6, 800e892 <_printf_i+0x196>
 800e88a:	6823      	ldr	r3, [r4, #0]
 800e88c:	f023 0320 	bic.w	r3, r3, #32
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	2310      	movs	r3, #16
 800e894:	e7b0      	b.n	800e7f8 <_printf_i+0xfc>
 800e896:	6823      	ldr	r3, [r4, #0]
 800e898:	f043 0320 	orr.w	r3, r3, #32
 800e89c:	6023      	str	r3, [r4, #0]
 800e89e:	2378      	movs	r3, #120	; 0x78
 800e8a0:	4828      	ldr	r0, [pc, #160]	; (800e944 <_printf_i+0x248>)
 800e8a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8a6:	e7e3      	b.n	800e870 <_printf_i+0x174>
 800e8a8:	0659      	lsls	r1, r3, #25
 800e8aa:	bf48      	it	mi
 800e8ac:	b2b6      	uxthmi	r6, r6
 800e8ae:	e7e6      	b.n	800e87e <_printf_i+0x182>
 800e8b0:	4615      	mov	r5, r2
 800e8b2:	e7bb      	b.n	800e82c <_printf_i+0x130>
 800e8b4:	682b      	ldr	r3, [r5, #0]
 800e8b6:	6826      	ldr	r6, [r4, #0]
 800e8b8:	6961      	ldr	r1, [r4, #20]
 800e8ba:	1d18      	adds	r0, r3, #4
 800e8bc:	6028      	str	r0, [r5, #0]
 800e8be:	0635      	lsls	r5, r6, #24
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	d501      	bpl.n	800e8c8 <_printf_i+0x1cc>
 800e8c4:	6019      	str	r1, [r3, #0]
 800e8c6:	e002      	b.n	800e8ce <_printf_i+0x1d2>
 800e8c8:	0670      	lsls	r0, r6, #25
 800e8ca:	d5fb      	bpl.n	800e8c4 <_printf_i+0x1c8>
 800e8cc:	8019      	strh	r1, [r3, #0]
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	6123      	str	r3, [r4, #16]
 800e8d2:	4615      	mov	r5, r2
 800e8d4:	e7ba      	b.n	800e84c <_printf_i+0x150>
 800e8d6:	682b      	ldr	r3, [r5, #0]
 800e8d8:	1d1a      	adds	r2, r3, #4
 800e8da:	602a      	str	r2, [r5, #0]
 800e8dc:	681d      	ldr	r5, [r3, #0]
 800e8de:	6862      	ldr	r2, [r4, #4]
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4628      	mov	r0, r5
 800e8e4:	f7f1 fc94 	bl	8000210 <memchr>
 800e8e8:	b108      	cbz	r0, 800e8ee <_printf_i+0x1f2>
 800e8ea:	1b40      	subs	r0, r0, r5
 800e8ec:	6060      	str	r0, [r4, #4]
 800e8ee:	6863      	ldr	r3, [r4, #4]
 800e8f0:	6123      	str	r3, [r4, #16]
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e8f8:	e7a8      	b.n	800e84c <_printf_i+0x150>
 800e8fa:	6923      	ldr	r3, [r4, #16]
 800e8fc:	462a      	mov	r2, r5
 800e8fe:	4649      	mov	r1, r9
 800e900:	4640      	mov	r0, r8
 800e902:	47d0      	blx	sl
 800e904:	3001      	adds	r0, #1
 800e906:	d0ab      	beq.n	800e860 <_printf_i+0x164>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	079b      	lsls	r3, r3, #30
 800e90c:	d413      	bmi.n	800e936 <_printf_i+0x23a>
 800e90e:	68e0      	ldr	r0, [r4, #12]
 800e910:	9b03      	ldr	r3, [sp, #12]
 800e912:	4298      	cmp	r0, r3
 800e914:	bfb8      	it	lt
 800e916:	4618      	movlt	r0, r3
 800e918:	e7a4      	b.n	800e864 <_printf_i+0x168>
 800e91a:	2301      	movs	r3, #1
 800e91c:	4632      	mov	r2, r6
 800e91e:	4649      	mov	r1, r9
 800e920:	4640      	mov	r0, r8
 800e922:	47d0      	blx	sl
 800e924:	3001      	adds	r0, #1
 800e926:	d09b      	beq.n	800e860 <_printf_i+0x164>
 800e928:	3501      	adds	r5, #1
 800e92a:	68e3      	ldr	r3, [r4, #12]
 800e92c:	9903      	ldr	r1, [sp, #12]
 800e92e:	1a5b      	subs	r3, r3, r1
 800e930:	42ab      	cmp	r3, r5
 800e932:	dcf2      	bgt.n	800e91a <_printf_i+0x21e>
 800e934:	e7eb      	b.n	800e90e <_printf_i+0x212>
 800e936:	2500      	movs	r5, #0
 800e938:	f104 0619 	add.w	r6, r4, #25
 800e93c:	e7f5      	b.n	800e92a <_printf_i+0x22e>
 800e93e:	bf00      	nop
 800e940:	0800ee22 	.word	0x0800ee22
 800e944:	0800ee33 	.word	0x0800ee33

0800e948 <memmove>:
 800e948:	4288      	cmp	r0, r1
 800e94a:	b510      	push	{r4, lr}
 800e94c:	eb01 0402 	add.w	r4, r1, r2
 800e950:	d902      	bls.n	800e958 <memmove+0x10>
 800e952:	4284      	cmp	r4, r0
 800e954:	4623      	mov	r3, r4
 800e956:	d807      	bhi.n	800e968 <memmove+0x20>
 800e958:	1e43      	subs	r3, r0, #1
 800e95a:	42a1      	cmp	r1, r4
 800e95c:	d008      	beq.n	800e970 <memmove+0x28>
 800e95e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e962:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e966:	e7f8      	b.n	800e95a <memmove+0x12>
 800e968:	4402      	add	r2, r0
 800e96a:	4601      	mov	r1, r0
 800e96c:	428a      	cmp	r2, r1
 800e96e:	d100      	bne.n	800e972 <memmove+0x2a>
 800e970:	bd10      	pop	{r4, pc}
 800e972:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e976:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e97a:	e7f7      	b.n	800e96c <memmove+0x24>

0800e97c <_realloc_r>:
 800e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e980:	4680      	mov	r8, r0
 800e982:	4614      	mov	r4, r2
 800e984:	460e      	mov	r6, r1
 800e986:	b921      	cbnz	r1, 800e992 <_realloc_r+0x16>
 800e988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e98c:	4611      	mov	r1, r2
 800e98e:	f7ff bb15 	b.w	800dfbc <_malloc_r>
 800e992:	b92a      	cbnz	r2, 800e9a0 <_realloc_r+0x24>
 800e994:	f7ff faa6 	bl	800dee4 <_free_r>
 800e998:	4625      	mov	r5, r4
 800e99a:	4628      	mov	r0, r5
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a0:	f000 f81b 	bl	800e9da <_malloc_usable_size_r>
 800e9a4:	4284      	cmp	r4, r0
 800e9a6:	4607      	mov	r7, r0
 800e9a8:	d802      	bhi.n	800e9b0 <_realloc_r+0x34>
 800e9aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9ae:	d812      	bhi.n	800e9d6 <_realloc_r+0x5a>
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	f7ff fb02 	bl	800dfbc <_malloc_r>
 800e9b8:	4605      	mov	r5, r0
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d0ed      	beq.n	800e99a <_realloc_r+0x1e>
 800e9be:	42bc      	cmp	r4, r7
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	bf28      	it	cs
 800e9c6:	463a      	movcs	r2, r7
 800e9c8:	f7ff fa60 	bl	800de8c <memcpy>
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f7ff fa88 	bl	800dee4 <_free_r>
 800e9d4:	e7e1      	b.n	800e99a <_realloc_r+0x1e>
 800e9d6:	4635      	mov	r5, r6
 800e9d8:	e7df      	b.n	800e99a <_realloc_r+0x1e>

0800e9da <_malloc_usable_size_r>:
 800e9da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9de:	1f18      	subs	r0, r3, #4
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	bfbc      	itt	lt
 800e9e4:	580b      	ldrlt	r3, [r1, r0]
 800e9e6:	18c0      	addlt	r0, r0, r3
 800e9e8:	4770      	bx	lr
	...

0800e9ec <_init>:
 800e9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ee:	bf00      	nop
 800e9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9f2:	bc08      	pop	{r3}
 800e9f4:	469e      	mov	lr, r3
 800e9f6:	4770      	bx	lr

0800e9f8 <_fini>:
 800e9f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9fa:	bf00      	nop
 800e9fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9fe:	bc08      	pop	{r3}
 800ea00:	469e      	mov	lr, r3
 800ea02:	4770      	bx	lr
